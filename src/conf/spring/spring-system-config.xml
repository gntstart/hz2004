<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-4.1.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx.xsd
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
            http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd ">
    	<!-- 启动注解扫描 -->
	<context:component-scan base-package="com.hzjc.hz2004" >
	 	<!-- 扫描时跳过 @Controller 注解的JAVA类（控制器） -->
    <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<!-- 加载资源文件 -->
	<context:property-placeholder	location="classpath:conf/system_db.properties" />

	 <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
	        <!-- 基本属性 url、user、password -->
	        <property name="driverClassName" value="${jdbc.driverClass}"/>
	        <property name="url" value="${jdbc.url}"/>
	        <property name="username" value="${jdbc.user}"/>
	        <property name="password" value="${jdbc.password}"/>
	        <!-- 配置初始化大小、最小、最大 -->
	        <property name="initialSize" value="1" />
	        <property name="minIdle" value="1" />
	        <property name="maxActive" value="500" />
	        <!-- 配置获取连接等待超时的时间 -->
	        <property name="maxWait" value="60000" />
	        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
	        <property name="timeBetweenEvictionRunsMillis" value="60000" />
	        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
	        <property name="minEvictableIdleTimeMillis" value="300000" />
	        <property name="validationQuery" value="select 1 from dual" />
	        <property name="testWhileIdle" value="true" />
	        <property name="testOnBorrow" value="false" />
	        <property name="testOnReturn" value="false" />
	        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
	        <property name="poolPreparedStatements" value="true" />
	        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	        <!-- 超过5秒，认为SQL具有性能问题，需要记录 -->
	        <property name="connectionProperties" value="druid.stat.slowSqlMillis=5000;druid.stat.mergeSql=true" />
	        <!-- 合并所有同类型连接池 -->
	        <property name="useGlobalDataSourceStat" value="true" />
	        <!-- 配置监控统计拦截的filters -->
	        <property name="filters" value="stat" />
	</bean>
	<!-- hibernate 需要的信息 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 扫描映射文件，实体类 -->
		<property name="packagesToScan">
			<list>
				<!-- 这里匹配com.jfeng.entity包下所有的实体！ -->
				<value>com.hzjc.hz2004.po</value>
			</list>
		</property>
		<!--正式发布的时候放开注释 -->
		<!-- <property name="mappingJarLocations">
			<list>
				<value>/WEB-INF/lib/rkxt.jar</value>
			</list>
		</property>  -->
		<!--  注释结束 -->
		<property name="hibernateProperties">
			<props>
				<!-- 指定数据库方言 -->
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<!-- 显示Hibernate持久化操作所生成的SQL -->
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<!-- 将SQL脚本进行格式化后再输出 -->
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>

				<!-- 其他相关信息 -->
				<prop key="hibernate.query.substitutions">${hibernate.query.substitutions}</prop>
				<prop key="hibernate.default_batch_fetch_size">${hibernate.default_batch_fetch_size}</prop>
				<prop key="hibernate.max_fetch_depth">${hibernate.max_fetch_depth}</prop>
				<prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop>
				<prop key="hibernate.bytecode.use_reflection_optimizer">${hibernate.bytecode.use_reflection_optimizer}</prop>
				<prop key="hibernate.use_sql_comments">${hibernate.use_sql_comments}</prop>
			</props>
		</property>
	</bean>
	<!-- 事物管理器配置  -->
    	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
			<property name="sessionFactory" ref="sessionFactory" />
    	</bean>
    
	<!-- 事务属性配置 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*"  propagation="SUPPORTS"  read-only="true" />
	          	<tx:method name="query*"  propagation="SUPPORTS"  read-only="true" />  
	          	<tx:method name="count*" propagation="SUPPORTS"  read-only="true" />  
	          	<tx:method name="find*" propagation="SUPPORTS"  read-only="true" />  
	          	<tx:method name="list*"  propagation="SUPPORTS"  read-only="true" />
	          	<tx:method name="search*" propagation="SUPPORTS" read-only="true" />
	          	<tx:method name="load*"  propagation="SUPPORTS"  read-only="true" />
	         	<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	<!-- 事务控制位置，一般在业务层service -->
	<aop:config>
		<aop:pointcut id="txPointcut" expression="execution(* com.hzjc..service..*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
	</aop:config>
	
	<!-- 用于持有ApplicationContext,可以使用SpringContextHolder.getBean('xxxx')的静态方法得到spring bean对象
		从MVC里面挪到这里，在控制器之前初始化 -->
	<bean class="com.hzjc.hz2004.base.SpringContextHolder" lazy-init="false" />
</beans>  
