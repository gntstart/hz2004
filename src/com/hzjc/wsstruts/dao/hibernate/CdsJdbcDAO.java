/* Generated by Together */

package com.hzjc.wsstruts.dao.hibernate;

import org.dom4j.*;
import org.dom4j.io.*;
import com.hzjc.wsstruts.common.xml.*;
import com.hzjc.wsstruts.exception.*;

import java.sql.*;
import java.util.HashMap;
import java.util.Map;

import com.hzjc.hz2004.base.encode.Base64;
import com.hzjc.wsstruts.common.db.*;
import java.io.*;

/**
 * 用JDBC方式查询数据库，
 * 并生成Delphi70的ClientDataSet的XmlData结构的数据库访问对象
 * <p>Title: Hz2004</p>
 * <p>Description: 常住人口管理系统Hz2004版</p>
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Company: 浙江金铖华元新技术有限公司</p>
 * @author kgb_hz@126.com,kgb@primetech.com.cn
 * @version 1.0
 */
public class CdsJdbcDAO
    extends BaseHibernateDAO {

  private DbConnectionProvider _dbcp = new DbConnectionProvider();
  private CdsXmlDataTemplate _cdstemplate = new CdsXmlDataTemplate();

  /**
   *
   */
  public CdsJdbcDAO() {

  }

  /**
   * 构造返回分页的SQl语句
   * @param sql
   * @return
   */
  private String getLimitString(String sql) {
    StringBuffer pagingSelect = new StringBuffer(200);
    pagingSelect.append("select * from ( select row_.*, rownum rownum_ from ( ");
    pagingSelect.append(sql);
    pagingSelect.append(" ) row_ where rownum <= ?) where rownum_ > ?");
    return pagingSelect.toString();
  }

  /**
   *
   * @param strSQL
   * @param offset
   * @param pagesize
   * @return
   * @throws DAOException
   */
  public String findOnePageRsXml(String strSQL, int offset, int pagesize) throws
      DAOException {
    String strXml = null;
    PreparedStatement ps = null;
    ResultSet rs = null;
    String strLimitSql = "";
    Connection conn = _dbcp.getConnection();
    try {
      //查询得到Filter符合查询条件的某页数据集
      strLimitSql = getLimitString(strSQL);
      _log.info(strLimitSql);
      ps = conn.prepareStatement(strLimitSql);
      ps.setInt(1, offset + pagesize);
      ps.setInt(2, offset);
      rs = ps.executeQuery();
      strXml = _cdstemplate.buildXmlData(rs);
      DbUtils.close(rs);
      DbUtils.close(ps);
      return strXml;
    }
    catch (Exception ex) {
      DbUtils.close(rs);
      DbUtils.close(ps);
      throw new DAOException(WSErrCode.ERR_DB_OTHER,
                             "生成ClientDataSet的XMLDATA异常。", ex);
    }
    finally {
      _dbcp.closeConnection();
    }
  }

  /**
   *
   * @param strSQL
   * @param offset
   * @param pagesize
   * @return
   * @throws DAOException
   */
  public String findAllRsXml(String strSQL) throws
      DAOException {
    String strXml = null;
    PreparedStatement ps = null;
    ResultSet rs = null;
    Connection conn = _dbcp.getConnection();
    try {
      ps = conn.prepareStatement(strSQL);
      rs = ps.executeQuery();
      strXml = _cdstemplate.buildXmlData(rs);
      DbUtils.close(rs);
      DbUtils.close(ps);
    }
    catch (Exception ex) {
      DbUtils.close(rs);
      DbUtils.close(ps);
      throw new DAOException("", ex);
    }
    finally {
      _dbcp.closeConnection();
    }
    return strXml;
  }

  /**
   *
   * @param strSpSql
   * @return
   * @throws DAOException
   */
  public String findAllRsXmlBySP(String strSpSql) throws DAOException {
    String strXml = null;
    CallableStatement cs = null;
    ResultSet rs = null;
    Connection conn = _dbcp.getConnection();
    try {
      cs = conn.prepareCall(strSpSql);
      rs = cs.executeQuery();
      strXml = _cdstemplate.buildXmlData(rs);
      DbUtils.close(rs);
      DbUtils.close(cs);
    }
    catch (Exception ex) {
      DbUtils.close(rs);
      DbUtils.close(cs);
      throw new DAOException("", ex);
    }
    finally {
      _dbcp.closeConnection();
    }
    return strXml;

  }

  /**
   *
   * <p>Title: Hz2004</p>
   * <p>Description: 常住人口管理系统Hz2004版</p>
   * <p>Copyright: Copyright (c) 2004</p>
   * <p>Company: 浙江金铖华元新技术有限公司</p>
   * @author kgb_hz@126.com,kgb@primetech.com.cn
   * @version 1.0
   */
  private static class CdsXmlDataTemplate {
    //{Delphi-ClientDataSet中的XMLDATA格式}
    public final static String XMLDATA_TAG_DATAPACKET = "DATAPACKET";
    public final static String XMLDATA_TAG_VER = "Version";
    public final static String XMLDATA_TAG_VER_VALUE = "2.0";
    //{字段定义TAG}
    public final static String XMLDATA_TAG_METADATA = "METADATA";
    public final static String XMLDATA_TAG_FIELDS = "FIELDS";
    public final static String XMLDATA_TAG_FIELD = "FIELD";
    public final static String XMLDATA_TAG_ATTRNAME = "attrname";
    public final static String XMLDATA_TAG_FIELDTYPE = "fieldtype";
    public final static String XMLDATA_TAG_SUBTYPE = "SUBTYPE";
    public final static String XMLDATA_TAG_WIDTH = "WIDTH";
    //{数据TAG}
    public final static String XMLDATA_TAG_ROWDATA = "ROWDATA";
    public final static String XMLDATA_TAG_ROW = "ROW";
    public final static String XMLDATA_TAG_ROWSTATE = "RowState";
    public final static String XMLDATA_TAG_FIELDTYPE_binhex = "bin.hex";
    public final static String XMLDATA_TAG_BINARY = "Binary";
    //Oracle数据库中的类型Types
    private static Map mapTypes = null;

    static {
      mapTypes = new HashMap();
      mapTypes.put(new Integer(Types.ARRAY), "string");
      mapTypes.put(new Integer(Types.BIGINT), "string");
      mapTypes.put(new Integer(Types.BINARY), "bin.hex");
      mapTypes.put(new Integer(Types.BIT), "string");
      mapTypes.put(new Integer(Types.BLOB), "bin.hex");
      //mapTypes.put(new Integer(Types.BOOLEAN), "string");
      mapTypes.put(new Integer(Types.CHAR), "string");
      mapTypes.put(new Integer(Types.CLOB), "bin.hex");
      //mapTypes.put(new Integer(Types.DATALINK), "string");
      mapTypes.put(new Integer(Types.DATE), "string");
      mapTypes.put(new Integer(Types.DECIMAL), "string");
      //mapTypes.put(new Integer(Types.DISTINCT), "string");
      mapTypes.put(new Integer(Types.DOUBLE), "string");
      mapTypes.put(new Integer(Types.FLOAT), "string");
      mapTypes.put(new Integer(Types.INTEGER), "string");
      //mapTypes.put(new Integer(Types.JAVA_OBJECT), "string");
      mapTypes.put(new Integer(Types.LONGVARBINARY), "bin.hex");
      mapTypes.put(new Integer(Types.LONGVARCHAR), "string");
      mapTypes.put(new Integer(Types.NULL), "string");
      mapTypes.put(new Integer(Types.NUMERIC), "string");
      mapTypes.put(new Integer(Types.REAL), "string");
      mapTypes.put(new Integer(Types.OTHER), "string");
      //mapTypes.put(new Integer(Types.REF), "string");
      mapTypes.put(new Integer(Types.SMALLINT), "string");
      //mapTypes.put(new Integer(Types.STRUCT), "string");
      mapTypes.put(new Integer(Types.TIME), "string");
      mapTypes.put(new Integer(Types.TIMESTAMP), "string");
      mapTypes.put(new Integer(Types.TINYINT), "string");
      mapTypes.put(new Integer(Types.VARBINARY), "bin.hex");
      mapTypes.put(new Integer(Types.VARCHAR), "string");
    }

    private Document _doc = null;

    /**
     *
     */
    protected CdsXmlDataTemplate() {

    }

    /**
     *
     * @return
     */
    private Element getFieldsElement() {
      Element eFields = null;
      if (_doc != null) {
        eFields = (Element) _doc.selectSingleNode("//".concat(
            XMLDATA_TAG_DATAPACKET).concat("/").concat(XMLDATA_TAG_METADATA).
                                                  concat("/").
                                                  concat(XMLDATA_TAG_FIELDS));
      }
      return eFields;
    }

    /**
     *
     * @return
     */
    private Element getRowDataElement() {
      Element eRowData = null;
      if (_doc != null) {
        eRowData = (Element) _doc.selectSingleNode("//".concat(
            XMLDATA_TAG_DATAPACKET).concat("/").concat(XMLDATA_TAG_ROWDATA));
      }
      return eRowData;
    }

    /**
     *
     * @return
     */
    protected String buildXmlData(ResultSet rs) throws DAOException {
      String strXml = "";
      try {
        //生成整体框架Document
        buildMainFrame();
        //生成字段定义XML
        if (rs != null) {
          buildFields(rs.getMetaData());
          //生成行数据集合XML
          buildRowData(rs);
        }
        //返回结果
        if (_doc != null) {
          strXml = XmlUtils.toXML(_doc, XmlEncode.ENCODING_NAME_UTF_16);
        }
      }
      catch (Exception ex) {
        throw new DAOException(WSErrCode.ERR_DB_OTHER,
                               "生成ClientDataSet的XMLDATA异常。", ex);
      }
      return strXml;
    }

    /**
     *
     * @return
     */
    private Element buildFields(ResultSetMetaData rsmd) {
      Element eFields = getFieldsElement();
      if (rsmd != null) {
        try {
          //
          for (int i = 1; i <= rsmd.getColumnCount(); i++) {
            Element eField = DocumentHelper.createElement(XMLDATA_TAG_FIELD);
            eField.addAttribute(XMLDATA_TAG_ATTRNAME,
                                rsmd.getColumnName(i).toLowerCase()); //字段名
            eField.addAttribute(XMLDATA_TAG_FIELDTYPE,
                                String.valueOf(mapTypes.
                                               get(new Integer(rsmd.
                getColumnType(i))))); //字段类型
            switch (rsmd.getColumnType(i)) {
              case Types.BINARY:
              case Types.BLOB:
              case Types.CLOB:
              case Types.LONGVARBINARY:
              case Types.VARBINARY:
                eField.addAttribute(XMLDATA_TAG_SUBTYPE, XMLDATA_TAG_BINARY);
                break;
              default:
                eField.addAttribute(XMLDATA_TAG_WIDTH,
                                    String.valueOf(rsmd.getPrecision(i))); //字段长度
                break;
            }
            eFields.add(eField);
          }
        }
        catch (SQLException ex) {
        }
      }
      return eFields;
    }

    /**
     * 将Blob字段的Byte字节流转换为BASE64编码.
     * @param aBlob
     * @return
     */
    private String encodeBlob(Blob aBlob) {
      byte[] byteBlob = DbUtils.parseBlobToBytes(aBlob);
      String strEnCodeBloab = new String(Base64.encode(byteBlob));
      //_log.info("转换Blob为Base64=" + strEnCodeBloab);
      return strEnCodeBloab;
    }

    /**
     *
     * @param abytes
     * @return
     */
    private String encodeBlob(byte[] abytes) {
      String strEnCodeBloab = new String(Base64.encode(abytes));
      //_log.info("转换Blob为Base64=" + strEnCodeBloab);
      return strEnCodeBloab;
    }

    /**
     *
     * @param abytes
     * @return
     */
    private String encodeBlob(InputStream in) {
      String strEnCodeBloab = new String(Base64.encode(parseStreamToBytes(
          in)));
      //_log.info("转换Blob为Base64=" + strEnCodeBloab);
      return strEnCodeBloab;
    }

    /**
     *
     * @param in
     * @return
     */
    private byte[] parseStreamToBytes(InputStream in) {
      byte abyte0[] = null;
      try {
        if (null != in) {
          ByteArrayOutputStream bytearrayoutputstream = new
              ByteArrayOutputStream(
              10240);
          int j;
          while ( (j = in.read()) != -1) {
            bytearrayoutputstream.write(j);
          }
          in.close();
          abyte0 = bytearrayoutputstream.toByteArray();
          bytearrayoutputstream.close();
        }
        else {
          abyte0 = new byte[0];
        }
      }
      catch (Exception ex) {
      }
      return abyte0;
    }

    /**
     *
     * @return
     */
    private Element buildRowData(ResultSet rs) {
      Element eRowData = getRowDataElement();
      if (rs != null) {
        try {
          ResultSetMetaData rsmd = rs.getMetaData();
          int iColCount = rsmd.getColumnCount();
          //
          while (rs.next()) {
            Element eRow = DocumentHelper.createElement(XMLDATA_TAG_ROW);
            //
            for (int i = 1; i <= iColCount; i++) {
              switch (rsmd.getColumnType(i)) {
                case Types.BINARY:
                case Types.BLOB:
                case Types.CLOB:
                case Types.LONGVARBINARY:
                case Types.VARBINARY:
                  eRow.addAttribute(rsmd.getColumnName(i).toLowerCase(),
                                    encodeBlob(rs.getBinaryStream(i)));
                  break;
                default:
                  eRow.addAttribute(rsmd.getColumnName(i).toLowerCase(),
                                    rs.getString(i));
                  break;
              }

            }
            //
            eRowData.add(eRow);
          }
        }
        catch (SQLException ex) {
        }
      }
      return eRowData;
    }

    /**
     *
     * @return
     */
    private Document buildMainFrame() {
      //////////////////////////////////////////////////////////
      //创建XMLDATA Document
      /////////////////////////////////////////////////////////
      _doc = DocumentHelper.createDocument();
      //////////////////////////////////////////////////////////
      //创建DATAPACKET根节点
      /////////////////////////////////////////////////////////
      Element eDataPacket = DocumentHelper.createElement(XMLDATA_TAG_DATAPACKET);
      eDataPacket.addAttribute(XMLDATA_TAG_VER, XMLDATA_TAG_VER_VALUE);
      _doc.setRootElement(eDataPacket);
      /////////////////////////////////////////////////////////
      //创建METADATA元数据节点
      //////////////////////////////////////////////////////////
      Element eMetaData = DocumentHelper.createElement(XMLDATA_TAG_METADATA);
      Element eFieldsData = DocumentHelper.createElement(XMLDATA_TAG_FIELDS);
      eMetaData.add(eFieldsData);
      eDataPacket.add(eMetaData);
      /////////////////////////////////////////////////////////////
      //创建ROWDATA行数据节点
      //////////////////////////////////////////////////////////////
      Element eRowData = DocumentHelper.createElement(XMLDATA_TAG_ROWDATA);
      eDataPacket.add(eRowData);
      ////////////////////////////////////////////////////////////
      //
      ///////////////////////////////////////////////////////////////
      return _doc;
    }

  }

  /**
   *
   * <p>Title: Hz2004</p>
   * <p>Description: 常住人口管理系统Hz2004版</p>
   * <p>Copyright: Copyright (c) 2004</p>
   * <p>Company: 浙江金铖华元新技术有限公司</p>
   * @author kgb_hz@126.com,kgb@primetech.com.cn
   * @version 1.0
   */
  private class DbConnectionProvider {

    /**
     *
     */
    protected DbConnectionProvider() {
    }

    /**
     *
     * @return
     */
    protected Connection getConnection() throws DAOException {
      Connection conn = null;

      return conn;
    }

    /**
     *
     * @throws DAOException
     */
    protected void closeConnection() throws DAOException {

    }

  }

  public static void main(String[] args) {
    CdsJdbcDAO dao = new CdsJdbcDAO();
    String strXml = null;
    try {
      strXml = dao.findAllRsXml("select * from aa");
      com.hzjc.util.FileUtils.makeFile("c:/u.xml", strXml.getBytes("UTF-16"));
    }
    catch (Exception ex) {
    }
    _log.info(strXml);
  }

}
