/* Generated by Together */

package com.hzjc.wsstruts.dao.jdbc;

import java.io.*;
import java.sql.*;
import javax.sql.*;

import com.hzjc.hz2004.util.ObjectUtil;
import com.hzjc.util.StringUtils;
import java.util.*;
import java.lang.IllegalAccessException;
import java.lang.reflect.InvocationTargetException;
import java.lang.Class;
import org.apache.commons.logging.*;
import org.springframework.beans.BeanUtils;

import com.hzjc.wsstruts.common.db.*;
import com.hzjc.wsstruts.exception.*;
import com.hzjc.wsstruts.dao.AbstractDAO;

/**
 * * <p>Title: Sgid Query</p>
 * * <p>Description: </p>
 * * <p>Copyright: Copyright (c) 2003</p>
 * * <p>Company: </p>
 * * @author Kansanku(kgb_hz@126.com)
 * * @version 1.0
 * *
 */
abstract public class BaseJdbcDAO
    extends AbstractDAO {

  protected static Log _log = LogFactory.getLog(BaseJdbcDAO.class);

  public BaseJdbcDAO() {
    //加载码表,如果相应码表为空,则加载之
  }

  /**
   * 转化装载没一条记录,调用Struts Org.apache.comons.beantils.BeanUtils包,根据反射
   * 自动将RS记录集中的数据OR-Mapping到VO对象中,完成记录到数据值对象的互换
   * (说明:1、在refect转换中,byte[],java.text.Date类型的数据会出现问题-->需修改BeanUtils包中的源码;
   *       2、该函数的前提条件：ResultSet rs中的字段名称必须同VOBean中的属性名称一致
   *  )
   * protected method invoke by getIterator
   * in this method through Struts Org.apache.comons.beantils.BeanUtils invoke populate method implement infact
   * this method for resultset mapping  to VO property
   * @param Object
   * @param ResultSet
   * @exception SQLException
   */
  protected void populate(Object bean, ResultSet rs) throws DAOException {
    if (rs == null) {
      return;
    }
    try {
      ResultSetMetaData metaData = rs.getMetaData();
      int ncolumns = metaData.getColumnCount();

      HashMap properties = new HashMap();
      // Scroll to next record and pump into hashmap
      for (int i = 1; i <= ncolumns; i++) {
        //properties.put(sql2javaName(metaData.getColumnName(i).toLowerCase()), rs.getString(i));
        properties.put(metaData.getColumnName(i).toLowerCase(),
                       StringUtils.formatTrim(rs.getString(i)));
      }
      // Set the corresponding properties of our bean
      //BeanUtils.populate(bean,BeanUtils.describe(rs));
      //开始转换
      ObjectUtil.copyInfoByMap(bean, properties, null, null, true);
      //BeanUtils.populate(bean, properties);
    }
    catch (Exception ite) {
      throw new DAOException("BeanUtils.populate threw ", ite);
    }
  }

  /**
   * 构造返回分页的SQl语句
   * @param sql
   * @return
   */
  private String getLimitString(String sql) {
    StringBuffer pagingSelect = new StringBuffer(200);
    pagingSelect.append("select * from ( select row_.*, rownum rownum_ from ( ");
    pagingSelect.append(sql);
    pagingSelect.append(" ) row_ where rownum <= ?) where rownum_ > ?");
    return pagingSelect.toString();
  }

  /**
   *
   * @param aClass
   * @param filter
   * @return
   * @throws SQLException
   */
  public List findOnePageEntities(String strSQL, int offset, int pagesize) throws
      DAOException, ResultNotFoundException {
    ArrayList al = new ArrayList();
    Connection conn = null;
    PreparedStatement ps = null;
    ResultSet rs = null;
    String strLimitSql = "";
    conn = ConnectionManager.getConnection();
    try {
      //查询得到Filter符合查询条件的某页数据集
      strLimitSql = getLimitString(strSQL);
      _log.info(strLimitSql);
      ps = conn.prepareStatement(strLimitSql);
      ps.setInt(1, offset + pagesize);
      ps.setInt(2, offset);
      rs = ps.executeQuery();
      while (rs.next()) {
        try {
          Object vo = Class.forName(_entityType.getName()).newInstance();
          populate(vo, rs);
          al.add(vo);
        }
        catch (Exception ex) {
          ex.printStackTrace();
        }
      }
      close(rs);
      close(ps);
      return al;
    }
    catch (SQLException ex) {
      close(rs);
      close(ps);
      rollback(conn);
      throw new DAOException("", ex);
    }
    finally {
      close(conn);
    }
  }

  /**
   * Query and List All Records
   * @return
   * @throws <{SQLException}>
   */
  public List findAllEntities(String strQuerySql) throws DAOException,
      ResultNotFoundException {
    ArrayList al = new ArrayList();
    Connection conn = null;
    PreparedStatement ps = null;
    ResultSet rs = null;
    _log.warn(strQuerySql);
    conn = ConnectionManager.getConnection();
    try {
      ps = conn.prepareStatement(strQuerySql);
      rs = ps.executeQuery();
      while (rs.next()) {
        try {
          Object vo = Class.forName(_entityType.getName()).newInstance();
          populate(vo, rs);
          al.add(vo);
        }
        catch (Exception ex) {
          ex.printStackTrace();
        }
      }
      close(rs);
      close(ps);
    }
    catch (SQLException ex) {
      close(rs);
      close(ps);
      rollback(conn);
      throw new DAOException("", ex);
    }
    finally {
      close(conn);
    }
    return al;
  }

  /**
   * 根据查询Filter返回符合查询条件的记录数
   *
   * protected method return RecordCount through Request Query filter which invoke by subclass
   * @param <{ResultFilter}>
   * @return int
   * @exception <{SQLException}>
   */
  protected int getEntityCount(String strSQL) throws DAOException {
    Connection conn = null;
    PreparedStatement pstmt = null;
    ResultSet rs = null;
    try {
      conn = ConnectionManager.getConnection();
      pstmt = conn.prepareStatement(strSQL);
      rs = pstmt.executeQuery();
      int iCount = 0;
      if (rs != null) {
        rs.next();
        iCount = rs.getInt(1);
      }
      close(rs);
      close(pstmt);
      return iCount;
    }
    catch (SQLException sqle) {
      close(rs);
      close(pstmt);
      rollback(conn);
      throw new DAOException("", sqle);
    }
    finally {
      close(conn);
    }
  }

  /**
   * after get Records Close Connection for clear memory Resource
   * @param Connection
   */
  private void close(Connection conn) {
    if (conn != null) {
      try {
        conn.close();
      }
      catch (SQLException ex) {
        ex.printStackTrace();
      }
      conn = null;
    }
  }

  /**
   * after ExcuteQuery free the PreparedStatement  memory Resource
   * @param PreparedStatement
   */
  private void close(Statement ps) {
    if (ps != null) {
      try {
        ps.close();
      }
      catch (SQLException ex) {
        ex.printStackTrace();
      }
      ps = null;
    }
  }

  /**
   * after ExcuteQuery free ResultSet  memory resource
   * @param ResultSet
   */
  private void close(ResultSet rs) {
    if (rs != null) {
      try {
        rs.close();
      }
      catch (SQLException ex) {
        ex.printStackTrace();
      }
      rs = null;
    }
  }

  /**
   * if the Databse Excute throw exception rollback all Operations
   * @param Connection
   */
  private void rollback(Connection conn) {
    if (conn != null) {
      try {
        conn.rollback();
      }
      catch (SQLException e) {
        e.printStackTrace();
      }
      conn = null;
    }
  }

  /**
   *
   * @param name
   * @return
   */
  private static String java2sqlName(String name) {
    String column = "";
    for (int i = 0; i < name.length(); i++) {
      if (i < name.length() - 1 &&
          (name.charAt(i) >= 'a' && name.charAt(i) <= 'z') &&
          (name.charAt(i + 1) >= 'A' && name.charAt(i + 1) <= 'Z')) {
        column += name.charAt(i) + "_";
      }
      else {
        column += name.charAt(i);
      }
    }
    return column.toLowerCase();
  }

  /**
   *
   * @param name
   * @return
   */
  private static String sql2javaName(String name) {
    String column = "";
    for (int i = 0; i < name.length(); i++) {
      if (name.charAt(i) == '_') {
        column += ++i < name.length() ?
            String.valueOf(name.charAt(i)).toUpperCase() : "";
      }
      else {
        column += name.charAt(i);
      }
    }
    return column;
  }

  //////////////////////////////////////////////////////////////////////////////
  //
  //////////////////////////////////////////////////////////////////////////////
  public abstract Object updateEntity(Object entity) throws DAOException;

  public abstract void deleteEntity(Object entity) throws DAOException;

  public abstract Object insertEntity(Object entity) throws DAOException;

  public abstract Object findEntityById(Serializable serializable) throws
      DAOException, ResultNotFoundException
      ;

  protected abstract Object createEntity(boolean isInsert) throws DAOException;
  /////////////////////////////////////////////////////////////////////////////

}
