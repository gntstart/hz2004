/* Generated by Together */

package com.hzjc.wsstruts.common.db;

import org.apache.commons.logging.*;
import org.dom4j.*;
import org.dom4j.io.*;
import java.io.*;
import java.util.*;
import com.hzjc.wsstruts.exception.*;

/**
 *
 * <p>Title: </p>
 * <p>Description: </p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Company: </p>
 * @author not attributable
 * @version 1.0
 */
public class XmlDbConfig
    extends DbConfig {
	
  //日志处理
  protected static Log _log = LogFactory.getLog(XmlDbConfig.class);
  //
  private static String _dbCfgFile = "conf/hz2004.hibernate.cfg.xml";
  private static Map _mapCfg = null;
  private static DbConfig _config = null;
  /**
   * <hibernate-configuration>
        <!-- a SessionFactory instance listed as /jndi/name -->
        <session-factory>
                <property name="connection.driver_class">oracle.jdbc.driver.OracleDriver</property>
                <property name="connection.url">jdbc:oracle:thin:@192.168.1.244:1521:ZFBA</property>
                <property name="connection.username">HZ2004</property>
                <property name="connection.password">123456</property>
                <property name="hibernate.dialect">net.sf.hibernate.dialect.OracleDialect</property>
                <property name="connection.pool.size">1</property>
                <property name="statement_cache.size">25</property>
                <property name="jdbc.fetch_size">50</property>
                <property name="jdbc.batch_size">30</property>
        </session-factory>
    </hibernate-configuration>
   * 如果采用App Server的连接池，假设App Server连接池的DataSource的JNDI名称为"mypool"的话，配置应该如下：
    hibernate.dialect net.sf.hibernate.dialect.MySQLDialect
    hibernate.connection.datasource mypool
    hibernate.connection.provider_class net.sf.hibernate.connection.DatasourceConnectionProvider
   */
  private static final String JDBC_TAG_SESSION_FACTORY = "session-factory";
  private static final String JDBC_TAG_PROPERTY_ATTRNAME = "name";
  private static final String JDBC_TAG_PROPERTY_NAME = "property";

  /**
   *
   */
  protected XmlDbConfig() {
    initCfg();
  }

  /**
   *
   */
  private void initCfg() {
    initMap();
    initCfgFileName();
    initJdbcXmlCfg();
  }

  /**
   *
   */
  private void initJdbcXmlCfg() throws ControlException {
	//加载XML配置文件,经测试DOM4J不支持GBK编码，气愤；不行去下补丁
    try {
      InputStream is = WSErrCode.class.getClassLoader().getResourceAsStream(
          _dbCfgFile);
      SAXReader reader = new SAXReader();
      Document doc = reader.read(is);
      if (doc != null) {
        Element root = doc.getRootElement();
        //根元素不为空
        if (root != null) {
          Element eSessionFactory = root.element(JDBC_TAG_SESSION_FACTORY);
          if (eSessionFactory != null) {
        	//属性配置元素
            for (Iterator iter = eSessionFactory.elementIterator(
                JDBC_TAG_PROPERTY_NAME);
                 iter.hasNext(); ) {
              Element eProp = (Element) iter.next();
              if (eProp.attribute(JDBC_TAG_PROPERTY_ATTRNAME) != null) {
                String strPropName = eProp.attribute(
                    JDBC_TAG_PROPERTY_ATTRNAME).
                    getText();
                String strPropValue = eProp.getText();
                if (strPropName != null && !strPropName.equals("") &&
                    strPropValue != null &&
                    !strPropValue.equals("")) {
                  _mapCfg.put(strPropName, strPropValue);
                }
              }
            }
          }
        }
      }
    }
    catch (DocumentException ex) {
      throw new ControlException(WSErrCode.ERR_CTRL_LOAD_DBCONFIG, ex);
    }

  }

  /**
   *
   */
  private void initMap() {
    if (_mapCfg == null) {
      _mapCfg = new Hashtable();
    }
    _mapCfg.clear();
  }

  /**
   *
   */
  private void initCfgFileName() {
    //_dbCfgFile = "";
  }

  /**
   *
   * @param strKey
   * @return
   */
  public String getProperty(String strKey) {
    String strValue = "";
    //
    if (_mapCfg == null) {
      initCfg();
    }
    //
    if (strKey != null && !strKey.equals("") && _mapCfg.get(strKey) != null) {
      strValue = String.valueOf(_mapCfg.get(strKey));
    }
    return strValue;
  }

  /**
   *
   * @return
   */
  public static synchronized DbConfig getInstance() throws ControlException {
    //Lazy Create
    if (_config == null) {
      try {
        _config = new XmlDbConfig();
      }
      catch (Exception ex) {
        throw new ControlException(WSErrCode.ERR_CTRL_LOAD_DBCONFIG, ex);
      }
    }
    return _config;
  }

  public static void main(String[] args) {
    try {
      XmlDbConfig config = (XmlDbConfig) XmlDbConfig.getInstance();
      Map map = config._mapCfg;
      for (Iterator iter = map.entrySet().iterator(); iter.hasNext(); ) {
        Map.Entry entry = (Map.Entry) iter.next();
        System.out.println(String.valueOf(entry.getKey()) +
                           String.valueOf(entry.getValue()));
      }
    }
    catch (ControlException ex) {
      ex.printStackTrace();
    }
  }

}
