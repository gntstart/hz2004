/* Generated by Together */

package com.hzjc.wsstruts.type;

import org.dom4j.*;
import org.dom4j.io.*;
import java.io.*;
import org.apache.commons.logging.*;
import java.text.*;
import java.util.*;
import java.lang.reflect.*;
import com.hzjc.wsstruts.exception.*;
import com.hzjc.wsstruts.vo.*;
import com.hzjc.wsstruts.common.xml.*;
import com.hzjc.util.StringUtils;
import com.hzjc.wsstruts.common.config.WSConfig;

/**
 *
 * <p>Title: Hz2004</p>
 * <p>Description: 常住人口二代证Hz2004版</p>
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Company: HZJC</p>
 * @author Kansan Ku(kgb_hz@126.com)
 * @version 1.0
 * modify history:修改历史
 * 2004-11-22 返回组包时，返回的记录数目应受到限制
 *            writeToRsData(String name, Long recordcount, Object[] objarray)方法中判断
 *            最大的返回包记录数目
 */
public class TResponseImpl
    extends TBaseResponse {
  //通信包版本
  private static String CPACK_VER1 = "1.00";

  //日志处理
  protected static Log _log = LogFactory.getLog(TResponseImpl.class);
  private Document _doc;

  public TResponseImpl() {
    initPacket();
  }

  //=================私有内部方法=======================================
  private void initPacket() {
    //创建包头-包控制-包数据部分节点
    _doc = DocumentHelper.createDocument();
    Element eRoot = DocumentHelper.createElement(PacketTag.PACKET_TAG_PACKET);
    _doc.add(eRoot);
    //
    eRoot.add(DocumentHelper.createElement(PacketTag.PACKET_TAG_PACKHEAD));
    eRoot.add(DocumentHelper.createElement(PacketTag.PACKET_TAG_CONTROL));
    eRoot.add(DocumentHelper.createElement(PacketTag.PACKET_TAG_DATA));
    //初始化各节点的值
    setVer(CPACK_VER1); //设置版本号
    setDatetime(StringUtils.getServiceTime()); //设置日期时间
    //setDatetime(DateFormat.getDateTimeInstance(
    //DateFormat.FULL, DateFormat.FULL, Locale.CHINA).format(new Date()));
    setAction(PacketTag.PACKET_HTTP_RESPONSE);
  }

  private void initVarDataNode() {
    if (!PacketUtil.hasChildNode(getPackData(), PacketTag.PACKET_TAG_VARDATA)) {
      getPackData().add(DocumentHelper.createElement(PacketTag.
          PACKET_TAG_VARDATA));
    }
  }

  private void initRsDataNode() {
    if (!PacketUtil.hasChildNode(getPackData(), PacketTag.PACKET_TAG_RSDATA)) {
      getPackData().add(DocumentHelper.createElement(PacketTag.
          PACKET_TAG_RSDATA));
    }
  }

  private Element getRootNode() {
    return _doc == null ? null : _doc.getRootElement();
  }

  private Element getPackHead() {
    return getRootNode() == null ? null :
        getRootNode().element(PacketTag.PACKET_TAG_PACKHEAD);
  }

  private Element getPackControl() {
    return getRootNode() == null ? null :
        getRootNode().element(PacketTag.PACKET_TAG_CONTROL);
  }

  private Element getPackData() {
    return getRootNode() == null ? null :
        getRootNode().element(PacketTag.PACKET_TAG_DATA);
  }

  private Element getVardata() {
    return getPackData() == null ? null :
        getPackData().element(PacketTag.PACKET_TAG_VARDATA);
  }

  private Element getRsdata() {
    return getPackData() == null ? null :
        getPackData().element(PacketTag.PACKET_TAG_RSDATA);
  }

  //============================================================================

  //=================接口实现方法===============================================

  private Document createCdsDoc() {
    Document doc = null;
    //创建Document(For Delphi中的ClientDataSet中的标准)
    doc = DocumentHelper.createDocument();
    ////////////////////////////////////////////////////////////////////
    //创建<DATAPACKET>Element
    ////////////////////////////////////////////////////////////////////
    Element root = doc.addElement(CdsDataTag.DATA_TAG_DATAPACKET);
    root.addAttribute("version", "2.0");
    return doc;
  }

  /**
   *
   * @return
   */
  public String saveToXml() throws ActionException {
    try {
      //return this.toXML(_doc, XmlEncode.ENCODING_NAME_UTF_8);
      //modify by kgb 2004-06-02
      //return this.toXML(_doc, XmlEncode.ENCODING_NAME_UTF_16);
      //调用内部方法，生成输出需要的编码类型XML
      //return this.toXML(_doc, XmlEncode.ENCODEING_NAME_GBK);

      ///////////////////////////////////////////////////////////////////
      //edit by kgb 2004-07-02生成响应包时，设置的XML编码方式
      String strEncoding = WSConfig.getInsance().getEncodeXmlPacket();
      strEncoding = strEncoding == null ? XmlEncode.ENCODEING_NAME_GBK :
          strEncoding;
      return this.toXML(_doc, strEncoding);

    }
    catch (ActionException ex) {
      throw ex;
    }
  }

  /**
   *
   * @param name
   * @param value
   */
  public void writeToHeadNode(String name, String value) throws ActionException {
    try {
      if (name != null && value != null) {
        if (PacketUtil.hasChildNode(getPackHead(), name)) {
          getPackHead().element(name).setText(value);
        }
        else {
          Element eNode = DocumentHelper.createElement(name).addText(value);
          writeToHeadNode(eNode);
        }
      }
    }
    catch (ActionException ex) {
      throw ex;
    }
  }

  /**
   *
   * @param value
   */
  public void writeToHeadNode(Element value) throws ActionException {
    if (getPackHead() != null && value != null) {
      try {
        getPackHead().add(value);
      }
      catch (Exception ex) {
        throw new ActionException(WSErrCode.ERR_ACTION_PACKET_WRITEPACKHEADDATA,
                                  ex);
      }
    }
  }

  /**
   *
   * @param name
   * @param value
   */
  public void writeToControlNode(String name, String value) throws
      ActionException {
    try {
      if (name != null && value != null) {
        if (PacketUtil.hasChildNode(getPackControl(), name)) {
          getPackControl().element(name).setText(value);
        }
        else {
          Element eNode = DocumentHelper.createElement(name).addText(value);
          writeToControlNode(eNode);
        }
      }
    }
    catch (ActionException ex) {
      throw ex;
    }
  }

  /**
   *
   * @param value
   */
  public void writeToControlNode(Element value) throws ActionException {
    if (getPackControl() != null && value != null) {
      try {
        getPackControl().add(value);
      }
      catch (Exception ex) {
        throw new ActionException(WSErrCode.
                                  ERR_ACTION_PACKET_WRITEPACKCONTROLDATA, ex);
      }
    }
  }

  /**
   *
   * @param value
   */
  public void writeToDataNode(Element value) throws ActionException {
    if (getPackData() != null && value != null) {
      try {
        getPackData().add(value);
      }
      catch (Exception ex) {
        throw new ActionException(WSErrCode.ERR_ACTION_PACKET_WRITEPACKDATA, ex);
      }
    }
  }

  /**
   *
   * @param value
   */
  public void writeToVarData(Element value) throws ActionException {
    if (value != null) {
      try {
        //初始化<vardata>标识元素,如果空的话先创建
        initVarDataNode();
        getVardata().add(value);
      }
      catch (Exception ex) {
        throw new ActionException(WSErrCode.ERR_ACTION_PACKET_WRITEPACKVARDATA,
                                  ex);
      }
    }
  }

  /**
   *
   * @param name
   * @param value
   */
  public void writeToVarData(String name, String value) throws ActionException {
    if (name != null && value != null) {
      try {
        //初始化<vardata>标识元素,如果空的话先创建
        initVarDataNode();
        //创建CDATA数据,并添加到<vardata>元素中
        CDATA data = DocumentHelper.createCDATA(value);
        getVardata().addElement(name).add(data);
      }
      catch (Exception ex) {
        throw new ActionException(WSErrCode.ERR_ACTION_PACKET_READPACKVARDATA,
                                  ex);
      }
    }
  }

  /**
   *
   * @param name
   * @param value
   */
  public void writeToRsData(String name, String value) throws ActionException {
    try {
      //see#writeToRsData(String name, Long recordcount, String value)
      writeToRsData(name, null, value);
    }
    catch (ActionException ex) {
      throw ex;
    }
  }

  /**
   *
   * @param strName
   * @param lRecordCount
   * @param strValue
   * @throws ActionException
   */
  public void writeToRsData(String name, Long recordcount, String value) throws
      ActionException {
    if (name != null && value != null) {
      try {
        //初始化<rsdata>节点
        initRsDataNode();
        //添加rs标识元素,设置属性和值数据
        Element eRs = DocumentHelper.createElement(PacketTag.PACKET_TAG_RS);
        eRs.addAttribute(PacketTag.PACKET_TAG_RSNAME, name);
        //如果记录数不为空,则在rs标签中加recordcount属性。
        if (recordcount != null) {
          eRs.addAttribute(PacketTag.PACKET_TAG_RECORDCOUNT,
                           String.valueOf(recordcount));
        }
        else {
          //空包，0条记录
          eRs.addAttribute(PacketTag.PACKET_TAG_RECORDCOUNT, "0");
        }
        //进行编码，Base64数据进行还行处理
        //value = new String(Base64.encodeBase64Chunked(value.getBytes()));
        //修改 by kgb 2004-05-20，返回的二进制转换的Base64不分块，还行
        //因为在此返回给客户端时，客户端如果没处理（对\r\n处理，则回报错，故改之）
        //value = new String(Base64.encodeBase64(value.getBytes()));
        //eRs.setText(value);
        //getRsdata().add(eRs);

        ///////////////////////////////////////////////////////////////
        //add by kgb 2004 - 09 -03
        //GB13000,返回响应给前端不进行BASE64编码
        CDATA rsdata = DocumentHelper.createCDATA("");
        //rsdata.setText(StringUtils.replace(value, "&amp;", "&"));
        rsdata.setText(value);
        eRs.add(rsdata);
        getRsdata().add(eRs);

      }
      catch (Exception ex) {
        throw new ActionException(WSErrCode.ERR_ACTION_PACKET_READPACKRSDATA,
                                  ex);
      }
    }
  }

  /**
   *
   * @param name
   * @param objarray
   * @param typeClazz
   * @throws ActionException
   */
  public void writeToRsData(String name, Long recordcount, Object[] objarray,
                            Class typeClazz) throws
      ActionException {
    try {
      if (objarray != null && objarray.length > 0) {
        writeToRsData(name, recordcount, objarray);
      }
      else {
        //如果是空记录则写空包
        if (typeClazz == null) {
          throw new ActionException(WSErrCode.ERR_ACTION_PACKET_WRITEPACKRSDATA,
                                    "写记录集包类型Class为空。", null);
        }
        writeToRsData(name, typeClazz);
      }
    }
    catch (ActionException ex) {
      throw ex;
    }
  }

  /**
   *
   * @param name
   * @param recordcount
   * @param objarray
   * @throws ActionException
   */
  public void writeToRsData(String name, Long recordcount, Object[] objarray) throws
      ActionException {
    if (objarray != null && objarray.length > 0) {
      try {
        //创建Document(For Delphi中的ClientDataSet中的标准)
        Document doc = createCdsDoc();
        ////////////////////////////////////////////////////////////////////
        //创建<DATAPACKET>Element
        ////////////////////////////////////////////////////////////////////
        Element root = doc.getRootElement();
        ///////////////////////////////////////////////////////////////////
        //创建<METADATA>和<ROWDATA>元素
        ////////////////////////////////////////////////////////////////////
        Element eMetaData = root.addElement(CdsDataTag.DATA_TAG_METADATA);
        Element eRowData = root.addElement(CdsDataTag.DATA_TAG_ROWDATA);
        ////////////////////////////////////////////////////////////////////
        //添加<METADATA>元素
        ////////////////////////////////////////////////////////////////////
        eMetaData.add(toFieldsElement(objarray[0]));
        ////////////////////////////////////////////////////////////////////
        //循环添加<ROWDATA>元素
        ////////////////////////////////////////////////////////////////////

        //=================================================================
        //edit by kgb 2004-11-22
        //组包返回时，最大返回记录数进行限制
        String strPacketRecMaxSize = null;
        /*
        com.hzjc.hz2004.service.Hz2004ServiceHelper.getXtkzcsAsStr(com.hzjc.hz2004.constant.
                                               PublicConstant.
                                               XTKZCS_XTZBFHZDJLS);
        */
        int iPacketRecMaxSize = 1000;
        if (strPacketRecMaxSize != null) {
          try {
            iPacketRecMaxSize = Integer.parseInt(strPacketRecMaxSize);
          }
          catch (NumberFormatException ex1) {
            iPacketRecMaxSize = 1000;
          }
        }

        if (objarray.length >= iPacketRecMaxSize) {
          _log.warn("<警告>调用业务时组包响应返回的记录数=" + objarray.length + ">=" +
                    iPacketRecMaxSize);
        }

        iPacketRecMaxSize = objarray.length >= iPacketRecMaxSize ?
            iPacketRecMaxSize : objarray.length; //记录数大小进行判断

        for (int i = 0; i < iPacketRecMaxSize; i++) {
          eRowData.add(toRowElement(objarray[i]));
        }

        ////////////////////////////////////////////////////////////////////
        //添加到rs变量数组中去
        //在此进行编码处理,<rs/>标识中的XML数据.
        //writeToRsData(name, doc.asXML());
        ////////////////////////////////////////////////////////////////////
        //writeToRsData(name, recordcount,
        //              toXML(doc, XmlEncode.ENCODING_NAME_UTF_8));

        ///////////////////////////////////////////////////////////////////
        //edit by kgb 2004-07-02生成响应包时，设置的XML编码方式
        String strEncoding = WSConfig.getInsance().getEncodeClientDataSet();
        strEncoding = strEncoding == null ? XmlEncode.ENCODING_NAME_UTF_8 :
            strEncoding;
        writeToRsData(name, recordcount,
                      toXML(doc, strEncoding));
        //edit by kgb 2004-09-06
        //GB13000
      }
      catch (ActionException ex) {
        throw ex;
      }
    }
  }

  /**
   *
   * @param name
   * @param objarray
   */
  public void writeToRsData(String name, Object[] objarray) throws
      ActionException {
    try {
      writeToRsData(name, null, objarray);
    }
    catch (ActionException ex) {
      throw ex;
    }
  }

  /**
   *
   * @param strName
   * @param typeClazz
   * @throws ActionException
   */
  public void writeToRsData(String strName, Class typeClazz) throws
      ActionException {
    try {
      //创建Document(For Delphi中的ClientDataSet中的标准)
      Document doc = createCdsDoc();
      ////////////////////////////////////////////////////////////////////
      //创建<DATAPACKET>Element
      ////////////////////////////////////////////////////////////////////
      Element root = doc.getRootElement();
      ///////////////////////////////////////////////////////////////////
      //创建<METADATA>和<ROWDATA>元素
      ////////////////////////////////////////////////////////////////////
      Element eMetaData = root.addElement(CdsDataTag.DATA_TAG_METADATA);
      Element eRowData = root.addElement(CdsDataTag.DATA_TAG_ROWDATA);
      ////////////////////////////////////////////////////////////////////
      //添加<METADATA>元素，cds包头的元数据定义
      ////////////////////////////////////////////////////////////////////
      
      //Object aObj = ObjectCreator.createObject(typeClazz);
     // eMetaData.add(toFieldsElement(aObj));
      
      ////////////////////////////////////////////////////////////////////
      //循环添加<ROWDATA>元素,其实加入空的记录集
      ////////////////////////////////////////////////////////////////////

      ////////////////////////////////////////////////////////////////////
      //添加到rs变量数组中去
      //在此进行编码处理,<rs/>标识中的XML数据.
      //writeToRsData(name, doc.asXML());
      ////////////////////////////////////////////////////////////////////
      //eidt kgb 2004-04-29 空包记录数为0
      //writeToRsData(strName, new Long(0),
      //              toXML(doc, XmlEncode.ENCODING_NAME_UTF_8));

      ///////////////////////////////////////////////////////////////////
      //edit by kgb 2004-07-02生成响应包时，设置的XML编码方式
      String strEncoding = WSConfig.getInsance().getEncodeClientDataSet();
      strEncoding = strEncoding == null ? XmlEncode.ENCODING_NAME_UTF_8 :
          strEncoding;
      writeToRsData(strName, new Long(0),
                    toXML(doc, strEncoding));

    }
    catch (ActionException ex) {
      throw ex;
    }
    catch (Exception ex) {
      ex.printStackTrace();
      throw new ActionException(WSErrCode.ERR_ACTION_UNKNOW, "没有记录返回,创建响应空包异常。",
                                ex);
    }

  }

  /**
   * 转换每行数据为Xml中的Element
   * @return
   */
  public Element toRowElement(Object obj) {
    Element eRow = null;
    try {
      eRow = DocumentHelper.createElement(CdsDataTag.DATA_TAG_ROW);
      /////////////////////////////////////////////////////////////////
      //see(#org.apache.commons.beanutils.BeanUtils方法)
      ////////////////////////////////////////////////////////////////
      Map mapVOProperties = null;//BeanUtils.describe(obj);
      /////////////////////////////////////////////////////////////////
      //遍历所有属性及值,填充Element<ROW ......>Tag每行的属性
      ////////////////////////////////////////////////////////////////
      if (mapVOProperties != null && !mapVOProperties.isEmpty()) {
        for (Iterator iter = mapVOProperties.entrySet().iterator();
             iter.hasNext(); ) {
          Map.Entry entry = (Map.Entry) iter.next();
          ////////////////////////////////////////////////////////////
          //过滤空键和空值,以及Bean的class属性
          ///////////////////////////////////////////////////////////
          if (entry.getKey() != null && entry.getValue() != null &&
              !String.
              valueOf(entry.getKey()).toLowerCase().equals(CdsDataTag.
              DATA_TAG_CLASS.toLowerCase())) {
            eRow.addAttribute(String.valueOf(entry.getKey()),
                              String.valueOf(entry.getValue()));
            //////////////////////////////////////////////////////////////////
            //edit by kgb 2004-09-03
            //GB13000对于客户端的delphi接收时，WideString类型对于汉字XML中标识的方式
            //用转义标识，例“中国”－－》&#20013;&#22269;
            //eRow.addAttribute(String.valueOf(entry.getKey()),
            //                  toGB13000(String.valueOf(entry.getValue())));
          }
        }
      }
    }
    catch (Exception ex) {
    }
    return eRow;
  }

  /**
   * 转换VO的每个属性为XML的字段定义的Schema中的一个TAG<FIELD..../>
   *
   * @param strFieldName
   * @return
   */
  private Element toFieldElement(String strFieldName) {
    Element eField = DocumentHelper.createElement(CdsDataTag.DATA_TAG_FIELD);
    ///////////////////////////////////////////////////////////////////////
    //得到数据字典的字段定义类型,see(com.hzjc.wsstruts.vo.CdsFieldDef类中取得数据字典的定义)
    ///////////////////////////////////////////////////////////////////////
    CdsFieldDef aDef = new CdsFieldDef(strFieldName);
    eField.addAttribute(CdsDataTag.DATA_TAG_ATTRNAME, aDef.getAttrname());
    ////////////////////////////////////////////////////////////////////////
    //对blob-->Clob等字段进行特殊处理
    ///////////////////////////////////////////////////////////////////////
    if (aDef.getFieldtype().equalsIgnoreCase(CdsDataTag.
                                             DATA_TAG_FIELDTYPE_binhex)) {
      _log.info("二进制类型=" + aDef.getFieldtype());
      eField.addAttribute(CdsDataTag.DATA_TAG_FIELDTYPE, aDef.getFieldtype());
      eField.addAttribute(CdsDataTag.DATA_TAG_SUBTYPE,
                          CdsDataTag.DATA_TAG_BINARY);
    }
    else {
      eField.addAttribute(CdsDataTag.DATA_TAG_FIELDTYPE, aDef.getFieldtype());
      //////////////////////////////////////////////////////////////////
      //edit by kgb 2004-09-07
      //字段类型转换成WideString时，长度进行转换
      eField.addAttribute(CdsDataTag.DATA_TAG_WIDTH,
                          String.valueOf(Integer.parseInt(aDef.getWidth()) * 2));
    }
    //
    return eField;
  }

  /**
   * 转换VO中的所有属性为XML的字段定义的Schema中的一个TAG<FIELDS....../>
   * @return
   */
  private Element toFieldsElement(Object obj) {
    Element eFields = null;
    try {
      eFields = DocumentHelper.createElement(CdsDataTag.DATA_TAG_FIELDS);
      /////////////////////////////////////////////////////////////////////
      //see(#org.apache.commons.beanutils.BeanUtils方法)
      /////////////////////////////////////////////////////////////////////
      Map mapVOProperties = null;//BeanUtils.describe(obj);
      ////////////////////////////////////////////////////////////////////
      //遍历所有属性及值,填充Element<ROW ......>Tag每行的属性
      ///////////////////////////////////////////////////////////////////
      for (Iterator iter = mapVOProperties.entrySet().iterator(); iter.hasNext(); ) {
        Map.Entry entry = (Map.Entry) iter.next();
        /////////////////////////////////////////////////////////////////
        //过滤空主键和Bean的class属性,以及Delphi中ClientDataSet中特有的RowState属性
        ///////////////////////////////////////////////////////////////////
        if (entry.getKey() != null &&
            !String.valueOf(entry.getKey()).
            toLowerCase().equals(CdsDataTag.DATA_TAG_CLASS.toLowerCase()) &&
            !String.valueOf(entry.getKey()).
            toLowerCase().equals(CdsDataTag.DATA_TAG_ROWSTATE.toLowerCase())) {
          //////////////////////////////////////////////////////////////////
          //调用每个字段转换的Element TAG<FIELD/>
          //see #toFieldElement(String strFieldName)
          //////////////////////////////////////////////////////////////////
          Element eField = toFieldElement(String.valueOf(entry.getKey()));
          if (eField != null) {
            eFields.add(eField);
          }
        }
      }
    }
    catch (Exception ex) {
    }
    return eFields;
  }

  //=======================================================================

  //===================公有属性访问存取=======================================
  public void setVer(String ver) {
    writeToHeadNode(PacketTag.PACKET_TAG_VER, ver);
  }

  public void setDatetime(String datetime) {
    writeToHeadNode(PacketTag.PACKET_TAG_DATETIME, datetime);
  }

  public void setAction(String action) {
    writeToControlNode(PacketTag.PACKET_TAG_ACTION, action);
  }

  public void setCode(String code) {
    writeToControlNode(PacketTag.PACKET_TAG_CODE, code);
  }

  public void setAuthinfo(String authinfo) {
    writeToControlNode(PacketTag.PACKET_TAG_AUTHINFO, authinfo);
  }

  public void setVardata(Element vardata) {
    writeToDataNode(vardata);
  }

  public void setRsdata(Element rsdata) {
    writeToDataNode(rsdata);
  }
}