/* Generated by Together */

package com.hzjc.wsstruts.type;

import com.hzjc.hz2004.appbase.SysParam;
import com.hzjc.hz2004.vo.VoXT_SJZDB;
import java.util.*;
import org.apache.commons.logging.*;

/**
 *
 * <p>Title: </p>
 * <p>Description: 常住人口二代证Hz2004版</p>
 * <p>Copyright: Copyright (c) 2003</p>
 * <p>Company: </p>
 * @Kansanku(kgb_hz@126.com)
 * @version 1.0
 */
public class CdsFieldDef {

  private static Log _log = LogFactory.getLog(CdsFieldDef.class);

  private static final String TYPE_WIDESTRING = "string.uni";
  private static final String TYPE_STRING = "string.uni";

  ////////////////////////////////////////////////////////////////
  //定义系统默认的字段定义类型：字段类型->String 字段长度：100
  ///////////////////////////////////////////////////////////////
  private String attrname = "";
  private String fieldtype = TYPE_STRING;
  private String width = "100";

  //////////////////////////////////////////////////////////////////
  //定义Oracle和SqlServer字段类型的Map列表
  //////////////////////////////////////////////////////////////////
  private static Map _mapOracle = null;
  private static Map _mapSqlServer = null;

  static {
    _mapOracle = new HashMap();
    _mapSqlServer = new HashMap();
    //初始化数据库定义和xmldata中对应的字段类型
    //=====oracle========================

    _mapOracle.put("NUMBER", TYPE_STRING);
    _mapOracle.put("VARCHAR2", TYPE_STRING);
    _mapOracle.put("VARCHAR", TYPE_STRING);
    _mapOracle.put("CHAR", TYPE_STRING);
    _mapOracle.put("NVARCHAR2", TYPE_STRING);
    _mapOracle.put("INTEGER", TYPE_STRING);
    _mapOracle.put("BLOB", "bin.hex");
    _mapOracle.put("CLOB", "bin.hex");
    _mapOracle.put("LONG RAW", "bin.hex");
    _mapOracle.put("DATE", TYPE_STRING);
    _mapOracle.put("DATETIME", TYPE_STRING);
    _mapOracle.put("FLOAT", TYPE_STRING);
    /*
         _mapOracle.put("NUMBER", "r8");
         _mapOracle.put("VARCHAR2", "string");
         _mapOracle.put("VARCHAR", "string");
         _mapOracle.put("INTEGER", "fixed");
         _mapOracle.put("BLOB", "bin.hex");
         _mapOracle.put("CLOB", "bin.hex");
         _mapOracle.put("LONG RAW", "bin.hex");
         _mapOracle.put("DATE", "dateTime");
         _mapOracle.put("DATETIME", "dateTime");
         _mapOracle.put("FLOAT", "r8");
     */
    //======Sql Server===================
    _mapSqlServer.put("CHAR", "string"); //FiexedChar
    _mapSqlServer.put("VARCHAR", "string");
    _mapSqlServer.put("INT", "i8");
    _mapSqlServer.put("DATETIME", "dateTime");
    _mapSqlServer.put("DATE", "dateTime");
    _mapSqlServer.put("BINARY", "bin.hex");
    _mapSqlServer.put("FLOAT", "r16");
    _mapSqlServer.put("NTEXT", "bin.hex");

  }

  /**
   * 转化得到字段类型
   * （数据字典中的数据库类型--》转换为客户端Delphi中的ClientDataSet中字段定义的类型）
   * @param strFieldType：传入的数据字典中定义的字段类型
   * @return：返回对应的Cds中数据定义的类型
   */
  protected String convertFieldType(String strFieldType) {
    String strType = TYPE_STRING;
    Object objType = _mapOracle.get(strFieldType.trim().toUpperCase());
    if (objType != null) {
      strType = String.valueOf(objType);
    }
    return strType;
  }

  /**
   * 得到字段定义类型的构造函数
   * @param fieldname
   */
  public CdsFieldDef(String fieldname) {
    //设置字段属性值
    setAttrname(fieldname);
    //得到数据字典中该字段的定义VO
    VoXT_SJZDB vo = SysParam.getXt_sjzdb(fieldname);
    //设置其他属性
    if (vo != null) {
      this.setFieldtype(convertFieldType(vo.getZdlx()));
      this.setWidth(vo.getZdcd().trim());
    }
    else {
      //
      _log.info(fieldname + "字段对应的数据字典定义为Null.");
    }
  }

//=============================================================================
  public String getAttrname() {
    return attrname;
  }

  public void setAttrname(String attrname) {
    this.attrname = attrname;
  }

  public String getFieldtype() {
    return fieldtype;
  }

  public void setFieldtype(String fieldtype) {
    this.fieldtype = fieldtype;
  }

  public String getWidth() {
    return width;
  }

  public void setWidth(String width) {
    this.width = width;
  }
//=============================================================================

}
