/* Generated by Together */
package com.hzjc.wsstruts.type;

import java.util.*;
import org.dom4j.*;
import org.apache.commons.logging.*;
import org.dom4j.io.*;
import java.io.*;

/**
 * ��ͨ�÷���������
 * <p>Title: Hz2004</p>
 * <p>Description: 常住人口二代证Hz2004版</p>
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Company: HZJC</p>
 * @author Kansan Ku(kgb_hz@126.com)
 * @version 1.0
 */
public class PacketUtil {
  //��־����
  private static Log _log = LogFactory.getLog(PacketUtil.class);

  /**
   *
   * @param eNode
   * @param name
   * @return
   */
  public static boolean hasChildNode(Element eNode, String name) {
    boolean bRet = false;
    if (eNode != null && name != null) {
      if (eNode.element(name) != null) {
        bRet = true;
      }
    }
    return bRet;
  }

  /**
     public void treeWalk(Element element) {
    for (int i = 0, size = element.nodeCount(); i < size; i++) {
      Node node = element.node(i);
      if (node instanceof Element) {
        treeWalk( (Element) node);
      }
      else { // do something....
      }
    }
     }
     //DOM4J��XPath�����õ�֧�֣������һ���ڵ㣬��ֱ����XPathѡ��
     public void bar(Document document) {
    List list = document.selectNodes("//foo/bar");
    Node node = document.selectSingleNode("//foo/bar/author");
    String name = node.valueOf("@name");
     }
     //���磬����������XHTML�ĵ������еĳ����ӣ�����Ĵ������ʵ�֣�
     public void findLinks(Document document) throws DocumentException {
    List list = document.selectNodes("//a/@href");
    for (Iterator iter = list.iterator(); iter.hasNext(); ) {
      Attribute attribute = (Attribute) iter.next();
      String url = attribute.getValue();
    }
     }
   */

  /*
    //6 ��XSLTת��XML
    public Document styleDocument(
        Document document,
        String stylesheet
        ) throws Exception {
// load the transformer using JAXP
      TransformerFactory factory = TransformerFactory.newInstance();
      Transformer transformer = factory.newTransformer(
          new StreamSource(stylesheet)
          );
// now lets style the given document
      DocumentSource source = new DocumentSource(document);
      DocumentResult result = new DocumentResult();
      transformer.transform(source, result);
// return the transformed document
      Document transformedDoc = result.getDocument();
      return transformedDoc;
    }
   */

  /**
   *
   * @return
   */
  public static TPacket getPacket() {
    return new TPacketImpl();
  }

  /**
   *
   * @return
   */
  public static TRequest getRequest() {
    return new TRequestImpl();
  }

  /**
   *
   * @return
   */
  public static TResponse getResponse() {
    return new TResponseImpl();
  }

}
