/* Generated by Together */

package com.hzjc.wsstruts.type;

import org.apache.commons.logging.*;
import org.dom4j.*;
import java.util.*;

/**
 *
 * <p>Title: Hz2004</p>
 * <p>Description: 常住人口二代证Hz2004版</p>
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Company: HZJC</p>
 * @author Kansan Ku(kgb_hz@126.com)
 * @version 1.0
 */
public class PackXQLImpl
    extends BasePackXQL {
  //������־
  //
  protected static Log _log = LogFactory.getLog(PackXQLImpl.class);

  private static Map _mapLogicExpression = null;
  static {
    _mapLogicExpression = new HashMap();
    _mapLogicExpression.put(PacketTag.XQL_LOGICEXPRESSION_EQ, "= :S");
    _mapLogicExpression.put(PacketTag.XQL_LOGICEXPRESSION_NOTEQ, "<> :S");
    _mapLogicExpression.put(PacketTag.XQL_LOGICEXPRESSION_LT, "< :S");
    _mapLogicExpression.put(PacketTag.XQL_LOGICEXPRESSION_LE, "<= :S");
    _mapLogicExpression.put(PacketTag.XQL_LOGICEXPRESSION_ISNOTNULL,
                            "is not null :S");
    _mapLogicExpression.put(PacketTag.XQL_LOGICEXPRESSION_ISNULL, "is null :S");
    _mapLogicExpression.put(PacketTag.XQL_LOGICEXPRESSION_IN, "in :S");
    _mapLogicExpression.put(PacketTag.XQL_LOGICEXPRESSION_BETWEEN,
                            "between :S and :S");
    _mapLogicExpression.put(PacketTag.XQL_LOGICEXPRESSION_GE, ">= :S");
    _mapLogicExpression.put(PacketTag.XQL_LOGICEXPRESSION_GT, "> :S");
    _mapLogicExpression.put(PacketTag.XQL_LOGICEXPRESSION_LIKE, "like '%:S%'");
    _mapLogicExpression.put(PacketTag.XQL_LOGICEXPRESSION_LLIKE, "like ':S%'");
    _mapLogicExpression.put(PacketTag.XQL_LOGICEXPRESSION_RLIKE, "like '%:S'");
    //_mapLogicExpression.put(XQL_LOGICEXPRESSION_ILIKE, "ilike '%:S%'");
  }

  /**
   *
   * @param aXqlCriterionNode
   */
  public PackXQLImpl(Element eXqlCriterionNode) {
    parseElementToHQL(eXqlCriterionNode);
  }

  //===================================================================
  private void parseElementToHQL(Element eXQL) {
    if (eXQL != null) {
      //======================���������ҳ��Ϣ========================
      Element ePage = eXQL.element(PacketTag.XQL_TAG_XQL_PAGE);
      if (ePage != null) {
        parseXqlPage(ePage);
      }

      //===============������������HQL���============================
      /////////////////////////////////////////////////////////////////
      //1�����ֱ�Ӵ���HQL���(Where����)������Sql���
      ////////////////////////////////////////////////////////////////
      Element eXqlSql = eXQL.element(PacketTag.XQL_TAG_SQL);
      String strHQLSql = "";
      if (eXqlSql != null) {
        strHQLSql = String.valueOf(eXqlSql.getData()).trim();
      }
      //�ж��Ƿ����������
      int iIndexOrder = strHQLSql.toLowerCase().lastIndexOf(HQL_TAG_ORDER);
      String strSqlHql = "";
      String strSqlOrder = "";
      if (isOrderBy(strHQLSql)) { //������������
        strSqlHql = strHQLSql.substring(0, iIndexOrder);
        //�����������
        strSqlOrder = strHQLSql.substring(iIndexOrder, strHQLSql.length());
        addInOrderBy(strSqlOrder);
      }
      else {
        strSqlHql = strHQLSql;
      }
      setHQLSql(strSqlHql); //���ô����Sql����

      //////////////////////////////////////////////////////////////////
      //2����������xml������HQL���
      //////////////////////////////////////////////////////////////////
      ///////////////////��1�������������where/////////////////////////////////
      Element eXqlClause = eXQL.element(PacketTag.XQL_TAG_XQL_CLAUSE);
      if (eXqlClause != null) {
        String strHQLWhereOnly = parseXqlClause(eXqlClause);
        setHQLWhereOnly(strHQLWhereOnly); //���ô����HQLWhereOnly����
      }

      ////////////////////��2����������������Ϣorder by/////////////////////////////
      Element eXqlOrder = eXQL.element(PacketTag.XQL_TAG_XQL_ORDER);
      if (eXqlOrder != null) {
        String strXqlOrder = parseXqlOrder(eXqlOrder);
        if (!strXqlOrder.trim().equals("")) {
          addInOrderBy(strXqlOrder); //��������xqlclause�����򲿷�����
        }
      }

      ///////////////////��3������з�����Ϣ,�������������Ϣ��ʶgroup by//////////////

      //============================================================
      //setHQLWhere(strBufHQL.toString());
    }
  }

  /**
   *
   * @param eXqlPage
   */
  /*
   <xql-page>
     <pageoffset>100</pageoffset>
     <pagesize>50</pagesize>
   </xql-page>
   */
  private void parseXqlPage(Element eXqlPage) {
    if (eXqlPage != null) {
      Element ePagoffset = eXqlPage.element(PacketTag.XQL_TAG_PAGEOFFSET);
      Element ePagesize = eXqlPage.element(PacketTag.XQL_TAG_PAGESIZE);
      Element eRecordCount = eXqlPage.element(PacketTag.XQL_TAG_RECORDCOUNT);
      ////////////////////////////��ʼ��¼����Ϣ/////////////////////////////
      //�����͵�����Ҫ�������⴦��,����У��
      if (ePagoffset != null && !ePagoffset.getTextTrim().equals("")) {
        try {
          int iPageoffset = Integer.valueOf(ePagoffset.getTextTrim()).intValue();
          setPageoffset(iPageoffset);
        }
        catch (NumberFormatException ex) {
          //
        }
      }
      //////////////////////////ÿҳ��¼����Ϣ//////////////////////////////
      //���������ݽ������⴦��,����У��
      if (ePagesize != null && !ePagesize.getTextTrim().equals("")) {
        try {
          int iPagesize = Integer.valueOf(ePagesize.getTextTrim()).intValue();
          setPagesize(iPagesize);
        }
        catch (NumberFormatException ex1) {
          //
        }
      }
      //////////////////////////�Ƿ�Ҫ��ѯ�ܼ�¼��//////////////////////////////
      //���������ݽ������⴦��,����У��
      if (eRecordCount != null && !eRecordCount.getTextTrim().equals("")) {
        try {
          int iRecordCount = Integer.valueOf(eRecordCount.getTextTrim()).
              intValue();
          setRecordcount(iRecordCount);
        }
        catch (NumberFormatException ex1) {
          //
        }
      }

    }
  }

  /**
   *
   * @param eXqlClause
   * @return
   */
  /**
   * ʾ��:<logicbehavior value="OR"/>
   * @param eBehavior
   * @return
   */
  private String parseLogicBehaviorTag(Element eBehavior) {
    if (eBehavior == null) {
      return PacketTag.XQL_LOGICBEHAVIOR_NULL;
    }
    //�������Ϊ���򷵻�XQL_LOGICBEHAVIOR_NULL,���򷵻ض��������
    Attribute attrlogicBehavior = eBehavior.attribute(PacketTag.XQL_TAG_VALUE);
    String strLogicValue = attrlogicBehavior == null ?
        PacketTag.XQL_LOGICBEHAVIOR_NULL :
        attrlogicBehavior.getValue();
    return strLogicValue;
  }

  /**
   * ʾ��:<xql-expression poid="PoHJXX_CZRKJBXXB" attribute="mz"/>
   * @param eExpression
   * @return
   */
  private String parseXqlExpressionTag(Element eExpression) {
    StringBuffer strBuf = new StringBuffer(20);
    //ȡ��<xql-expression poid="PoHJXX_CZRKJBXXB" attribute="rynbid"/>
    //���е�poid��attribute����,�Լ����е�����ֵ
    Attribute attrPoid = eExpression.attribute(PacketTag.XQL_TAG_POID);
    Attribute attrPoattr = eExpression.attribute(PacketTag.XQL_TAG_ATTRIBUTE);
    String strPoid = attrPoid == null ? "" : attrPoid.getValue().trim();
    String strPoattr = attrPoattr == null ? "" :
        attrPoattr.getValue().trim();
    //�ж����е����Լ���ֵ,����������
    if (!strPoattr.equals("")) {
      if (!strPoid.equals("")) {
        strBuf.append(strPoid).append(".").append(strPoattr);
      }
      else {
        strBuf.append(strPoattr);
      }
    }
    return strBuf.toString().trim();
  }

  /**
   *
   * @param eXqlExpression
   * @return
   */
  /*
     <xql-clause>
    <logicbehavior value="OR"/>
    <xql-expression poid="PoHJXX_CZRKJBXXB" attribute="mz">
        <logicexpression value="EQ"/>
        <item>
          <value>��01��</value>
        </item>
    </xql-expression>
   <xql-expression poid="PoHJXX_CZRKJBXXB" attribute="hh">
     <logicexpression value="EQ"/>
         <item>
           <ref poid="PoHJXX_HXXB" attribute="hh"/>
         </item>
   </xql-expression>
    <xql-expression/>*
    <xql-clause/>*
    </xql-clause>
   */
  private String parseItemTag(Element eItem) {
    if (eItem == null) {
      return "";
    }
    //�ж��Ƿ���ֵԪ�ػ�������Ԫ��?
    Element eValue = eItem.element(PacketTag.XQL_TAG_VALUE);
    Element eRef = eItem.element(PacketTag.XQL_TAG_REF);
    //���ݲ�ͬ��Ԫ�����ͽ��д���
    StringBuffer strBufRet = new StringBuffer(10);
    if (eValue != null && eRef == null) {
      return eValue.getTextTrim();
    }
    else if (eValue == null && eRef != null) {
      Attribute refPoid = eRef.attribute(PacketTag.XQL_TAG_POID);
      Attribute refAttr = eRef.attribute(PacketTag.XQL_TAG_ATTRIBUTE);
      String strPoid = refPoid == null ? "" : refPoid.getValue();
      String strAttr = refAttr == null ? "" : refAttr.getValue();
      if (strAttr.equals("")) {
        return "";
      }
      if (strPoid.equals("")) {
        return strAttr;
      }
      else {
        strBufRet.append(strPoid).append(".").append(strAttr);
      }
    }
    else {
      return "";
    }
    return strBufRet.toString().trim();
  }

  /**
   *
   * @param eXqlExpression
   * @return
   */
  private String parseXqlClauseExpression(Element eXqlExpression) {
    //����ڵ�Ϊ���򷵻�Ϊ���򷵻�
    if (eXqlExpression == null) {
      return "";
    }
    //���ص�xql-expressionΪ���򷵻�
    String strXqlExpression = parseXqlExpressionTag(eXqlExpression);
    if (strXqlExpression.trim().equals("")) {
      return "";
    }
    //�ж��߼����ʽlogicexpression���������value=
    Element eLogicExpression = eXqlExpression.element(PacketTag.
        XQL_TAG_LOGICEXPRESSION);
    Attribute attrExpValue = eLogicExpression.attribute(PacketTag.XQL_TAG_VALUE);
    //�������Ϊ�ջ���logicexpression��Map��﷽ʽ�е�ֵΪ��
    //��������valueת��ΪEQ(У��,�ԷǷ������ݽ��д���)
    String strAttrValue = attrExpValue == null ? "" :
        attrExpValue.getValue().trim();
    if (strAttrValue.equals("") ||
        _mapLogicExpression.get(strAttrValue.toUpperCase()) == null) {
      strAttrValue = PacketTag.XQL_LOGICEXPRESSION_EQ;
    }
    //���½��н�������
    StringBuffer strBufRet = new StringBuffer(80);
    //���item�ĵ�����Ϊ���򷵻�
    Iterator iterItem = eXqlExpression.elementIterator(PacketTag.XQL_TAG_ITEM);
    ///////////////////////////////////////////////////////////////////////////////
    // EQ: = LT: <   LE: <=   ISNOTNULL: is not null   ISNULL: is null   IN: in
    //BETWEEN: between GE: >=   GT: >   LIKE: like '%%'   LLIKE: like '%aa'   RLIKE: like 'aa%'
    //ILIKE : like ''
    //1��EQ=
    if (strAttrValue.equalsIgnoreCase(PacketTag.XQL_LOGICEXPRESSION_EQ)) {
      //
      if (iterItem == null || !iterItem.hasNext()) {
        return "";
      }
      else {
        //
        String strItem = parseItemTag( (Element) iterItem.next());
        if (strItem.equals("")) {
          return "";
        }
        else {
          strBufRet.append("(").append(strXqlExpression).append("=").append(
              strItem).append(")");
          return strBufRet.toString();
        }
      }
    }
    //1��NOTEQ <>
    if (strAttrValue.equalsIgnoreCase(PacketTag.XQL_LOGICEXPRESSION_NOTEQ)) {
      //
      if (iterItem == null || !iterItem.hasNext()) {
        return "";
      }
      else {
        //
        String strItem = parseItemTag( (Element) iterItem.next());
        if (strItem.equals("")) {
          return "";
        }
        else {
          strBufRet.append("(").append(strXqlExpression).append("<>").append(
              strItem).append(")");
          return strBufRet.toString();
        }
      }
    }

    //2��LT<
    if (strAttrValue.equalsIgnoreCase(PacketTag.XQL_LOGICEXPRESSION_LT)) {
      if (iterItem == null || !iterItem.hasNext()) {
        return "";
      }
      else {
        String strItem = parseItemTag( (Element) iterItem.next());
        if (strItem.equals("")) {
          return "";
        }
        else {
          strBufRet.append("(").append(strXqlExpression).append("<").append(
              strItem).append(")");
          return strBufRet.toString();
        }
      }
    }
    //3��LE: <=
    if (strAttrValue.equalsIgnoreCase(PacketTag.XQL_LOGICEXPRESSION_LE)) {
      if (iterItem == null || !iterItem.hasNext()) {
        return "";
      }
      else {
        String strItem = parseItemTag( (Element) iterItem.next());
        if (strItem.equals("")) {
          return "";
        }
        else {
          strBufRet.append("(").append(strXqlExpression).append("<=").append(
              strItem).append(")");
          return strBufRet.toString();
        }
      }
    }
    //4��ISNOTNULL: is not null
    if (strAttrValue.equalsIgnoreCase(PacketTag.XQL_LOGICEXPRESSION_ISNOTNULL)) {
      //String strItem = parseItemTag( (Element) iterItem.next());
      //strBufRet.append("(").append(strXqlExpression).append(" is not null ").
      //append(strItem).append(")");
      //kgb edit 2004-05-04
      strBufRet.append("(").append(strXqlExpression).append(" is not null ").
          append(")");
      return strBufRet.toString();
    }
    //5��ISNULL: is null
    if (strAttrValue.equalsIgnoreCase(PacketTag.XQL_LOGICEXPRESSION_ISNULL)) {
      //String strItem = parseItemTag( (Element) iterItem.next());
      //strBufRet.append("(").append(strXqlExpression).append(" is null ").append(
      //strItem).append(")");
      //kgb edit 2004-05-04
      strBufRet.append("(").append(strXqlExpression).append(" is null ").append(
          ")");
      return strBufRet.toString();
    }
    //6��IN: in
    if (strAttrValue.equalsIgnoreCase(PacketTag.XQL_LOGICEXPRESSION_IN)) {
      if (iterItem == null || !iterItem.hasNext()) {
        return "";
      }
      else {
        StringBuffer strBufItem = new StringBuffer(30);
        int i = 0;
        for (; iterItem.hasNext(); ) {
          String strIter = parseItemTag( (Element) iterItem.next());
          if (!strIter.equals("")) {
            if (i != 0) {
              strBufItem.append(",").append(strIter);
            }
            else {
              strBufItem.append(strIter);
            }
          }
        }
        strBufRet.append("(").append(strXqlExpression).append(" in (").append(
            strBufItem.toString()).append(")").append(")");
        return strBufRet.toString();
      }
    }
    //7��BETWEEN: between %S and %S
    if (strAttrValue.equalsIgnoreCase(PacketTag.XQL_LOGICEXPRESSION_LT)) {
      if (iterItem == null || !iterItem.hasNext()) {
        return "";
      }
      else {
        StringBuffer strBufIter = new StringBuffer();
        int i = 0;
        while (iterItem.hasNext()) {
          String strItem = parseItemTag( (Element) iterItem.next());
          if (strItem.equals("")) {
            continue;
          }
          else {
            if (i == 0) {
              strBufIter.append(" between ").append(strItem);
            }
            else if (i == 1) {
              strBufIter.append(" and ").append(strItem);
            }
            i++;
          }
        }
        if (i >= 1) {
          strBufRet.append("(").append(strXqlExpression).append(strBufIter.
              toString()).append(")");
          return strBufRet.toString();
        }
        else {
          return "";
        }
      }
    }
    //8��GE: >=
    if (strAttrValue.equalsIgnoreCase(PacketTag.XQL_LOGICEXPRESSION_GE)) {
      if (iterItem == null || !iterItem.hasNext()) {
        return "";
      }
      else {
        String strItem = parseItemTag( (Element) iterItem.next());
        if (strItem.equals("")) {
          return "";
        }
        else {
          strBufRet.append("(").append(strXqlExpression).append(">=").append(
              strItem).append(")");
          return strBufRet.toString();
        }
      }
    }
    //9�� GT: >
    if (strAttrValue.equalsIgnoreCase(PacketTag.XQL_LOGICEXPRESSION_GT)) {
      if (iterItem == null || !iterItem.hasNext()) {
        return "";
      }
      else {
        String strItem = parseItemTag( (Element) iterItem.next());
        if (strItem.equals("")) {
          return "";
        }
        else {
          strBufRet.append("(").append(strXqlExpression).append(">").append(
              strItem).append(")");
          return strBufRet.toString();
        }
      }
    }
    //10��LIKE: like '%%'
    if (strAttrValue.equalsIgnoreCase(PacketTag.XQL_LOGICEXPRESSION_LIKE)) {
      if (iterItem == null || !iterItem.hasNext()) {
        return "";
      }
      else {
        String strItem = parseItemTag( (Element) iterItem.next());
        if (strItem.equals("")) {
          return "";
        }
        else {
          //������ʼ�ͽ�β
          if (strItem.startsWith("'")) {
            strItem = strItem.substring(1);
          }
          if (strItem.endsWith("'")) {
            strItem = strItem.substring(0, strItem.length() - 1);
          }
          //modify by kgb 204-05-29
          //�����%��_����֯SQL��䲻�ü�%��_������Ҫ��%(ȫ�ǡ���ǣ�����%��_���ߣ��Ĵ���)
          if (strItem.indexOf("%") > -1 || strItem.indexOf("_") > -1) {
            strBufRet.append("(").append(strXqlExpression).append(" like '").
                append(strItem).append("')");
          }
          else {
            strBufRet.append("(").append(strXqlExpression).append(" like '%").
                append(strItem).append("%')");
          }
          return strBufRet.toString();
        }
      }
    }
    return strBufRet.toString();
  }

  /**
   *
   * @param eXqlClause
   * @return
   */
  private String parseXqlClause(Element eXqlClause) {
    if (eXqlClause == null) {
      return "";
    }

    StringBuffer strBufClause = new StringBuffer();
    //////////////////////////////////////////////////////////////
    //�����߼����ʽLogicbehavior
    String strLogicbehavior = "";
    Element eLogicbehavior = eXqlClause.element(PacketTag.XQL_TAG_LOGICBEHAVIOR);
    if (eLogicbehavior != null) {
      strLogicbehavior = parseLogicBehaviorTag(eLogicbehavior);
    }

    ////////////////////////////////////////////////////////////////////////////
    //logicexpression������
    Iterator iterXqlExpression = eXqlClause.elementIterator(
        PacketTag.XQL_TAG_XQL_EXPRESSION);

    //////////////////////////////////////////////////////////////////////////
    //logicclause������
    Iterator iterSubXqlClause = eXqlClause.elementIterator(PacketTag.
        XQL_TAG_XQL_CLAUSE);

    if (iterSubXqlClause == null && iterXqlExpression == null) {
      return "";
    }

    int i = 0;

    ////////////////////////////////////////////////////////////////////////
    //1��AND����Ĺ�ϵ��
    //ѭ��������ʽ���
    if (PacketTag.XQL_LOGICBEHAVIOR_AND.equalsIgnoreCase(strLogicbehavior)) {
      while (iterXqlExpression.hasNext()) {
        Element eXqlExpression = (Element) iterXqlExpression.next();
        String strExpression = parseXqlClauseExpression(eXqlExpression);
        if (!strExpression.equals("")) {
          if (i != 0) {
            strBufClause.append(" and ");
          }
          strBufClause.append("(").append(strExpression).append(") ");
          i++;
        }
      }
      //ѭ�������Լ�
      while (iterSubXqlClause.hasNext()) {
        Element eSubXqlClause = (Element) iterSubXqlClause.next();
        //Ƕ�׵ݹ��Լ�
        String strSubXqlCluase = parseXqlClause(eSubXqlClause);
        if (!strSubXqlCluase.equals("")) {
          if (i != 0) {
            strBufClause.append(" and ");
          }
          strBufClause.append("(").append(strSubXqlCluase).append(") ");
          i++;
        }
      }
      return strBufClause.toString();
    }

    ////////////////////////////////////////////////////////////////////////
    //2��OR����Ĺ�ϵ��
    else if (PacketTag.XQL_LOGICBEHAVIOR_OR.equalsIgnoreCase(strLogicbehavior)) {
      i = 0;
      while (iterXqlExpression.hasNext()) {
        Element eXqlExpression = (Element) iterXqlExpression.next();
        String strExpression = parseXqlClauseExpression(eXqlExpression);
        if (!strExpression.equals("")) {
          if (i != 0) {
            strBufClause.append(" or ");
          }
          strBufClause.append("(").append(strExpression).append(") ");
          i++;
        }
      }
      //
      while (iterSubXqlClause.hasNext()) {
        Element eSubXqlClause = (Element) iterSubXqlClause.next();
        String strSubXqlCluase = parseXqlClause(eSubXqlClause);
        if (!strSubXqlCluase.equals("")) {
          if (i != 0) {
            strBufClause.append(" or ");
          }
          strBufClause.append("(").append(strSubXqlCluase).append(") ");
          i++;
        }
      }
      return strBufClause.toString();
    }

    /////////////////////////////////////////////////////////////////////////
    //3��NOT���ǵĹ�ϵ��
    else if (PacketTag.XQL_LOGICBEHAVIOR_NOT.equalsIgnoreCase(strLogicbehavior)) {
      while (iterXqlExpression.hasNext()) {
        Element eXqlExpression = (Element) iterXqlExpression.next();
        String strExpression = parseXqlClauseExpression(eXqlExpression);
        if (!strExpression.equals("")) {
          strBufClause.append(" (not ").append("(").append(strExpression).
              append("))");
          return strBufClause.toString();
        }
        //
        while (iterSubXqlClause.hasNext()) {
          Element eSubXqlClause = (Element) iterSubXqlClause.next();
          String strSubXqlCluase = parseXqlClause(eSubXqlClause);
          if (!strSubXqlCluase.endsWith("")) {
            strBufClause.append(" (not ").append("(").append(strSubXqlCluase).
                append("))");
            return strBufClause.toString();
          }
        }
        return strBufClause.toString();
      }
    }

    /////////////////////////////////////////////////////////////////////////
    //4��NULL���ߡ����������ϵû�У�
    else if (PacketTag.XQL_LOGICBEHAVIOR_NULL.equalsIgnoreCase(strLogicbehavior) ||
             strLogicbehavior.equals("")) {
      while (iterXqlExpression.hasNext()) {
        Element eXqlExpression = (Element) iterXqlExpression.next();
        String strExpression = parseXqlClauseExpression(eXqlExpression);
        if (!strExpression.equals("")) {
          strBufClause.append("(").append(strExpression).append(") ");
        }
      }
      //
      while (iterSubXqlClause.hasNext()) {
        Element eSubXqlClause = (Element) iterSubXqlClause.next();
        String strSubXqlCluase = parseXqlClause(eSubXqlClause);
        if (!strSubXqlCluase.equals("")) {
          strBufClause.append("(").append(strSubXqlCluase).append(") ");
        }
      }
      return strBufClause.toString();
    }

    ///////////////////////////////////////////////////////////////////
    //���ؽ��������
    return strBufClause.toString();

  }

  /*
   <xql-order>
     <item>
       <xql-expression poid="PoHJXX_CZRKJBXXB" attribute="rynbid"/>
       <sequence>asc</sequence>
     </item>
     <item>
       <xql-expression poid="PoHJXX_CZRKJBXXB" attribute="csrq"/>
       <sequence>desc</sequence>
     </item>
   </xql-order>
   */
  private String parseXqlOrder(Element eXqlOrder) {
    StringBuffer strBufRet = new StringBuffer();
    StringBuffer strBufOrder = new StringBuffer();
    if (eXqlOrder != null) {
      //�������е�<item>��ʶ����
      Iterator iterItem = eXqlOrder.elementIterator(PacketTag.XQL_TAG_ITEM);
      if (iterItem != null) {
        int iItem = 0;
        ///////////////////////ѭ������ÿ��<Item>��ʶ////////////////////////
        while (iterItem.hasNext()) {
          Element eItem = (Element) iterItem.next();
          /////////////////////ÿ���ǿյ�<item>��ʶ���д���//////////////////
          if (eItem != null) {
            Element eExpression = eItem.element(PacketTag.
                                                XQL_TAG_XQL_EXPRESSION);
            Element eSequence = eItem.element(PacketTag.XQL_TAG_SEQUENCE);
            ///////////////////����<item>�е�һ�����ʽ<xql-expression>/////
            if (eExpression != null) {
              String strExpression = parseXqlExpressionTag(eExpression).trim();
              //�ж����е����Լ���ֵ,����������
              if (!strExpression.equals("")) {
                if (iItem != 0) {
                  strBufOrder.append(",");
                }
                strBufOrder.append(strExpression);
                iItem++;
              }
              //����һ��<item>�е�����ʽ<sequence>
              if (eSequence != null) {
                strBufOrder.append(" ").append(eSequence.getTextTrim()).append(
                    " ");
              }
            }
          }
        }
      }
    }
    //�ж�<Item>����ϵ���Ч�������ݱ�﷽ʽ
    //����ǿ�:ǰ��Ҫ���д���
    //���Ϊ��:�������κδ���
    if (!strBufOrder.toString().trim().equals("")) {
      strBufRet.append(" order by ").append(strBufOrder.toString());
      //strBufRet.append(strBufOrder.toString());
    }
    return strBufRet.toString();
  }

  //===================================================================

  //=====================��������=======================================
  private boolean isOrderBy(String str) {
    return (str != null) && (str.toLowerCase().indexOf(HQL_TAG_ORDER) > -1) &&
        (str.toLowerCase().indexOf(HQL_TAG_BY) > -1);
  }

  /**
   *
   * @param str
   * @return
   */
  private String stripOrderBy(String str) {
    str = str == null ? "" : str.trim();
    if (isOrderBy(str)) {
      int i = str.toLowerCase().trim().indexOf(HQL_TAG_BY);
      str = str.substring(i + 3, str.length());
    }
    return str;
  }

  /**
   * �ڲ����һ��Order by���
   * @param strOrderBy  - �������
   */
  public void addInOrderBy(String strOrderBy) {
    StringBuffer strBufOrder = new StringBuffer();
    ///////////////////////////////////////////////////////////////////
    //�������Order by
    //////////////////////////////////////////////////////////////////
    strOrderBy = strOrderBy == null ? "" : strOrderBy.trim();
    boolean bEmpty = strOrderBy.equals("");
    //if (!bEmpty && isOrderBy(strOrderBy)) {
    //strOrderBy = stripOrderBy(strOrderBy);
    //}
    //////////////////////////////////////////////////////////////
    //����������
    ///////////////////////////////////////////////////////////////
    if (!bEmpty) {
      if (isOrderBy(strOrderBy)) {
        strOrderBy = stripOrderBy(strOrderBy);
      }
      if (isOrderBy(getOrderby())) {
        strBufOrder.append(getOrderby()).append(",").append(strOrderBy);
      }
      else {
        strBufOrder.append(" order by ").append(strOrderBy);
      }
    }
    ////////////////////////////////////////////////////////////////
    //������������
    ///////////////////////////////////////////////////////////////
    setOrderby(strBufOrder.toString());
  }

  /**
   *
   * @param strOrderBy - �������
   */
  public void addOrderBy(String strOrderBy) {
    ///////////////////////////////////////////////////////////////////
    //�������Order by
    //////////////////////////////////////////////////////////////////
    strOrderBy = strOrderBy == null ? "" : strOrderBy.trim();
    boolean bEmpty = strOrderBy.equals("");
    //////////////////////////////////////////////////////////////
    //����������
    ///////////////////////////////////////////////////////////////
    if (!bEmpty) {
      if (isOrderBy(getOrderby())) {
        if (isOrderBy(strOrderBy)) {
          strOrderBy = stripOrderBy(strOrderBy);
        }
        StringBuffer strBufOrder = new StringBuffer();
        strBufOrder.append(getOrderby()).append(",").append(strOrderBy);
        ////////////////////////////////////////////////////////////////
        //������������
        ///////////////////////////////////////////////////////////////
        setOrderby(strBufOrder.toString());
      } //if (isOrderBy(getOrderby())) {
      //Begin By MHB 2005/7/08 15:58:00
      //delete by hh 2005/9/14 11:26 û��order by �Ĳ��üӣ�Ӱ���ٶ�
     /* else {
        if (isOrderBy(strOrderBy)) {
          setOrderby(strOrderBy);
        }
        else {
          setOrderby(HQL_TAG_ORDER + HQL_TAG_BY + " " + strOrderBy);
        }
      }
      //End By MHB 2005/7/08 15:58:00
      */
    } //if (!bEmpty) {
  }

  //==================================================================

  //=====================���Է�����=======================================
  //��¼�Ĺ�����ƫ����,Ĭ��ֵΪ0����ʾ���ƶ�pageoffset������pageoffset+1����ʼȡ����
  private int pageoffset = 0;
  //ÿҳ�ļ�¼����Ĭ��Ϊ-1����ʾ��ѯ���м�¼
  private int pagesize = -1;
  //��¼��Ϊ-1������ѯ����ǰҪ�Ȳ�ѯ�ܼ�¼����
  //����>-1����ʾ�ܼ�¼��Ŀ�Ѿ�֪������ѯ����ǰ��Ҫ���в�ѯ����
  private int recordcount = -1;
  private static final String HQL_TAG_ORDER = "order ";
  private static final String HQL_TAG_GROUP = "group";
  private static final String HQL_TAG_BY = " by";
  //HQL��ѯ���Ĭ��Ϊ�մ������м�¼��������ϲ�ѯ����
  private String HQLWhere = ""; //HQL�����в���
  private String orderby = ""; //�������
  private String groupby = ""; //�������
  private String HQLWhereOnly = ""; //Where��䲿��,û�����򡢷��鲿��(order by��group by)
  private String HQLHaving = ""; //�������������
  private String HQLSql = ""; //ֱ�Ӵ���sql���

  public int getPageoffset() {
    return pageoffset;
  }

  public void setPageoffset(int pageoffset) {
    this.pageoffset = pageoffset;
  }

  public int getPagesize() {
    return pagesize;
  }

  public void setPagesize(int pagesize) {
    this.pagesize = pagesize;
  }

  /**
   * �õ�ǰ̨�����HQL���
   * @return
   */
  public String getHQLWhere() {
    //��Ϸ��ص�HQL���
    StringBuffer strBufHQL = new StringBuffer();
    String strHQLWhereOnly = getHQLWhereOnly().trim();
    String strHQLSql = getHQLSql().trim();
    String strOrderBy = getOrderby().trim();

    //////////////////////////////////////////////////////////////
    //Where����
    strBufHQL.append(" (").append(strHQLWhereOnly).append(" ");
    if (!strHQLSql.equals("")) {
      if (!strHQLWhereOnly.equals("")) {
        strBufHQL.append(" and ").append(strHQLSql);
      }
      else {
        strBufHQL.append(" ").append(strHQLSql);
      }
    }
    //////////////////////////////////////////////////////////////////////
    //��������������
    if (!strBufHQL.toString().trim().equals("(")) {
      strBufHQL.append(" and 1=1 ");
    }
    else {
      strBufHQL.append(" 1=1 ");
    }
    strBufHQL.append(") ");
    //order by���򲿷�
    strBufHQL.append(" ").append(strOrderBy).append(" ");
    //�������н������
    return strBufHQL.toString();
  }

  public void setHQLWhere(String HQLWhere) {
    this.HQLWhere = HQLWhere;
  }

  public int getRecordcount() {
    return recordcount;
  }

  public void setRecordcount(int recordcount) {
    this.recordcount = recordcount;
  }

  public String getOrderby() {
    return orderby;
  }

  /**
   *
   * @param strOrderby
   */
  protected void setOrderby(String strOrderby) {
    this.orderby = strOrderby;
  }

  public String getGroupby() {
    return groupby;
  }

  protected void setGroupby(String groupby) {
    this.groupby = groupby;
  }

  public String getHQLWhereOnly() {
    return HQLWhereOnly;
  }

  protected void setHQLWhereOnly(String HQLWhereOnly) {
    this.HQLWhereOnly = HQLWhereOnly;
  }

  public String getHQLHaving() {
    return HQLHaving;
  }

  protected void setHQLHaving(String HQLHaving) {
    this.HQLHaving = HQLHaving;
  }

  protected String getHQLSql() {
    return HQLSql;
  }

  public void setHQLSql(String HQLSql) {
    this.HQLSql = HQLSql;
  }
  //========================================================================
}
