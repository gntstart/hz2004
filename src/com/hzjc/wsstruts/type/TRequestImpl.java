/* Generated by Together */

package com.hzjc.wsstruts.type;

import org.dom4j.*;
import org.dom4j.io.*;
import java.util.*;
import java.io.*;
import org.apache.commons.logging.*;
import com.hzjc.wsstruts.vo.*;
import com.hzjc.wsstruts.exception.*;
import org.xml.sax.InputSource;
import com.hzjc.wsstruts.common.xml.*;
import com.hzjc.wsstruts.common.config.WSConfig;

/**
 *
 * <p>Title: Hz2004</p>
 * <p>Description: 常住人口二代证Hz2004版</p>
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Company: HZJC</p>
 * @author Kansan Ku(kgb_hz@126.com)
 * @version 1.0
 * history: 2004-05-27 modify:�õ�ǰ̨�����Cds��Delta�޸����ݣ����ǰ�������һ��������Ϊ�޸�
 *
 */
public class TRequestImpl
    extends TBaseRequest {

  //��־����
  protected static Log _log = LogFactory.getLog(TRequestImpl.class);
  private Document _doc;

  public TRequestImpl() {

  }

  /**
   *
   * @param aXmlData
   * @return
   */
  public TRequest loadFromXml(String aXmlData) throws ActionException {
    try {
      _doc = fromXML(aXmlData);
    }
    catch (ActionException ex) {
      throw ex;
    }
    return this;
  }

  /**
   *
   * @return
   * @throws ActionException
   */
  public String reqSaveToXml() throws ActionException {
    try {
      //�����ڲ����������������Ҫ�ı�������XML
      //return toXML(_doc, XmlEncode.ENCODEING_NAME_GBK);

      ///////////////////////////////////////////////////////////////////
      //edit by kgb 2004-07-02������Ӧ��ʱ�����õ�XML���뷽ʽ
      String strEncoding = WSConfig.getInsance().getEncodeXmlPacket();
      strEncoding = strEncoding == null ? XmlEncode.ENCODING_NAME_UTF_8 :
          strEncoding;
      return toXML(_doc, strEncoding);

    }
    catch (ActionException ex) {
      throw ex;
    }
  }

  /**
   *
   * @param name
   * @param value
   */
  public Element readFromHeadNodeAsElement(String name) throws ActionException {
    Element eValue = null;
    try {
      if (name != null && getPackHead() != null) {
        eValue = getPackHead().element(name);
      }
    }
    catch (Exception ex) {
      throw new ActionException(WSErrCode.ERR_ACTION_PACKET_READPACKHEADDATA,
                                ex);
    }
    return eValue;
  }

  /**
   *
   * @param name
   * @param value
   */
  public Element readFromContorlNodeAsElement(String name) throws
      ActionException {
    Element eValue = null;
    try {
      if (name != null && getPackControl() != null) {
        eValue = getPackControl().element(name);
      }
    }
    catch (Exception ex) {
      throw new ActionException(WSErrCode.ERR_ACTION_PACKET_READPACKCONTROLDATA,
                                ex);
    }
    return eValue;
  }

  /**
   *
   * @param name
   * @param value
   */
  public Element readFromDataNodeAsElement(String name) throws ActionException {
    Element eValue = null;
    try {
      if (name != null && getPackData() != null) {
        eValue = getPackData().element(name);
      }
    }
    catch (Exception ex) {
      throw new ActionException(WSErrCode.ERR_ACTION_PACKET_READPACKDATA, ex);
    }
    return eValue;
  }

  /**
   *
   * @return
   */
  public PackXQL readFromVarDataAsXQL(String strXqlName) throws ActionException {
    PackXQL xql = null;
    try {
      /////////////////////////////////////////////////////////////////////
      //�ж�XQLԪ�ص�����,����������Ϊ��,��xqlname=PackXQLImpl.XQL_TAG_XQL_CRITERION
      //////////////////////////////////////////////////////////////////////
      strXqlName = strXqlName.equals("") ? PacketTag.XQL_TAG_XQL_CRITERION :
          strXqlName;
      Element eXQL = null;
      //���xqlname=PackXQLImpl.XQL_TAG_XQL_CRITERION
      if (strXqlName.equalsIgnoreCase(PacketTag.XQL_TAG_XQL_CRITERION)) {
        eXQL = readFromVarDataAsElement(strXqlName);
      }
      //�������������Ҫ��һ�����д���
      else {
        eXQL = readFromVarDataAsElement(strXqlName);
        if (eXQL != null) {
          eXQL = eXQL.element(PacketTag.
                              XQL_TAG_XQL_CRITERION);
        }
      }
      //��������PackXQL
      if (eXQL != null) {
        xql = new PackXQLImpl(eXQL);
      }
    }
    catch (ActionException ex) {
      throw ex;
    }
    return xql;
  }

  /**
   *
   * @param name
   * @param value
   */
  public Element readFromVarDataAsElement(String name) throws ActionException {
    Element eValue = null;
    try {
      if (name != null && getVardata() != null) {
        eValue = getVardata().element(name);
      }
    }
    catch (Exception ex) {
      throw new ActionException(WSErrCode.ERR_ACTION_PACKET_READPACKVARDATA, ex);
    }
    return eValue;
  }

  /**
   *
   * @return
   * @throws ActionException
   */
  public VarVO readFromVarDataAsVarVO() throws ActionException {
    VarVO vo = new VarVO();
    try {
      if (getVardata() != null && getVardata().elements() != null &&
          !getVardata().elements().isEmpty()) {
        Map mapvar = new HashMap();
        //ѭ���õ����б���
        for (Iterator iter = getVardata().elementIterator(); iter.hasNext(); ) {
          Element eVar = (Element) iter.next();
          mapvar.put(eVar.getName(), eVar.getTextTrim());
        }
        //vo = new VarVO();
        vo.setVarmap(mapvar);
      }
    }
    catch (Exception ex) {
      throw new ActionException(WSErrCode.ERR_ACTION_PACKET_READPACKVARDATA, ex);
    }
    return vo;
  }

  /**
   *
   * @param name
   * @param value
   */
  public String readFromRsDataAsStr(String name) throws ActionException {
    String strValue = "";
    try {
      if (name != null && getRsdata() != null) {
        ///////////////////////////////////////////////////////////////
        //ѭ���ж����е�Rs��¼
        ///////////////////////////////////////////////////////////////
        for (Iterator iter = getRsdata().elementIterator(); iter.hasNext(); ) {
          Element eRs = (Element) iter.next();
          ////////////////////////////////////////////////////////////
          //�жϼ�¼������ֵ�Ƿ���ڴ����name,��ȷ�������,���򷵻�ֵΪ��
          ///////////////////////////////////////////////////////////
          Attribute atrRsName = eRs.attribute(PacketTag.PACKET_TAG_RSNAME);
          if (atrRsName != null) {
            String strRsName = atrRsName.getText();
            if (strRsName.equalsIgnoreCase(name)) {
              //strValue = eRs.getTextTrim();
              /////////////////////////////////////////////////////////////////
              //edit by kgb 2004 -09 -14
              //��CDATA�е�ClientDataSet��XMLDATAֱ��ȡ����
              strValue = String.valueOf(eRs.getData());
              break;
            }
          }
        }
      }
      /////////////////////////////////////////////////////////////////
      //BASE64���봦��
      //////////////////////////////////////////////////////////////////
      //edit by kgb 2004 -09 -14
      //�����������ݲ����м���Base64����

      //if (!strValue.equals("")) {
        //���н���
        //strValue = new String(Base64.decodeBase64(strValue.getBytes()));
      //}
    }
    catch (Exception ex) {
      throw new ActionException(WSErrCode.ERR_ACTION_PACKET_READPACKRSDATA, ex);
    }
    return strValue;
  }

  /**
   *
   * @param name
   * @return
   */
  public List readFromRsDataAsListVO(String name) throws ActionException {
    List lstVo = new ArrayList();
    try {
      String strRsData = readFromRsDataAsStr(name);
      if (strRsData != null && !strRsData.equals("")) {
        ////////////////////////////////////////////////////////////////
        //����rs�е�xml����
        ////////////////////////////////////////////////////////////////
        Document docRsXml = fromXML(strRsData);
        Element eRoot = docRsXml == null ? null : docRsXml.getRootElement();
        //////////////////////////////////////////////////////////////////
        //�Ӹ�Ŀ¼��ʼ�����������RS��¼������
        /////////////////////////////////////////////////////////////////
        if (eRoot != null) {
          Element eRowData = eRoot.element(CdsDataTag.DATA_TAG_ROWDATA);
          if (eRowData != null) {
            //ѭ���������е�<rsdata>Ԫ���е�<rs>��Ԫ��
            for (Iterator iter = eRowData.elementIterator(CdsDataTag.
                DATA_TAG_ROW); iter.hasNext(); ) {
              Element eRow = (Element) iter.next();
              //�ж϶�ȡ<row>Ԫ�ص�״̬
              Attribute attrRowState = eRow.attribute(CdsDataTag.
                  DATA_TAG_ROWSTATE);
              //����cdsvo����
              CdsVO vo = new CdsVO();
              /////////////////////////////////////////////////////////
              //�������ޡ������ݽ��д���
              ////////////////////////////////////////////////////////
              if (attrRowState != null) {
                int iRowState = Integer.valueOf(attrRowState.getValue()).
                    intValue();
                vo.setRowstate(iRowState);
                //////////////////////////////////////////////////////////////////
                //�޸ĵ�����Ҫ�õ�������¼,�����д���;��һ��=ԭʼ������,�ڶ���=�޸ĵ�����
                //��Delphi��Delta�����е��޸����ݽ������⴦��
                //////////////////////////////////////////////////////////////////
                if (iRowState == CdsVO.ROW_STATE_RETRIEVE) {
                  vo.setRowstate(CdsVO.ROW_STATE_UPDATE);
                  Map mapOld = new TreeMap();
                  Map mapNew = new TreeMap();
                  //�õ�����ԭʼȡ�����ļ�¼����
                  for (Iterator iterOld = eRow.attributeIterator();
                       iterOld.hasNext(); ) {
                    Attribute attrOld = (Attribute) iterOld.next();
                    if (!attrOld.getName().trim().equals(CdsDataTag.
                        DATA_TAG_ROWSTATE)) {
                      mapOld.put(attrOld.getName().toLowerCase(),
                                 attrOld.getValue());
                    }
                  }
                  //�õ�������һ�����µļ�¼
                  Element eRowNew = (Element) iter.next();
                  for (Iterator iterNew = eRowNew.attributeIterator();
                       iterNew.hasNext(); ) {
                    Attribute atrrNew = (Attribute) iterNew.next();
                    //�õ��¡��ɶ�Ӧ����������;���Ƚ��¾�����ֵ
                    String strNewMapName = atrrNew.getName().trim().toLowerCase();
                    String strNewMapValue = atrrNew.getValue();
                    boolean bChange = false;
                    Object objOldMapKeyValue = mapOld.get(strNewMapName);
                    if (objOldMapKeyValue == null) {
                      objOldMapKeyValue = "";
                    }
                    bChange = !strNewMapValue.
                        equals(String.valueOf(objOldMapKeyValue));
                    //1������״̬����RowState���˵���modify by kgb 2004-05-26��
                    //2�����¡���һ�������ݹ��˵�
                    //(atrrNew.getName().trim()�ȽϿ�����Bug��������ֶΰ����������)
                    if (!atrrNew.getName().trim().equalsIgnoreCase(CdsDataTag.
                        DATA_TAG_ROWSTATE) && bChange) {
                      mapNew.put(strNewMapName, strNewMapValue);
                    }
                  }
                  //��VO��Ԫ�غ��޸ĺ�������ݽ��д���
                  vo.setOldmap(mapOld);
                  vo.setNewmap(mapNew);
                  lstVo.add(vo);
                }
                //////////////////////////////////////////////////////////////////
                //����Ӻ�ɾ���ļ�¼���д���
                //�����ͼ�¼ֻ��һ��������Ҫ���в�ͬ�Ĵ���
                //////////////////////////////////////////////////////////////////
                else {
                  Map mapAttr = new TreeMap();
                  for (Iterator iterAttr = eRow.attributeIterator();
                       iterAttr.hasNext(); ) {
                    Attribute attrRow = (Attribute) iterAttr.next();
                    //add by kgb 2004-05-24
                    if (!attrRow.getName().trim().equals(CdsDataTag.
                        DATA_TAG_ROWSTATE)) {
                      mapAttr.put(attrRow.getName().toLowerCase(),
                                  attrRow.getValue());
                    }
                  }
                  vo.setNewmap(mapAttr);
                  lstVo.add(vo);
                }
              }
              ////////////////////////////////////////////////////////////
              //ԭʼ�ݽ������ݣ�û��״̬����
              //////////////////////////////////////////////////////////
              else {
                //cds��data����,�������ޡ������ݣ�ԭʼȡ�õ�����
                vo.setRowstate(CdsVO.ROW_STATE_RETRIEVE);
                Map mapAttr = new TreeMap();
                for (Iterator iterAttr = eRow.attributeIterator();
                     iterAttr.hasNext(); ) {
                  Attribute attrRow = (Attribute) iterAttr.next();
                  mapAttr.put(attrRow.getName().toLowerCase(),
                              attrRow.getValue());
                }
                vo.setNewmap(mapAttr);
                lstVo.add(vo);
              }
            }
          }
        }
      }
    }
    catch (ActionException ex) {
      throw ex;
    }
    catch (Exception ex1) {
      throw new ActionException(WSErrCode.ERR_ACTION_PACKET_READPACKRSDATA, ex1);
    }
    return lstVo;
  }

  //=======================˽�з���===================================
  /**
   *
   * @return
   */
  private Element getRootNode() {
    //return _doc == null ? null : _doc.getRootElement();
    if (_doc == null) {
      return null;
    }
    else {
      return _doc.getRootElement();
    }
  }

  /**
   *
   * @return
   */
  private Element getPackHead() {
    return getRootNode() == null ? null :
        getRootNode().element(PacketTag.PACKET_TAG_PACKHEAD);
  }

  /**
   *
   * @return
   */
  private Element getPackControl() {
    return getRootNode() == null ? null :
        getRootNode().element(PacketTag.PACKET_TAG_CONTROL);
  }

  /**
   *
   * @return
   */
  public Element getPackData() {
    //return getRootNode() == null ? null :
    //  getRootNode().element(PacketTag.PACKET_TAG_DATA);
    if (getRootNode() == null) {
      return null;
    }
    else {
      return getRootNode().element(PacketTag.PACKET_TAG_DATA);
    }
  }

  //========================================================================

  //============================��������=================================
  /**
   *
   * @return
   */
  public String getVer() {
    return readFromHeadNodeAsStr(PacketTag.PACKET_TAG_VER);
  }

  /**
   *
   * @return
   */
  public String getDatetime() {
    return readFromHeadNodeAsStr(PacketTag.PACKET_TAG_DATETIME);
  }

  /**
   *
   * @return
   */
  public String getAction() {
    return readFromContorlNodeAsStr(PacketTag.PACKET_TAG_ACTION);
  }

  /**
   *
   * @return
   */
  public String getCode() {
    return readFromContorlNodeAsStr(PacketTag.PACKET_TAG_CODE);
  }

  /**
   *
   * @return
   */
  public String getClientip() {
    return readFromContorlNodeAsStr(PacketTag.PACKET_TAG_CLIENTIP);
  }

  /**
   *
   * @param value
   * @throws ActionException
   */
  private void writeToControlNode(Element value) throws ActionException {
    if (getPackControl() != null && value != null) {
      try {
        getPackControl().add(value);
      }
      catch (Exception ex) {
        throw new ActionException(WSErrCode.
                                  ERR_ACTION_PACKET_WRITEPACKCONTROLDATA, ex);
      }
    }
  }

  /**
   *
   * @param name
   * @param value
   * @throws ActionException
   */
  private void writeToControlNode(String name, String value) throws
      ActionException {
    try {
      if (name != null && value != null) {
        if (PacketUtil.hasChildNode(getPackControl(), name)) {
          getPackControl().element(name).setText(value);
        }
        else {
          Element eNode = DocumentHelper.createElement(name).addText(value);
          writeToControlNode(eNode);
        }
      }
    }
    catch (ActionException ex) {
      throw ex;
    }
  }

  /**
   *
   * @param strClientIp
   */
  public void setClientip(String strClientIp) {
    writeToControlNode(PacketTag.PACKET_TAG_CLIENTIP, strClientIp);
  }

  /**
   *
   * @return
   */
  public String getAuthinfo() {
    return readFromContorlNodeAsStr(PacketTag.PACKET_TAG_AUTHINFO);
  }

  /**
   *
   * @return
   */
  public Element getVardata() {
    return readFromDataNodeAsElement(PacketTag.PACKET_TAG_VARDATA);
  }

  /**
   *
   * @return
   */
  public Element getRsdata() {
    return readFromDataNodeAsElement(PacketTag.PACKET_TAG_RSDATA);
  }

  //=========================================================================

}
