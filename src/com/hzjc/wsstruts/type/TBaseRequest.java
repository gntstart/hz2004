/* Generated by Together */

package com.hzjc.wsstruts.type;

import org.dom4j.*;
import java.util.List;
import com.hzjc.wsstruts.vo.*;
import com.hzjc.wsstruts.exception.*;
import org.dom4j.io.*;
import java.io.*;
import org.apache.commons.logging.*;
import com.hzjc.wsstruts.common.xml.*;

/**
 *
 * <p>Title: Hz2004</p>
 * <p>Description: 常住人口二代证Hz2004版</p>
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Company: HZJC</p>
 * @author Kansan Ku(kgb_hz@126.com)
 * @version 1.0
 */
abstract public class TBaseRequest
    implements TRequest {

  //��־����
  protected static Log _log = LogFactory.getLog(TBaseRequest.class);

  /**
   *
   * @param aXmlData
   * @return
   * @throws <{ActionException}>
   */
  protected Document fromXML(String aXmlData) throws ActionException {
    Document doc = null;
    try {
      doc = XmlUtils.fromXML(aXmlData);
    }
    catch (Exception ex) {
      throw new ActionException(WSErrCode.ERR_ACTION_PACKET_LOADFROMXML, ex);
    }
    return doc;
  }

  /**
   *
   * @param aDoc
   * @param strEncodingName
   * @return
   * @throws ActionException
   */
  protected String toXML(Document aDoc, String strEncodingName) throws
      ActionException {
    String strXml = "";
    try {
      strXml = XmlUtils.toXML(aDoc, strEncodingName);
    }
    catch (Exception ex) {
      throw new ActionException(WSErrCode.ERR_ACTION_PACKET_SAVETOXML, ex);
    }
    return strXml;
  }

  /**
   *
   * @param name
   * @param value
   */
  public String readFromHeadNodeAsStr(String name) throws ActionException {
    String strValue = "";
    try {
      Element eNode = readFromHeadNodeAsElement(name);
      if (eNode != null) {
        strValue = eNode.getTextTrim();
      }
    }
    catch (ActionException ex) {
      throw ex;
    }
    return strValue;
  }

  /**
   *
   * @param name
   * @param value
   */
  public abstract Element readFromHeadNodeAsElement(String name) throws
      ActionException;

  /**
   *
   * @param name
   * @param value
   */
  public String readFromContorlNodeAsStr(String name) throws ActionException {
    String strValue = "";
    try {
      Element eNode = readFromContorlNodeAsElement(name);
      if (eNode != null) {
        strValue = eNode.getTextTrim();
      }
    }
    catch (ActionException ex) {
      throw ex;
    }
    return strValue;
  }

  /**
   *
   * @param name
   * @param value
   */
  public abstract Element readFromContorlNodeAsElement(String name) throws
      ActionException;

  /**
   *
   * @param name
   * @param value
   */
  public String readFromVarDataAsStr(String name) throws ActionException {
    String strValue = null;
    try {
      Element eNode = readFromVarDataAsElement(name);
      if (eNode != null) {
        //strValue = eNode.getTextTrim();
        //kgb edit 2004-05-05
        //����var������ʶ�е����ݺܴ��ʱ�򣬿ͻ��˴�����ʱ���������˽���ʱ���Զ�����ֶΣ�
        //��ȡ��ʱ�����getData���������������һ��
        strValue = String.valueOf(eNode.getData());
      }
    }
    catch (ActionException ex) {
      throw ex;
    }
    return strValue;
  }

  /**
   *
   * @param name
   * @param value
   */
  public abstract Element readFromVarDataAsElement(String name) throws
      ActionException;

  /**
   *
   * @param name
   * @return
   */
  public abstract List readFromRsDataAsListVO(String name) throws
      ActionException;

  /**
   *
   * @param name
   * @return
   */
  public CdsVO[] readFromRsDataAsArrayVO(String name) throws ActionException {
    CdsVO[] vos = null;
    try {
      //����see#readFromRsDataAsListVO
      List lstvo = readFromRsDataAsListVO(name);
      if (lstvo != null && !lstvo.isEmpty()) {
        //lstvo.toArray(vos);
        //edit 2004-04-21
        vos = (CdsVO[]) lstvo.toArray(new CdsVO[lstvo.size()]);
      }
    }
    catch (ActionException ex) {
      throw ex;
    }
    return vos;
  }
}
