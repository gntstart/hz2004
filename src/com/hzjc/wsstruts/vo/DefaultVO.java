/* Generated by Together */

package com.hzjc.wsstruts.vo;

import com.hzjc.hz2004.base.encode.Base64;
import com.hzjc.wsstruts.common.db.DbUtils;
import com.hzjc.wsstruts.exception.VOException;
import com.hzjc.wsstruts.po.PO;
import com.hzjc.wsstruts.type.*;
import java.sql.Blob;
import java.util.Map;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 *
 * <p>Title: Hz2004</p>
 * <p>Description: 常住人口二代证Hz2004版</p>
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Company: HZJC</p>
 * @author Kansan Ku(kgb_hz@126.com)
 * @version 1.0
 */
public class DefaultVO
    implements VO {

  //日志处理
  protected static Log _log = LogFactory.getLog(DefaultVO.class);

  /**
   *
   */
  public DefaultVO() {

  }

  /**
   * 校验数据的有效性
   * @return
   */
  public boolean validateDTD() {
    return true;
  }

  /**
   *
   * @param packet
   * @return
   */
  public VO readFromPacket(TPacket packet) {
    return null;
  }

  /**
   *
   * @param packet
   * @return
   */
  public TPacket writeToPacket(TPacket packet) {
    return null;
  }

  /**
   * 装载转换属性PO-->VO(子类可以重载该构造子)
   * 注意:对于Bean中有Blob,Clob或其他非常规类型的属性,必须进行特殊处理
   *     BeanUtils.copyProperties(this, entity)可能抛出异常,此时应
   *     进行重载,对每个属性进行手工处理.
   * @param entity
   */
  public DefaultVO(PO entity) {
    try {
    	BeanUtils.copyProperties(this, entity);
    }catch (Exception ex) {
      throw new VOException("转换实体PO-->值VO发生错误!", ex);
    }
  }

  /**
   * 装载转换属性VO-->PO(子类可以重载该方法)
   * 注意:对于Bean中有Blob,Clob或其他非常规类型的属性,必须进行特殊处理
   *     BeanUtils.copyProperties(this, entity)可能抛出异常,此时应
   *     进行重载,对每个属性进行手工处理.
   * @param entity
   * @return
   */
  public PO toEntity(PO entity) {
    try {
      BeanUtils.copyProperties(this, entity);
      return entity;
    }
    catch (Exception ex) {
      throw new VOException("转换值VO-->实体PO发生错误", ex);
    }
  }

  /**
   * 将Blob字段的Byte字节流转换为BASE64编码.
   * @param aBlob
   * @return
   */
  public String encodeBlob(Blob aBlob) {
    byte[] byteBlob = DbUtils.parseBlobToBytes(aBlob);
    //String strEnCodeBloab = new String(Base64.encodeBase64Chunked(byteBlob));
    //如果Base64有还行的话，返回给Delphi客户端可能有错误。
    //估计是ClientDataSet.xmldata方法没有处理好（对Base64的解码没有对还行进行处理）。
    String strEnCodeBloab = new String(Base64.encode(byteBlob));
    //_log.info("转换Blob为Base64=" + strEnCodeBloab);
    return strEnCodeBloab;
  }

  /**
    public String decodeStr(String strBase64Blob) {
      String strDecode = null;
      if (strBase64Blob == null) {
        return strDecode;
      }
      strDecode = new String(decodeBytes(strBase64Blob.getBytes()));
      return strDecode;
    }
   **/

  /**
   *
   * @param aBytes
   * @return
   */
  public byte[] decodeBytes(byte[] aBytes) {
    byte[] byteDecode = null;
    if (aBytes == null) {
      return byteDecode;
    }
    byteDecode = Base64.decode(aBytes);
    return byteDecode;
  }

  /**
   *
   * @param aBytes
   * @return
   */
  public byte[] encodeBytes(byte[] aBytes) {
    byte[] byteEncode = null;
    if (aBytes == null) {
      return byteEncode;
    }
    byteEncode = Base64.encode(aBytes);
    return byteEncode;
  }

  /**
     public String encodeStr(String aStr) {
    String strEncode = null;
    if (aStr == null) {
      return strEncode;
    }
    strEncode = new String(encodeBytes(aStr.getBytes()));
    return strEncode;
     }
   **/

  /**
   *
   * @param strBase64
   * @return
   */
  public Blob createBlob(String strBase64) {
    //解码
    byte[] aBytes = Base64.decode(strBase64.getBytes());
    Blob aBlob = null;
    //创建Blob
    //aBlob = Hibernate.createBlob(aBytes);
    return aBlob;
  }

  /**
   *
   * @param buffer
   * @return
   */
  public Blob createBlob(byte[] buffer) {
    //return Hibernate.createBlob(buffer);
	  return null;
  }

  /**
   * 根据属性名称，得到当前VO该属性的值
   * @param strPropertyName:该值对象的属性
   * @return：返回该属性的值
   * @throws VOException
   */
  public String queryProperty(String strPropertyName) throws VOException {
    String strPropValue = null;
    if (strPropertyName == null) {
      return strPropValue;
    }
    try {
      strPropValue = BeanUtils.getProperty(this, strPropertyName);
    }
    catch (Exception ex) {
      throw new VOException("得到VO值对象的" + strPropertyName + "属性发生异常。", ex);
    }
    return strPropValue;
  }

  /**
   * 得到当前VO的所有属性散列
   * @return：返回该值对象的属性散列
   * @throws VOException
   */
  public java.util.Map queryProperties() throws VOException {
    Map mapPropValue = null;
    try {
      mapPropValue = BeanUtils.describe(this);
    }
    catch (Exception ex) {
      throw new VOException("得到VO值对象的属性键-值映射Map发生异常。", ex);
    }
    return mapPropValue;
  }

  /**
   *
   * @param strFldName
   * @return
   * @throws VOException
   */
  public boolean hasProperty(String strFldName) throws VOException {
    boolean bHas = false;
    Map mapFlds = queryProperties();
    bHas = mapFlds.containsKey(strFldName);
    return bHas;
  }
}
