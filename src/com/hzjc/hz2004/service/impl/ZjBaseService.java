/* Generated by Together */

package com.hzjc.hz2004.service.impl;

import com.hzjc.wsstruts.exception.*;
import com.hzjc.hz2004.dao.*;
import com.hzjc.hz2004.po.*;
import com.hzjc.hz2004.po.PoOLD_HJXX_CZRKJBXXB;
import com.hzjc.util.StringUtils;
import com.hzjc.hz2004.constant.*;
import java.util.*;

import org.hibernate.LockOptions;

import com.hzjc.wsstruts.vo.*;
import com.hzjc.hz2004.vo.*;
import com.hzjc.wsstruts.dao.hibernate.DefaultDAO;
import com.hzjc.hz2004.appbase.*;
import com.hzjc.hz2004.base.SpringContextHolder;
import com.hzjc.hz2004.base.login.BaseContext;
import com.hzjc.hz2004.service.ZjService;

/**
 *
 * <p>Title: Hz2004</p>
 * <p>Description: 常住人口管理系统Hz2004版</p>
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Company: 浙江金铖新技术有限公司</p>
 * @author kgb_hz@126.com,kgb@primetech.com.cn
 * @version 1.0
 * @since history 2004-07-01 修改保存证件流水-身份证业务操作表
 *                2004-11-04 修改地址拼装规则:乡镇街道(XZJD),居委会(JWH)==>说明描述取备注字段
 */
abstract public class ZjBaseService
    extends Hz2004BaseService
    implements ZjService {

  /**
   * 二代证件重号判断
   * 说明:记录标志最新zx-人员状态正常zc-公民身份号码gmsfhm,是否有多个
   * @param voCzrk
   * @return
   * @throws ServiceException
   * @throws DAOException
   */
  protected boolean checkEdzslChpd(VoHJXX_CZRKJBXXB voCzrk) throws
      ServiceException,
      DAOException {
    boolean bRet = false;
    String strChpdBz = getXtkzcsAsStr(PublicConstant.XTKZCS_EDZBLDCHPDFS);
    if (PublicConstant.XTKZCS_EDZBLDCHPDFS_YES_ALL.equals(strChpdBz)) { //双方均允许办证
      return bRet;
    }
    if (voCzrk != null) {
      try {
        StringBuffer strBuf = new StringBuffer();

        //======================================================================
        //edit by kgb 2004-06-14
        strBuf.append("from PoHJXX_CZRKJBXXB where jlbz='")
            .append(PublicConstant.JLBZ_ZX).append("' ") //记录标志：正常
            .append("and ryzt='").append(HjConstant.RYZT_ZC).append("' ") //人员状态：正常
            .append("and cxbz='").append(PublicConstant.CXBZ_FCX).append("' ") //冲销标志：非冲销add by kgb 2004-11-30
            .append("and gmsfhm='").append(voCzrk.getGmsfhm()).append("' ");

        PojoInfo  dao = DAOFactory.createHJXX_CZRKJBXXBDAO();
        List lstpos =super.findAllByHQL(strBuf.toString());

        if (lstpos.size() > 1) {
          List lstRynbid = new ArrayList();
          //////////////////////////////////////////////////////////////////
          //组织重号判断提示警告信息
          ////////////////////////////////////////////////////////////////////
          StringBuffer strInfo = new StringBuffer();
          strInfo.append("\r\n证件办理人员=>").append(voCzrk.toString()).append(
              "\r\n与被重号人员=>");
          for (int i = 0; i < lstpos.size(); i++) {
            PoHJXX_CZRKJBXXB po = (PoHJXX_CZRKJBXXB) lstpos.get(i);
            VoHJXX_CZRKJBXXB vo = new VoHJXX_CZRKJBXXB(po);
            if (!voCzrk.getRynbid().equals(vo.getRynbid())) {
              strInfo.append(vo.toString());
              lstRynbid.add(vo.getRynbid());
            }
          }
          //////////////////////////////////////////////////////////////////////////////////////
          if (PublicConstant.XTKZCS_EDZBLDCHPDFS_NO_ALL.equals(strChpdBz)) { //有重号人不允许办理
            bRet = true; //说明重号
            throw new ServiceException(WSErrCode.ERR_SERVICE_BUSSINESSLIMIT,
                                       strInfo.toString(), null);
          }
          else if (PublicConstant.XTKZCS_EDZBLDCHPDFS_YES_ONLY_FIRST.equals(
              strChpdBz)) { //有重号的，但只允许第一个（最先）的办理
            //判断该人是否是第一位先办理的
            StringBuffer strBufCheck = new StringBuffer();
            strBufCheck.append("from PoZJYW_SLXXB where rynbid <>'").append(
                voCzrk.getRynbid()).append("' and (");
            for (int i = 0; i < lstRynbid.size(); i++) {
              if (i == 0) {
                strBufCheck.append(" rynbid ='").append(String.valueOf(
                    lstRynbid.
                    get(i))).append("' ");
              }
              else {
                strBufCheck.append(" or rynbid ='").append(String.valueOf(
                    lstRynbid.
                    get(i))).append("' ");
              }
            }
            strBufCheck.append(")");
            PojoInfo  zjyw_slxxbDAO = DAOFactory.createZJYW_SLXXBDAO();
            List lstpocheck =super.findAllByHQL(strBufCheck.
                toString());
            //_log.info("有重号的，但只允许第一个（最先）的办理判断SQL=" + strBufCheck.toString());
            if (lstpocheck.size() > 0) {
              bRet = true; //有重号
              throw new ServiceException(WSErrCode.ERR_SERVICE_BUSSINESSLIMIT,
                                         strInfo.toString(), null);
            }
          }
        } //if(lstpos.size() >1)
      }
      catch (DAOException ex) {
        throw new DAOException(WSErrCode.ERR_DB_OTHER, "重号校验判断时发生异常，", ex);
      }
    }
    return bRet;
  }

  /**
   * 一代证件重号判断
   * @param voCzrk
   * @return
   * @throws ServiceException
   * @throws DAOException
   */
  protected boolean checkYdzslChpd(VoHJXX_CZRKJBXXB voCzrk) throws
      ServiceException,
      DAOException {
    boolean bRet = false;
    String strChpdBz = getXtkzcsAsStr(PublicConstant.XTKZCS_YDZSFYXCHBZ);
    if (PublicConstant.XTKZCS_YDZSFYXCHBZ_YES_ALL.equals(strChpdBz)) { //有重号的，所有允许办理
      return bRet;
    }
    if (PublicConstant.XTKZCS_YDZSFYXCHBZ_NO_ALL.equals(strChpdBz)) { //有重号，所有的都不允许办理
      if (voCzrk != null) {
        try {
          StringBuffer strBuf = new StringBuffer();
          //edit by kgb 2004-06-14
          strBuf.append("from PoHJXX_CZRKJBXXB where jlbz='")
              .append(PublicConstant.JLBZ_ZX)
              .append("' and cxbz='")
              .append(PublicConstant.CXBZ_FCX) //增加了 cxbz 判断(2004/10/09于闵红斌)
              .append("' and ryzt='")
              .append(HjConstant.RYZT_ZC)
              .append("' ")
              .append("and gmsfhm='")
              .append(voCzrk.getGmsfhm())
              .append("' ");
          PojoInfo  dao = DAOFactory.createHJXX_CZRKJBXXBDAO();
          List lstpos =super.findAllByHQL(strBuf.toString());
          if (lstpos.size() > 1) {
            bRet = true; //说明重号
            //////////////////////////////////////////////////////////////////
            //组织重号判断提示警告信息
            ////////////////////////////////////////////////////////////////////
            StringBuffer strInfo = new StringBuffer();
            strInfo.append("\r\n证件办理人员=>").append(voCzrk.toString()).append(
                "\r\n与被重号人员=>");
            for (int i = 0; i < lstpos.size(); i++) {
              PoHJXX_CZRKJBXXB po = (PoHJXX_CZRKJBXXB) lstpos.get(i);
              VoHJXX_CZRKJBXXB vo = new VoHJXX_CZRKJBXXB(po);
              if (!voCzrk.getRynbid().equals(vo.getRynbid())) {
                strInfo.append(vo.toString());
              }
            }
            throw new ServiceException(WSErrCode.ERR_SERVICE_BUSSINESSLIMIT,
                                       strInfo.toString(), null);
          }
        }
        catch (DAOException ex) {
          throw new DAOException(WSErrCode.ERR_DB_OTHER, "重号校验判断时发生异常，", ex);
        }
      }
    }
    return bRet;
  }

  /**
   * 传入的业务功能点和数据值数组，校验数据值数据是否受到限制
   * @param sYwid - 业务功能点ID
   * @param dvs   - 业务的数据VO
   * @return
   * @throws ServiceException
   */
  protected void VerifyBusinessLimit(String sYwid, DefaultVO[] dvs) throws
      ServiceException, DAOException {
    try {
      if (sYwid != null && dvs != null && dvs.length > 0) {
        for (int i = 0; i < dvs.length; i++) {
          VoXtywxz vo = XtywqxServiceImpl.VerifyBusinessLimit(sYwid, dvs[i]);
          if (vo != null && vo.getLimitflag()) {
            throw new ServiceException(WSErrCode.ERR_SERVICE_BUSSINESSLIMIT,
                                       "功能为" + sYwid +
                                       "的业务存在条件限制，该笔业务无法办理；限制原因：" +
                                       vo.getLimitinfo(), null);

          }
        }
      }
    }
    catch (DAOException ex) {
      throw ex;
    }
    catch (ServiceException ex) {
      throw ex;
    }
  }

  /**
   * 根据区县得到系统控制参数中的签发机关对应名称
   * @param strSsqx - 省市县区代码
   * @return        - 区县签发机关VO
   * @throws ServiceException
   * @throws DAOException
   */
  protected VoXT_XTCSB getQxqfjgAsVo(String strSsqx) throws ServiceException,
      DAOException {
    VoXT_XTCSB vo = null;
    try {
      vo = getXtcsAsVo(PublicConstant.XTCS_QXDYQFJG, strSsqx);
    }
    catch (DAOException ex) {
      throw ex;
    }
    catch (ServiceException ex) {
      throw ex;
    }
    return vo;
  }

  /**
   * 根据单位代码得到单位名称描述
   * @param strDm  - 单位代码
   * @return
   * @throws ServiceException
   * @throws DAOException
   */
  private String getXtDwxx_sm(String strDm) throws ServiceException,
      DAOException {
    try {
      //String strSm = SysParam.getXt_dwxxbAsStr(strDm);
      String strSm = "";
      PojoInfo  xt_dwxxbDAO = DAOFactory.createXT_DWXXBDAO();
      String strHQL = "from PoXT_DWXXB where dm='" + strDm + "'";
      List lstPo =super.findAllByHQL(strHQL);
      if (lstPo != null && !lstPo.isEmpty()) {
        PoXT_DWXXB po = (PoXT_DWXXB) lstPo.get(0);
        strSm = po.getMc();
      }
      else {
        strSm = strDm;
      }
      return strSm;
    }
    catch (Exception ex) {
      throw new ServiceException("", ex);
    }
  }

  /**
   * 得到user单位名称描述
   * @return
   * @throws ServiceException
   * @throws DAOException
   */
  protected String getXtDwxx_sm() throws ServiceException,
      DAOException {
    String strSm = getXtDwxx_sm(getUserInfo().getDwdm());
    return strSm;
  }

  /**
   * 根据门楼牌内部ID，得到系统参数VO
   * @param lMnplbid - 门楼牌内部ID
   * @return         - 签发机关VO
   * @throws ServiceException
   * @throws DAOException
   */
  protected VoXT_XTCSB getQxqfjgAsVoByMlpnbid(Long lMnplbid) throws
      ServiceException, DAOException {
    VoXT_XTCSB vo = null;
    if (lMnplbid == null) {
      return null;
    }
    try {
      PojoInfo  dao = DAOFactory.createHJXX_MLPXXXXBDAO();
      PoHJXX_MLPXXXXB po  = super.get(PoHJXX_MLPXXXXB.class,lMnplbid);
      //根据派出所代码得到签发机关(2005/04/27 14:30:00 By MHB)
      if (po != null && po.getPcs() != null) {
        vo = getQxqfjgAsVo(po.getPcs());
      }
      //如果根据派出所代码没得到签发机关，再根据省市区县代码得到签发机关
      if (vo == null && po != null && po.getSsxq() != null) {
        vo = getQxqfjgAsVo(po.getSsxq());
      }
    }
    catch (ServiceException ex) {
      throw ex;
    }
    catch (DAOException ex) {
      throw ex;
    }
    return vo;
  }

  /**
   * 根据人员内部ID，返回区县签发机关VO
   * @param lRynbid - 人员内部ID
   * @return        - 区县签发机关系统参数VO
   * @throws ServiceException
   * @throws DAOException
   */
  protected VoXT_XTCSB getQxqfjgAsVoByRynbid(Long lRynbid) throws
      ServiceException, DAOException {
    VoXT_XTCSB vo = null;
    try {
      if (lRynbid != null) {
        StringBuffer strBufHQL = new StringBuffer();
        strBufHQL.append(
            "select HJXX_MLPXXXXB from PoHJXX_MLPXXXXB as HJXX_MLPXXXXB,")
            .append("PoHJXX_CZRKJBXXB as HJXX_CZRKJBXXB where HJXX_CZRKJBXXB.mlpnbid= HJXX_MLPXXXXB.mlpnbid ")
            .append("and HJXX_CZRKJBXXB.rynbid=").append(String.valueOf(lRynbid));
        PojoInfo  hjxx_mlpxxxxbDAO = DAOFactory.createHJXX_MLPXXXXBDAO();
        List lstpo =super.findAllByHQL(strBufHQL.toString());
        if (lstpo != null && !lstpo.isEmpty()) {
          PoHJXX_MLPXXXXB po = (PoHJXX_MLPXXXXB) lstpo.get(0);
          //根据派出所代码得到签发机关(2005/05/25 10:50:00 By MHB)
          if (po != null && po.getPcs() != null) {
            vo = getQxqfjgAsVo(po.getPcs());
          }
          //如果根据派出所代码没得到签发机关，再根据省市区县代码得到签发机关
          if (vo == null && po != null && po.getSsxq() != null) {
            vo = getQxqfjgAsVo(po.getSsxq());
          }
        }
      }
    }
    catch (ServiceException ex) {
      throw ex;
    }
    catch (DAOException ex) {
      throw ex;
    }
    return vo;
  }

  /**
   * 保存身份证业务操作信息表和业务操作日志表
   * 该方法中不能包含事务（嵌套事务处理）
   * @param lZjywid - 证件业务ID
   * @param strYwbz - 业务标志
   * @throws <{com.hzjc.wsstruts.exception.ServiceException}>
   * @throws <{com.hzjc.wsstruts.exception.DAOException}>
   */
  protected void saveSfzywlsXtrz(Long lZjywid,
                                 String strYwbz, String strSlh, String strSlzt) throws
      ServiceException, DAOException {

    try {
      PojoInfo  zjls_sfzywczbDAO = DAOFactory.createZJLS_SFZYWCZBDAO();
      //////////////////////////////////////////////////////////////////////
      //1、保存身份证业务操作信息
      //////////////////////////////////////////////////////////////////////
      PoZJLS_SFZYWCZB poZJLS_SFZYWCZB = new PoZJLS_SFZYWCZB();
      if (getUserInfo() != null) {
        poZJLS_SFZYWCZB.setCzyid(getUserInfo().getYhid());
        poZJLS_SFZYWCZB.setCzyxm(getUserInfo().getYhxm());
      }
      else {
        //操作用户不存在？？
      }
      poZJLS_SFZYWCZB.setSlh(strSlh);
      poZJLS_SFZYWCZB.setSlzt(strSlzt);
      poZJLS_SFZYWCZB.setYwbz(strYwbz); //业务标志
      poZJLS_SFZYWCZB.setCzsj(StringUtils.getServiceTime());//操作时间
      poZJLS_SFZYWCZB.setZjywid(lZjywid); //证件业务ID
      poZJLS_SFZYWCZB.setCzip(BaseContext.getUser().getIp());
      super.create(poZJLS_SFZYWCZB); //插入身份业务操作信息
      //////////////////////////////////////////////////////////////////////
      //2、保存操作日志
      ////////////////////////////////////////////////////////////////////。
      //saveXtrz(strYwbz);
    }
    catch (DAOException ex) {
      throw ex;
    }
    catch (ServiceException ex) {
      throw ex;
    }
  }

  /**
   * 根据业务标志保存系统日志
   * @param strYwbz - 业务标志
   * @throws DAOException
   * @throws ServiceException
   */
  /*
       protected void saveXtrz(String strYwbz) throws DAOException, ServiceException {
    try {
      PojoInfo  xt_xtrzbDAO = DAOFactory.createXT_XTRZBDAO();
      PoXT_XTRZB poXT_XTRZB = new PoXT_XTRZB();
      if (getUserInfo() != null) {
        poXT_XTRZB.setCzyid(getUserInfo().getYhid());
      }
      else {
        //
      }
      poXT_XTRZB.setCzsj(StringUtils.formatDateBy(new java.util.Date(),
                                                  "yyyyMMddHHmmss"));
      poXT_XTRZB.setYwbz(strYwbz); //业务标志
      poXT_XTRZB.setRzid( (Long) xt_xtrzbDAO.getId());
      super.create(poXT_XTRZB); //保存系统操作日志
    }
    catch (DAOException ex) {
      throw ex;
    }
     }
   */

  /**
   *
   * @param lNbsfzid
   * @param strSlzt
   * @param lZjywid
   * @param strYwid
   * @throws DAOException
   * @throws ServiceException
   */
  protected void findEdzSlxxAndUpdateSlztByNbsfzid(Long lNbsfzid,String strYxqxqsrq,
      String strSlzt, String strYwid) throws
      DAOException, ServiceException {
    if (lNbsfzid == null) {
      return;
    }
    try {
      /////////////////////////////////////////////////////////////////
      //根据Nbsfzid,从人口基本信息中得到Rkjbxxid
      /////////////////////////////////////////////////////////////////
      String strQryRynbid = "from PoHJXX_CZRKJBXXB where nbsfzid=" +
          lNbsfzid.toString();
      PojoInfo  dao = DAOFactory.createHJXX_CZRKJBXXBDAO();
      List lstpo =super.findAllByHQL(strQryRynbid);
      if (lstpo != null && !lstpo.isEmpty()) {
        PoHJXX_CZRKJBXXB po = (PoHJXX_CZRKJBXXB) lstpo.get(0);
        Long lRynbid = po.getRynbid();

        /////////////////////////////////////////////////////////////////
        //根据人员内部ID和受理状态，更新二代证受理信息中该人对应的受理状态
        /////////////////////////////////////////////////////////////////
        findEdzSlxxAndUpdateSlztByRynbid(lRynbid,strYxqxqsrq, strSlzt, strYwid);
      }
    }
    catch (ServiceException ex) {
      throw ex;
    }
    catch (DAOException ex) {
      throw ex;
    }

  }

  /**
   * 根据人员内部ID和受理状态，更新二代证受理信息中该人对应的受理状态
   * @param lRynbid - 人员内部ID
   * @param strSlzt - 受理状态
   * @throws DAOException
   * @throws ServiceException
   */
  protected void findEdzSlxxAndUpdateSlztByRynbid(Long lRynbid,String strYxqxqsrq, String strSlzt,
                                                  String strYwid) throws
      DAOException, ServiceException {
    if (lRynbid == null) {
      return;
    }

    //////////////////////////////////////////////////////////////////////////
    //IF 有受理信息 THEN 修改 受理状态
    //说明：根据Rynbid查找定位受理信息(在slxxDAO中加一个方法。)
    //根据条件查找该人的受理信息列表，并更新该受理状态
    StringBuffer strBufHQL = new StringBuffer();
    //modi by hh 20060314 增加过滤条件
    strBufHQL.append(
        "select ZJYW_SLXXB  from PoZJYW_SLXXB as ZJYW_SLXXB where  ")
        .append("ZJYW_SLXXB.rynbid =").append(lRynbid.toString())
        .append(" and ZJYW_SLXXB.slzt not in ('02','97') and ")
        .append(" ZJYW_SLXXB.yxqxqsrq ='").append(strYxqxqsrq.trim()).append("'");
    String strHQLWithParam = strBufHQL.toString();
    List lstSlxxPos = null;
    try {
      PojoInfo  zjyw_slxxbDAO = DAOFactory.createZJYW_SLXXBDAO();
      PojoInfo  zjls_sfzywczbDAO = DAOFactory.createZJLS_SFZYWCZBDAO();
      Long lZjywid = (Long) zjls_sfzywczbDAO.getId(); //另外重新生成ID

      lstSlxxPos =super.findAllByHQL(strHQLWithParam);
      if (lstSlxxPos != null && !lstSlxxPos.isEmpty()) {
        PoZJYW_SLXXB poZJYW_SLXXB = (PoZJYW_SLXXB) lstSlxxPos.get(0);
        poZJYW_SLXXB.setSlzt(strSlzt); //更改受理状态
       super.update(poZJYW_SLXXB); //更新数据库中证件状态
        //////////////////////////////////////////////////////////////////////////
        //add by kgb 2004-07-01
        //保存身份证业务操作信息
        saveSfzywlsXtrz(lZjywid, strYwid, poZJYW_SLXXB.getSlh(),
                        poZJYW_SLXXB.getSlzt());
      }
    }
    catch (DAOException ex) {
      throw ex;
    }
    catch (Exception ex) {
      throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER, ex);
    }

  }

  /**
   *
   * @param lNbsfzid
   * @param strBlbz
   * @throws DAOException
   * @throws ServiceException
   */
  protected void findYdzSlxxAndUpdateSlztByNbsfzid(Long lNbsfzid,
      String strBlbz) throws
      DAOException, ServiceException {
    if (lNbsfzid == null) {
      return;
    }

    try {
      //根据Nbsfzid,从人口基本信息中得到Rkjbxxid
      String strQryRynbid = "from PoHJXX_CZRKJBXXB where nbsfzid=" +
          lNbsfzid.toString();
      PojoInfo  dao = DAOFactory.createHJXX_CZRKJBXXBDAO();
      List lstpo =super.findAllByHQL(strQryRynbid);
      if (lstpo != null && !lstpo.isEmpty()) {
        PoHJXX_CZRKJBXXB po = (PoHJXX_CZRKJBXXB) lstpo.get(0);
        Long lRynbid = po.getRynbid();

        //////////////////////////////////////////////////////////////////
        //根据人员内部ID和受理状态，更新一代证受理信息中该人对应的办理标志
        //////////////////////////////////////////////////////////////////
        findYdzSlxxAndUpdateSlztByRynbid(lRynbid, strBlbz);
      }
    }
    catch (ServiceException ex) {
      throw ex;
    }
    catch (DAOException ex) {
      throw ex;
    }

  }

  /**
   *根据人员内部ID和受理状态，更新一代证受理信息中该人对应的办理标志
   * @param lRynbid  - 人员内部ID
   * @param strBlbz  - 办理标志
   * @throws DAOException
   * @throws ServiceException
   */
  protected void findYdzSlxxAndUpdateSlztByRynbid(Long lRynbid, String strBlbz) throws
      DAOException, ServiceException {
    if (lRynbid == null) {
      return;
    }

    //////////////////////////////////////////////////////////////////////////
    //IF 有受理信息 THEN 修改 受理状态
    //说明：根据Rynbid查找定位受理信息(在slxxDAO中加一个方法。)
    //根据条件查找该人的受理信息列表，并更新该受理状态
    StringBuffer strBufHQL = new StringBuffer();
    strBufHQL.append(
        "from PoZJYW_YDZSLB where rynbid=").append(lRynbid.toString());
    String strHQLWithParam = strBufHQL.toString();
    List lstSlxxPos = null;
    try {
      PojoInfo  zjyw_ydzslbDAO = DAOFactory.createZJYW_YDZSLBDAO();
      lstSlxxPos =super.findAllByHQL(strHQLWithParam);
      if (lstSlxxPos != null && !lstSlxxPos.isEmpty()) {
        PoZJYW_YDZSLB poZJYW_YDZSLB = (PoZJYW_YDZSLB) lstSlxxPos.get(0);
        poZJYW_YDZSLB.setBlbz(strBlbz); //更改受理状态
       super.update(poZJYW_YDZSLB); //更新数据库中证件状态
      }
    }
    catch (DAOException ex) {
      throw ex;
    }
    catch (Exception ex) {
      throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER, ex);
    }

  }

  /**
   * 受理号码生成规则:派出所代码+身份证受理日期+顺序号<每天零点置零，以00001为始>(22=9+8+5)22位组成
   * 双重检查保证同步调用的唯一性
   * @param lMlpnbid  - 门楼牌内部ID
   * @return
   * @throws ServiceException
   * @throws DAOException
   */
  protected static synchronized String assign2IDSlh(Long lMlpnbid) throws
      ServiceException,
      DAOException {
    String strSlh = null;
    //if (strSlh == null) { //第一重检查
    //synchronized (strSlh) { //同步处理，建议用ThreadLocal保护实现
    //if (strSlh == null) { //第二重检查
    try {
      PojoInfo  hjxx_mlpxxxxbDAO = DAOFactory.createHJXX_MLPXXXXBDAO(); //门楼牌信息表DAO
      PojoInfo  xt_xtkzcsbDAO = DAOFactory.createXT_XTKZCSBDAO(); //系统控制参数表DAO >> add by 闵红斌 2005/03/08 14:40
      PojoInfo  xt_slhxlbDAO = DAOFactory.createXT_SLHXLBDAO(); //受理号序列表DAO

      //Begin_得到证件受理号流水号前缀值 by 闵红斌 2005/03/08 14:40
      String kzz = null;
      String strHQL = null;
      strHQL = "from PoXT_XTKZCSB where kzlb='" +
          PublicConstant.XTKZCS_ZJSLHLSHQZZ + "' ";
      List lst =SpringContextHolder.getCommonService().queryAll(strHQL);
      if (lst != null && lst.size() > 0) {
        PoXT_XTKZCSB poXT_XTKZCSB = (PoXT_XTKZCSB) lst.get(0);
        kzz = poXT_XTKZCSB.getKzz().trim();
        if (kzz.length() > 4) {
          throw new ServiceException(WSErrCode.ERR_SERVICE_BUSSINESSLOGIC,
                                     "证件受理号流水号前缀值最大为9999，无法完成生成证件受理号。", null);
        }
      }
      kzz = (kzz != null ? kzz : "");
      //End_得到证件受理号流水号前缀值 by 闵红斌 2005/03/08 14:40

      ///////////////////////////////////////////////////////////////////////////////////////
      // 根据办理人的派出所代码和当天日期,从受理号序列表中得到顺序号
      // 如果XT_SLHXLB表中没有该派出所、该天的记录则初始化插入一条记录；否则修改该序列表记录+1并返回。
      ///////////////////////////////////////////////////////////////////////////////////////

      /////////////////////////////////////////////////////////////////////////////
      //1、从门楼牌信息PO中取得（办理人所在地址的派出所代码）
      ////////////////////////////////////////////////////////////////////////////
      PoHJXX_MLPXXXXB poHJXX_MLPXXXXB = SpringContextHolder.getCommonService().getByID(PoHJXX_MLPXXXXB.class, lMlpnbid);
      String strPcs = poHJXX_MLPXXXXB.getPcs();
      String strCurrDate = StringUtils.getServiceDate();

      ///////////////////////////////////////////////////////////////////////////
      //2、如果XT_SLHXLB中没有记录则初始化插入一条记录，否则更新受理序列号，并返回
      ////////////////////////////////////////////////////////////////////////////
      StringBuffer strBufHQL = new StringBuffer();
      strBufHQL.append(
          "select XT_SLHXLB from PoXT_SLHXLB as XT_SLHXLB where ")
          .append("XT_SLHXLB.dwdm = '").append(strPcs).append("' ")
          .append("and XT_SLHXLB.slrq ='").append(strCurrDate).append("' ");
      List lstpos =SpringContextHolder.getCommonService().queryAll(strBufHQL.toString());
      if (lstpos != null && !lstpos.isEmpty() && lstpos.size() > 0) { //1)有记录则更新并取出
        PoXT_SLHXLB poXT_SLHXLB = (PoXT_SLHXLB) lstpos.get(0); //得到受理序列表PO
        SpringContextHolder.getCommonService().refreshObject(poXT_SLHXLB, LockOptions.UPGRADE); //锁定修改该条记录
        int iSlxlid = Integer.parseInt(poXT_SLHXLB.getSlxlid().trim()); //得到当前最大的受理序列ID
        String strSlxlid = String.valueOf(++iSlxlid);
        poXT_SLHXLB.setSlxlid(strSlxlid); //更新受理序列ID
        SpringContextHolder.getCommonService().updateObject(poXT_SLHXLB); //更新受理序列表数据库
        String strAssignID = "00000".substring(0,
                                               5 -
                                               strSlxlid.length()).concat(
            strSlxlid);

        //Begin_闵红斌增加 by 2005/03/08 15:18:00
        if (!kzz.equals(strAssignID.substring(0, kzz.length()))) {
          //????要不要抛异常?
        }
        //End_闵红斌增加 by 2005/03/08 15:18:00

        strSlh = strPcs.concat(strCurrDate).concat(strAssignID);
      }
      else { //2)没有XT_SLHXLB记录插入一条
        String strSlxlid = kzz.concat("0000".substring(0, 4 - kzz.length())).
            concat("1"); //闵红斌增加 by 2005/03/08 15:18:00
        PoXT_SLHXLB poXT_SLHXLB = new PoXT_SLHXLB();
        poXT_SLHXLB.setDwdm(strPcs);
        poXT_SLHXLB.setSlrq(strCurrDate);
        poXT_SLHXLB.setSlxlid(strSlxlid);
        Long lXlid = (Long) xt_slhxlbDAO.getId();
        poXT_SLHXLB.setXlid(lXlid);
        SpringContextHolder.getCommonService().insertObject(poXT_SLHXLB); //插入系统受理号序列表
        strSlh = strPcs.concat(strCurrDate).concat(strSlxlid); //返回受理号
      }
    }
    catch (NumberFormatException ex) {
      throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER,
                                 "受理序列ID非数字，累计计算异常。",
                                 ex);
    }
    catch (ServiceException ex) {
      throw ex;
    }
    catch (DAOException ex) {
      throw ex;
    }
    //}
    //} //IF 第二重检查
    //} //IF 第一重检查
    return strSlh;
  }

  /**
   * 根据人员内部ID，查找返回身份地址VO
   * @param lRynbid    - 人员内部ID
   * @return           - 身份证住址VO
   * @throws ServiceException
   * @throws DAOException
   */
  private VoSfzZz findSfzZzByRynbid(Long lRynbid) throws ServiceException,
      DAOException {
    VoSfzZz vo = null;
    try {
      //创建调用的DAO
      PojoInfo  hjxx_mlpxxbDAO = DAOFactory.createHJXX_MLPXXXXBDAO();
      //根据rynbid得到门楼牌详细信息PO
      StringBuffer strBufHQL = new StringBuffer();
      strBufHQL.append(" select HJXX_MLPXXXXB ")
          .append(
          " from PoHJXX_CZRKJBXXB as HJXX_CZRKJBXXB,PoHJXX_MLPXXXXB as HJXX_MLPXXXXB ")
          .append(" where HJXX_CZRKJBXXB.mlpnbid = HJXX_MLPXXXXB.mlpnbid ")
          .append(" and HJXX_CZRKJBXXB.rynbid = '")
          .append(String.valueOf(lRynbid))
          .append("'");

      List lstPos =super.findAllByHQL(strBufHQL.toString());
      PoHJXX_MLPXXXXB poHJXX_MLPXXXXB = null;

      if (lstPos != null && !lstPos.isEmpty()) {
        poHJXX_MLPXXXXB = (PoHJXX_MLPXXXXB) lstPos.iterator().next();
      }

      //////////////////////////////////////////////////////////////////////
      //根据门楼牌PO组合详细信息
      //////////////////////////////////////////////////////////////////////
      if (poHJXX_MLPXXXXB != null) {
        vo = new VoSfzZz();
        PojoInfo  xt_xzqhbDAO = DAOFactory.createXT_XZQHBDAO();
        PojoInfo  xt_jlxxxbDAO = DAOFactory.createXT_JLXXXBDAO();
        PojoInfo  xt_xzjdxxbDAO = DAOFactory.createXT_XZJDXXBDAO();

        String strSsxqCode = poHJXX_MLPXXXXB.getSsxq(); //省市县区代码
        String strXzjdCode = poHJXX_MLPXXXXB.getXzjd(); //乡镇街道
        String strJlxCode = poHJXX_MLPXXXXB.getJlx(); //街路巷代码

        //add by kgb 2004-11-04
        PojoInfo  xt_jwhxxbDAO = DAOFactory.createXT_JWHXXBDAO();
        String strJwhCode = poHJXX_MLPXXXXB.getJcwh(); //居委会
        PoXT_JWHXXB poXT_JWHXXB  = super.get(PoXT_JWHXXB.class,
            strJwhCode);
        //居委会描述(备注字段)
        if (poXT_JWHXXB != null) {
          vo.setJwh_sm(poXT_JWHXXB.getBz() == null ? "" :
                       poXT_JWHXXB.getBz().trim());
        }

        //add by hh 20060301
        PojoInfo  xt_dwxxbDAO = DAOFactory.createXT_DWXXBDAO();
        String strPcsCode = poHJXX_MLPXXXXB.getPcs(); //派出所
        PoXT_DWXXB poXT_DWXXB  = super.get(PoXT_DWXXB.class,
            strPcsCode);
        //派出所描述(备注字段)
        vo.setPcs(strPcsCode);
        if (poXT_DWXXB != null) {
          vo.setPcs_sm(poXT_DWXXB.getBz() == null ? "" :
                       poXT_DWXXB.getBz().trim());
        }

        //查询代码对应的说明
        PoXT_XZQHB poXT_XZQHB  = super.get(PoXT_XZQHB.class,
            strSsxqCode);

        PoXT_XZJDXXB poXT_XZJDXXB  = super.get(PoXT_XZJDXXB.class,
            strXzjdCode);

        PoXT_JLXXXB poXT_JLXXXB  = super.get(PoXT_JLXXXB.class,
            strJlxCode);

        String strMlph = poHJXX_MLPXXXXB.getMlph();
        String strMlxz = poHJXX_MLPXXXXB.getMlxz();
        vo.setSsxq(strSsxqCode == null ? "" : strSsxqCode);
        vo.setXzjd(strXzjdCode == null ? "" : strXzjdCode);
        vo.setJlx(strJlxCode == null ? "" : strJlxCode);
        vo.setMlph(strMlph == null ? "" : strMlph);
        vo.setMlxz(strMlxz == null ? "" : strMlxz);

        //行政区划处理
        if (poXT_XZQHB != null) {
          vo.setSsxq_sm(poXT_XZQHB.getMc() == null ? "" :
                        poXT_XZQHB.getMc().trim());
        }

        //乡镇街道说明
        if (poXT_XZJDXXB != null) {
          //vo.setXzjd_sm(poXT_XZJDXXB.getMc() == null ? "" :
          //              poXT_XZJDXXB.getMc().trim());
          //edit by kgb 2004-11-04
          vo.setXzjd_sm(poXT_XZJDXXB.getBz() == null ? "" :
                        poXT_XZJDXXB.getBz().trim());
        }

        //街路巷处理
        if (poXT_JLXXXB != null) {
          vo.setJlx_sm(poXT_JLXXXB.getMc() == null ? "" :
                       poXT_JLXXXB.getMc().trim());
        }
      }
    }
    catch (DAOException ex) {
      throw ex;
    }
    return vo;
  }

  /**
   * 通过系统参数的地址拼装规则，解析数据库设置的参数
   * @param vozz     - 身份证住址VO
   * @param strRule  - 住址解析规则
   * @return         - 解析后的字符串数组（String[0]:取得的前部分数据 String[1]：剩下的未取出的部分数据）
   */
  private String[] parseZzByRule(VoSfzZz vozz, String strRule) {
    String[] arryZz = null;
    try {
      if (vozz != null && strRule != null) {
        int iLen = 0;
        String zz = "";
        //分离住址表达式和住址长度，如: [[mlph]][[mlxz]],80 分解成：Stirng zz=[[mlph]][[mlxz]] ,int zz_len=80
        int offset = strRule.indexOf(",");
        if (offset >= 0) {
          iLen = Integer.parseInt(strRule.substring(offset + 1, strRule.length()));
          zz = strRule.substring(0, offset);
        }

        //字符串替换
        //省市省区[[SSXQ]]
        zz = StringUtils.replace(zz, "[[SSXQ]]", vozz.getSsxq_sm());
        //乡镇街道[[XZJD]]
        zz = StringUtils.replace(zz, "[[XZJD]]", vozz.getXzjd_sm());
        //街路巷[[JLX]]
        zz = StringUtils.replace(zz, "[[JLX]]", vozz.getJlx_sm());
        //居委会
        zz = StringUtils.replace(zz, "[[JWH]]", vozz.getJwh_sm());
        //门楼牌号[[MLPH]]
        zz = StringUtils.replace(zz, "[[MLPH]]", vozz.getMlph());
        //门楼详址[[MLXZ]]
        zz = StringUtils.replace(zz, "[[MLXZ]]", vozz.getMlxz());
        //派出所[[PCS]]
        zz = StringUtils.replace(zz, "[[PCS]]", vozz.getPcs_sm());

        ////////////////////////////////////////////////////////////////////////
        // 返回地址的规则值
        ////////////////////////////////////////////////////////////////////////
        arryZz = new String[2];
        iLen = iLen >= zz.length() ? zz.length() : iLen; //长度控制
        if (iLen == 0) { //0，代表取回所有数据
          arryZz[0] = zz;
          arryZz[1] = "";
        }
        else { //否则，分两段取
          arryZz[0] = zz.substring(0, iLen);
          arryZz[1] = zz.substring(iLen, zz.length());
        }
      }
    }
    catch (ServiceException ex) {
      throw ex;
    }
    catch (DAOException ex) {
      throw ex;
    }
    catch (Exception ex) {
      throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER, ex);
    }
    return arryZz;
  }

  /**
   * 组合身份证详细地址
   * @param lRynbid  - 人员内部ID
   * @return         - 返回组合的身份证住址字符串
   * @throws ServiceException
   * @throws DAOException
   */
  protected String joinSfzZz(Long lRynbid) throws ServiceException,
      DAOException {
    String strSfzZz = "";
    try {
      VoSfzZz vo = findSfzZzByRynbid(lRynbid); //查找身份证明地址VO
      StringBuffer strBuf = new StringBuffer(); //组合

      if (vo != null) {
        //modify by kgb 2004-06-01
        //////////////////////////////////////////////////////////////////
        //1、默认规则：返回组合字符串
        /////////////////////////////////////////////////////////////////
        strBuf.append(vo.getSsxq_sm())
            .append(vo.getXzjd_sm())
            .append(vo.getJlx_sm())
            .append(vo.getMlph())
            .append(vo.getMlxz());
        strSfzZz = strBuf.toString();

        //////////////////////////////////////////////////////////////////
        //2、系统参数表设定的规则：返回组合字符串？？？
        //////////////////////////////////////////////////////////////////
        VoXT_XTCSB voxtcs = getXtcsAsVo(PublicConstant.XTKZCS_DZPZFS,
                                        PublicConstant.XTKZCS_DZPZFS_EDZSLXX);
        if (voxtcs != null && voxtcs.getZwpy() != null &&
            !voxtcs.getZwpy().equals("")) {
          String[] arryZz = parseZzByRule(vo, voxtcs.getZwpy());
          strSfzZz = arryZz[0];
        }

      }
    }
    catch (DAOException ex) {
      throw ex;
    }
    catch (ServiceException ex) {
      throw ex;
    }
    return strSfzZz;
  }

  /**
   * 拆分身份证详细地址
   * @param lRynbid    - 人员内部ID
   * @return           - 返回拆分的住址数组（1、2、3）
   * @throws ServiceException
   * @throws DAOException
   */
  protected String[] splitSfzZz(Long lRynbid) throws ServiceException,
      DAOException {
    String[] arryStrSfzZzs = new String[3];
    try {
      VoSfzZz vo = findSfzZzByRynbid(lRynbid); //查找身份证明地址VO
      if (vo != null) {
        //modify by kgb 2004-06-01
        ////////////////////////////////////////////////////////////
        //1、默认规则：返回拆分的字符串
        ////////////////////////////////////////////////////////////
        arryStrSfzZzs[0] = vo.getSsxq_sm(); //省市县区
        arryStrSfzZzs[1] = vo.getXzjd_sm().concat(vo.getJlx_sm()); //乡镇街道+街路巷
        arryStrSfzZzs[2] = vo.getMlph().concat(vo.getMlxz()); //门楼牌号+门楼详址

        ///////////////////////////////////////////////////////////
        //2、系统参数表设定的规则：返回拆分的字符串
        ////////////////////////////////////////////////////////////
        VoXT_XTCSB voxtcs = getXtcsAsVo(PublicConstant.XTKZCS_DZPZFS,
                                        PublicConstant.XTKZCS_DZPZFS_YDZSLXX);
        if (voxtcs != null && voxtcs.getKzbzb() != null && voxtcs.getKzbzc() != null &&
            voxtcs.getKzbzd() != null) {
          String[] arryZz1 = parseZzByRule(vo, voxtcs.getKzbzb());
          String[] arryZz2 = parseZzByRule(vo, voxtcs.getKzbzc());
          String[] arryZz3 = parseZzByRule(vo, voxtcs.getKzbzd());
          arryStrSfzZzs[0] = arryZz1[0]; //地址1
          arryStrSfzZzs[1] = arryZz1[1].equals("") ? arryZz2[0] :
              arryZz1[1].concat(arryZz2[0]); //地址2
          arryStrSfzZzs[2] = arryZz2[1].equals("") ? arryZz3[0] :
              arryZz2[1].concat(arryZz3[0]); //地址3
        }

      }
      //throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER,
      //                         "地址拼装方式没有设置,拆分地址失败。", null);
    }
    catch (DAOException ex) {
      throw ex;
    }
    catch (ServiceException ex) {
      throw ex;
    }
    return arryStrSfzZzs;
  }

  /**
   * 执行查询模板，通用查询;为子类视图查询服务
   * @param strHQL  - 查询的HQL语句
   * @param vopage  - 分页信息VO
   * @param poView  - 查询视图CLASS
   * @return        - 查询返回结果VO
   * @throws ServiceException
   * @throws DAOException
   */
  protected VoQueryResult executeQuery(String strHQL, VoPage vopage,
                                       Class poView, String strYwid) throws
      ServiceException, DAOException {
    VoQueryResult voQryResult = new VoQueryResult();
    try {
      ///////////////////////////////////////////////////////////////
      //1、判断传入的参数vopage
      ///////////////////////////////////////////////////////////////
      int iPageOffset = vopage.getPageindex();
      int iPageSize = vopage.getPagesize();
      long iRecordCount = vopage.getRecordcount();
      String strPoViewClassName = poView.getName();

      //创建组织HQL的Buffer
      StringBuffer strBufHQLFromWhere = new StringBuffer();

      ////////////////////////////////////////////////////////////////
      //2、组织select语句部分
      ///////////////////////////////////////////////////////////////
      String strHQLSelectCount = " select count(*) ";
      String strHQLSelect = " select poview ";
      /////////////////////////////////////////////////////////////////

      ////////////////////////////////////////////////////////////////
      //3、组织from * where *语句部分
      ////////////////////////////////////////////////////////////////
      strBufHQLFromWhere.append(" from ").append(strPoViewClassName).
          append(" as poview  where 1=1 ");

      //开始事务

      /////////////////////////////////////////////////////////////
      //数据范围？？？
      //////////////////////////////////////////////////////////////S
      //add by kgb 2004-05-25
      String strDataRange = queryDataRange(strYwid);
      if (strDataRange != null && !strDataRange.trim().equals("")) {
        strBufHQLFromWhere.append(" and ");
        strBufHQLFromWhere.append(strDataRange);
      }
      /////////////////////////////////////////////////////////////////

      //组合传入的条件限制语句
      if (strHQL != null && !strHQL.trim().equals("")) {
        strBufHQLFromWhere.append(" and ");
        strBufHQLFromWhere.append(strHQL);
      }
      //////////////////////////////////////////////////////////////////
      //4、调用DAO查询
      //////////////////////////////////////////////////////////////////
      //创建调用的DAO
      DefaultDAO dao = new DefaultDAO();

      //String hql = "from PoZJYW_SLXXB a where exists(select b.jmsfzslh from ViewZw b where a.slh=b.jmsfzslh)";
      //List list =super.getPageRecords(hql,1,10);

      List lstPos = null;
      long lCount = iRecordCount;
      String strHQLAll = strHQLSelect.concat(strBufHQLFromWhere.toString());
      //_log.info("视图ClassName=" + strPoViewClassName + "信息查询HQL=" + strHQLAll);
      //查询返回一页记录
      lstPos =super.getPageRecords(strHQLAll, new Object[]{}, iPageOffset,
                                       iPageSize).getList();

      //如果传入的记录数为-1，则要查询返回总记录数
      if (iRecordCount == -1) {
        strHQLAll = strHQLSelectCount.concat(strBufHQLFromWhere.toString());
        lCount  = super.getCount(strHQLAll);
      }
      //提交事务
      /////////////////////////////////////////////////////////////////
      //5、返回值初始化
      /////////////////////////////////////////////////////////////////
      voQryResult.setPagelist(lstPos);
      voQryResult.setVotype(poView);
      voQryResult.setRecordcount(lCount);
    }
    catch (DAOException ex) {
      //回滚事务
      throw ex;
    }
    catch (ServiceException ex) {
      throw ex;
    }
    return voQryResult;
  }

  /**
   *
   * @param strYwid  - 业务功能点ID
   * @return         - 组合的数据范围HQL语句
   * @throws DAOException
   * @throws ServiceException
   */
  protected String queryDataRange(String strYwid) throws DAOException,
      ServiceException {
    String strDataRange = "";
    try {
      List lstDataRange = XtywqxServiceImpl.SelectDataRange(String.valueOf(
          getUserInfo().getYhid()), strYwid);
      if (lstDataRange != null && !lstDataRange.isEmpty()) {
        StringBuffer strBufDataRange = new StringBuffer();
        //遍历所有的数据范围记录集合，组合成HQL语句
        for (int i = 0; i < lstDataRange.size(); i++) {
          VoXtsjfw vo = (VoXtsjfw) lstDataRange.get(i);
          //如果是所有数据范围的话，将有所有权限
          /*
                     if (vo.getSjfwbz() != null &&
              vo.getSjfwbz().equalsIgnoreCase(PublicConstant.XT_QX_ALL)) {
            //strDataRange = "";
            //break;
            return "";
                     }
           */
          String strSjfwbz = vo.getSjfwbz() == null ? "" : vo.getSjfwbz().trim();
          String strSjfw = vo.getSjfw() == null ? "" : vo.getSjfw().trim();
          String strBufCheck = strBufDataRange.toString().trim();
          //如果是省市县（区）
          if (PublicConstant.XT_QX_XZQH.equalsIgnoreCase(strSjfwbz)) {
            if (!strBufCheck.equals("")) {
              strBufDataRange.append(" or ");
            }
            strBufDataRange.append(" ssxq ='").append(strSjfw).append("' ");
          }
          //派出所
          else if (PublicConstant.XT_QX_PCS.equalsIgnoreCase(strSjfwbz)) {
            if (!strBufCheck.equals("")) {
              strBufDataRange.append(" or ");
            }
            strBufDataRange.append(" pcs='").append(strSjfw).append("' ");
          }
          //居（村）委会
          else if (PublicConstant.XT_QX_JWH.equalsIgnoreCase(strSjfwbz)) {
            if (!strBufCheck.equals("")) {
              strBufDataRange.append(" or ");
            }
            strBufDataRange.append(" jcwh='").append(strSjfw).append("' ");
          }
          //其他情况,不处理
          else {
          }
        }
        //得到组合的数据
        strDataRange = strBufDataRange.toString().trim();
        if (!strBufDataRange.toString().trim().equals("")) {
          strDataRange = "(".concat(strDataRange).concat(")");
        }
      }
    }
    catch (DAOException ex) {
      throw ex;
    }
    catch (ServiceException ex) {
      throw ex;
    }
    return strDataRange;
  }

  /**
   * 业务提交，数据范围判断
   * @param strYwid - 业务功能点ID
   * @param lRynbid - 人员内部ID
   * @return        - 判断操作用户是否有该人的数据范围权限
   * @throws ServiceException
   * @throws DAOException
   */
  protected boolean VerifyDataRangeByRynbid(String strYwid, Long lRynbid) throws
      ServiceException, DAOException {
    boolean bRet = false;
    if (lRynbid == null) {
      throw new ServiceException(WSErrCode.ERR_SERVICE_DATASCOPE,
                                 "业务数据范围判断时，人员内部ID为空！", null);
    }
    try {
      PojoInfo  dao = DAOFactory.createHJXX_CZRKJBXXBDAO();
      PoHJXX_CZRKJBXXB po  = super.get(PoHJXX_CZRKJBXXB.class,lRynbid);
      if (po != null) {
        Long lMlpnbid = po.getMlpnbid();
        bRet = VerifyDataRangeByMlpnbid(strYwid, lMlpnbid);
      }
      else if (po == null){
        PojoInfo  dao_old = DAOFactory.createOLD_HJXX_CZRKJBXXBDAO();
        PoOLD_HJXX_CZRKJBXXB po_old = super.get(PoOLD_HJXX_CZRKJBXXB.class, lRynbid);
        if (po_old != null) {
          Long lMlpnbid = po_old.getMlpnbid();
          bRet = VerifyDataRangeByMlpnbid(strYwid, lMlpnbid);
        }
      }
    }
    catch (ServiceException ex) {
      throw ex;
    }
    catch (DAOException ex) {
      throw ex;
    }
    return bRet;
  }

  /**
   * 业务提交，数据范围判断
   * @param strYwid   - 业务功能ID
   * @param lMlpnbid  - 门楼牌内部ID
   * @return
   * @throws ServiceException
   * @throws DAOException
   */
  protected boolean VerifyDataRangeByMlpnbid(String strYwid, Long lMlpnbid) throws
      ServiceException, DAOException {
    boolean bRet = false;
    if (lMlpnbid == null) {
      throw new ServiceException(WSErrCode.ERR_SERVICE_DATASCOPE,
                                 "业务数据范围判断时，门楼牌内部ID为空！", null);
    }
    try {
      ///////////////////////////////////////////////////////////////
      //创建DAO
      ////////////////////////////////////////////////////////////////
      PojoInfo  dao = DAOFactory.createHJXX_MLPXXXXBDAO();
      PoHJXX_MLPXXXXB po  = super.get(PoHJXX_MLPXXXXB.class,lMlpnbid);
      String strJcwh = po == null ? null : po.getJcwh();
      ///////////////////////////////////////////////////////////////
      //组织参数
      //////////////////////////////////////////////////////////////
      VoXtsjfw vo = new VoXtsjfw();
      vo.setSjfwbz(PublicConstant.XT_QX_JWH);
      vo.setSjfw(strJcwh);
      List lstSjfw = new ArrayList();
      lstSjfw.add(vo);
      //////////////////////////////////////////////////////////////////
      //调用接口
      //////////////////////////////////////////////////////////////////
      bRet = XtywqxServiceImpl.VerifyDataRange(String.valueOf(getUserInfo().
          getYhid()), strYwid, lstSjfw);
    }
    catch (ServiceException ex) {
      throw ex;
    }
    catch (DAOException ex) {
      throw ex;
    }
    return bRet;
  }

  /**
   * 身份证住址VO内部类
   * <p>Title: Hz2004</p>
   * <p>Description: 常住人口管理系统Hz2004版</p>
   * <p>Copyright: Copyright (c) 2004</p>
   * <p>Company: 浙江金铖华元新技术有限公司</p>
   * @author kgb_hz@126.com,kgb@primetech.com.cn
   * @version 1.0
   */
  private class VoSfzZz
      implements VO {
    private String ssxq = "";
    private String ssxq_sm = "";
    private String xzjd = "";
    private String xzjd_sm = "";
    private String jlx = "";
    private String jlx_sm = "";
    //add by kgb 2004-11-04
    private String jwh = "";
    private String jwh_sm = "";
    //add by hh 20060301
    private String pcs = "";
    private String pcs_sm = "";

    private String mlph = "";
    private String mlxz = "";
    public String getJlx() {
      return jlx;
    }

    public String getJlx_sm() {
      return jlx_sm;
    }

    public String getMlph() {
      return mlph;
    }

    public String getMlxz() {
      return mlxz;
    }

    public String getSsxq() {
      return ssxq;
    }

    public String getSsxq_sm() {
      return ssxq_sm;
    }

    public String getXzjd() {
      return this.xzjd;
    }

    public String getXzjd_sm() {
      return this.xzjd_sm;
    }

    public void setSsxq_sm(String ssxq_sm) {
      this.ssxq_sm = ssxq_sm;
    }

    public void setSsxq(String ssxq) {
      this.ssxq = ssxq;
    }

    public void setMlxz(String mlxz) {
      this.mlxz = mlxz;
    }

    public void setMlph(String mlph) {
      this.mlph = mlph;
    }

    public void setJlx_sm(String jlx_sm) {
      this.jlx_sm = jlx_sm;
    }

    public void setJlx(String jlx) {
      this.jlx = jlx;
    }

    public void setXzjd_sm(String strXzjd_sm) {
      this.xzjd_sm = strXzjd_sm;
    }

    public void setXzjd(String strXzjd) {
      this.xzjd = strXzjd;
    }

    public void setJwh(String value) {
      this.jwh = value;
    }

    public String getJwh() {
      return this.jwh;
    }

    public void setJwh_sm(String value) {
      this.jwh_sm = value;
    }

    public String getJwh_sm() {
      return this.jwh_sm;
    }

    public void setPcs(String value) {
      this.pcs = value;
    }

    public String getPcs() {
      return this.pcs;
    }
    public void setPcs_sm(String value) {
      this.pcs_sm = value;
    }

    public String getPcs_sm() {
      return this.pcs_sm;
    }

  }

  /**
   * 根据公民身份号码和受理状态，更新二代证受理信息中该人对应的受理状态
   * @param lGmsfhm - 公民身份号码
   * @param strSlzt - 受理状态
   * @throws DAOException
   * @throws ServiceException
   */
  protected void findEdzSlxxAndUpdateSlztByGmsfhm(String lGmsfhm,
                                                  String strYxqxqsrq,
                                                  String strSlzt,
                                                  String strYwid) throws
      DAOException, ServiceException {
    if (lGmsfhm == null) {
      return;
    }

    //////////////////////////////////////////////////////////////////////////
    //IF 有受理信息 THEN 修改 受理状态
    //说明：根据Gmsfhm查找定位受理信息(在slxxDAO中加一个方法。)
    //根据条件查找该人的受理信息列表，并更新该受理状态
    StringBuffer strBufHQL = new StringBuffer();
    //增加过滤条件
    strBufHQL.append(
        "select ZJYW_SLXXB  from PoZJYW_SLXXB as ZJYW_SLXXB where  ")
        .append("ZJYW_SLXXB.gmsfhm ='").append(lGmsfhm.toString())
        .append("' and ZJYW_SLXXB.slzt not in ('02','97','98') and ")
        .append(" ZJYW_SLXXB.yxqxqsrq ='").append(strYxqxqsrq.trim()).append(
        "'");
    String strHQLWithParam = strBufHQL.toString();
    List lstSlxxPos = null;
    try {
      PojoInfo  zjyw_slxxbDAO = DAOFactory.createZJYW_SLXXBDAO();
      PojoInfo  zjls_sfzywczbDAO = DAOFactory.createZJLS_SFZYWCZBDAO();
      Long lZjywid = (Long) zjls_sfzywczbDAO.getId(); //另外重新生成ID

      lstSlxxPos =super.findAllByHQL(strHQLWithParam);
      if (lstSlxxPos != null && !lstSlxxPos.isEmpty()) {
        if (lstSlxxPos.size() > 1) {
          //查到2条以上的身份证受理信息，异常抛出。
          throw new ServiceException(WSErrCode.ERR_SERVICE_DATASCOPE,
                                     "身份证条件异常，查到2条以上证件受理信息。", null);
        }
        PoZJYW_SLXXB poZJYW_SLXXB = (PoZJYW_SLXXB) lstSlxxPos.get(0);
        poZJYW_SLXXB.setSlzt(strSlzt); //更改受理状态
       super.update(poZJYW_SLXXB); //更新数据库中证件状态
        //////////////////////////////////////////////////////////////////////////
        //保存身份证业务操作信息
        saveSfzywlsXtrz(lZjywid, strYwid, poZJYW_SLXXB.getSlh(),
                        poZJYW_SLXXB.getSlzt());
      }
    }
    catch (DAOException ex) {
      throw ex;
    }
//    catch (Exception ex) {
//      throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER, ex);
//    }

  }


}
