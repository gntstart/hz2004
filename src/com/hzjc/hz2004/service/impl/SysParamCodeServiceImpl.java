/* Generated by Together */

package com.hzjc.hz2004.service.impl;

import com.hzjc.hz2004.service.SysParamCodeService;
import com.hzjc.hz2004.dao.*;
import com.hzjc.wsstruts.exception.*;
import com.hzjc.hz2004.po.*;
import com.hzjc.hz2004.vo.*;
import java.util.*;
import org.apache.commons.logging.*;
import org.springframework.stereotype.Service;

//new 2006
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Connection;
//

/**
 *
 * <p>Title: Hz2004</p>
 * <p>Description: 常住人口二代证Hz2004版</p>
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Company: HZJC</p>
 * @author Kansan Ku(kgb_hz@126.com)
 * @version 1.0
 */
@Service(value = "sysParamCodeService")
public class SysParamCodeServiceImpl
    extends Hz2004BaseService

    implements SysParamCodeService {

  //日志处理
  protected static Log _log = LogFactory.getLog(SysParamCodeServiceImpl.class);

  /**
   * 得到所有的系统参数表（包括国标参数表）
   * @return
   */
  public Map loadAllXt_xtcss() throws ServiceException, DAOException {
    Map mapXtcs = null;
    try {
      ///////////////////////////////////////////////////////////////////
      //开始事务
      //////////////////////////////////////////////////////////////////
      PojoInfo  xt_xtcsbDAO = DAOFactory.createXT_XTCSBDAO();
      ////////////////////////////////////////////////////////////////////
      //得到系统参数表中所有的参数类别列表集合
      ///////////////////////////////////////////////////////////
      String strAllXtcslb =
          " select XT_XTCSB from PoXT_XTCSB as XT_XTCSB where XT_XTCSB.cslb='9999' ";
      List lstCslbPos =super.findAllByHQL(strAllXtcslb);
      ////////////////////////////////////////////////////////////////
      //得到所有系统参数记录集
      //////////////////////////////////////////////////////////////
      List lstpos =super.findAllByHQL("from " + xt_xtcsbDAO.getEntityType().getSimpleName());
      //////////////////////////////////////////////////////////////
      //提交事务
      //////////////////////////////////////////////////////////////
      ///////////////////////////////////////////////////////////////

      ///////////////////////////////////////////////////////////////
      //初始化系统所有参数的散列
      ///////////////////////////////////////////////////////////////
      if (lstCslbPos != null && !lstCslbPos.isEmpty()) {
        //创建所有的代码类别Map
        mapXtcs = new TreeMap();
        for (int i = 0; i < lstCslbPos.size(); i++) {
          PoXT_XTCSB po = (PoXT_XTCSB) lstCslbPos.get(i);
          //////////////////////////////////////////////////////
          //
          Map mapCslb = new TreeMap();
          VoXT_XTCSB vo = new VoXT_XTCSB(po.getDm(), "", "");
          mapCslb.put("", vo);
          mapXtcs.put(po.getDm(), mapCslb);
        }

        /////////////////////////////////////////////////////////////////
        //遍历所有数据并放入Map中
        for (int i = 0; i < lstpos.size(); i++) {
          PoXT_XTCSB po = (PoXT_XTCSB) lstpos.get(i);
          VoXT_XTCSB vo = new VoXT_XTCSB(po);
          //得到相应的Map并将该记录VO对象Put进去
          if (mapXtcs.get(vo.getCslb()) != null) {
            ( (Map) mapXtcs.get(vo.getCslb())).put(vo.getDm(), vo);
          }
          //////////////////////////////////////////////////////////
        }
        //_log.info("系统参数表中参数类别总数：" + String.valueOf(mapXtcs.size()));
        //_log.info("系统参数表中的所有记录总数：" + String.valueOf(lstpos.size()));
      }

    }
    catch (DAOException ex) {
      throw ex;
    }
    return mapXtcs;
  }

  /**
   * 得到所有的系统控制参数散列表
   * @return
   */
  public Map loadAllXt_xtkzcss() throws ServiceException, DAOException {
    Map mapvo = null;
    try {
      ///////////////////////////////////////////////////////////////
      //开始事务
      /////////////////////////////////////////////////////////////
      PojoInfo  xt_xtkzcsbDAO = DAOFactory.createXT_XTKZCSBDAO();
      ////////////////////////////////////////////////////////////////
      //查询所有系统控制参数数据
      ////////////////////////////////////////////////////////////
      List lstPos =super.getObjectListByHql("from " + xt_xtkzcsbDAO.getEntityType().getSimpleName());
      ////////////////////////////////////////////////////////////////
      //提交事务
      ////////////////////////////////////////////////////////////////
      /////////////////////////////////////////////////////////////////
      //遍历并填充所有数据
      ////////////////////////////////////////////////////////////////
      if (lstPos != null && !lstPos.isEmpty()) {
        mapvo = new TreeMap();
        for (int i = 0; i < lstPos.size(); i++) {
          PoXT_XTKZCSB po = (PoXT_XTKZCSB) lstPos.get(i);
          VoXT_XTKZCSB vo = new VoXT_XTKZCSB(po);
          //将所有系统控制参数放入Map中
          //其中key=VoXT_XTKZCSB.getKzlb value = VoXT_XTKZCSB
          mapvo.put(vo.getKzlb(), vo);
        }
        //_log.info("系统控制参数表XT_XTKZCSB中记录总数：" + String.valueOf(mapvo.size()));
      }
    }
    catch (DAOException ex) {
      throw ex;
    }
    return mapvo;
  }

  /**
   * 返回所有数据字典定义散列表
   * @return
   */
  public Map loadAllXt_sjzds() throws ServiceException, DAOException {
    Map mapvo = null;
    try {
      /////////////////////////////////////////////////////////////////
      //开始事务
      ////////////////////////////////////////////////////////////////
      PojoInfo  xt_sjzdbDAO = DAOFactory.createXT_SJZDBDAO();
      /////////////////////////////////////////////////////////////////
      //查询所有数据字典表数据
      ////////////////////////////////////////////////////////////////
      List lstPo =super.findAllByHQL("from " + xt_sjzdbDAO.getEntityType().getSimpleName());
      /////////////////////////////////////////////////////////////////
      //提交事务
      /////////////////////////////////////////////////////////////////////
      ////////////////////////////////////////////////////////////////////////
      //遍历并填充数据
      /////////////////////////////////////////////////////////////////////
      if (lstPo != null && !lstPo.isEmpty()) {
        mapvo = new TreeMap();
        for (Iterator iter = lstPo.iterator(); iter.hasNext(); ) {
          PoXT_SJZDB po = (PoXT_SJZDB) iter.next();
          VoXT_SJZDB vo = new VoXT_SJZDB(po);
          //将数据字典的每行记录放入Map中，key=VoXT_SJZDB.zdmc value = VoXT_SJZDB
          mapvo.put(vo.getZdmc().trim().toLowerCase(), vo);
        }
        //_log.info("系统数据字典中所有字段总数：" + String.valueOf(mapvo.size()));
      }
    }
    catch (DAOException ex) {
      throw ex;
    }
    return mapvo;
  }

  /**
   * 加载乡镇街道信息
   * @return
   * @throws ServiceException
   * @throws DAOException
   */
  public Map loadAllXt_xzjdxxbs() throws ServiceException, DAOException {
    Map mapKeyValue = null;
    try {
      PojoInfo  dao = DAOFactory.createXT_XZJDXXBDAO();
      List lstPo =super.findAllByHQL("from " + dao.getEntityType().getSimpleName());
      ////////////////////////////////////////////////////////////////////////
      //遍历并填充数据
      /////////////////////////////////////////////////////////////////////
      if (lstPo != null && !lstPo.isEmpty()) {
        mapKeyValue = new TreeMap();
        mapKeyValue.put("", "");
        for (Iterator iter = lstPo.iterator(); iter.hasNext(); ) {
          PoXT_XZJDXXB po = (PoXT_XZJDXXB) iter.next();
          mapKeyValue.put(po.getDm(), po.getMc());
        }
        //_log.info("系统乡镇街道信息总数：" + String.valueOf(mapKeyValue.size()));
      }
    }
    catch (DAOException ex) {
      throw ex;
    }
    return mapKeyValue;
  }

  /**
   * 加载行政区划信息
   * @return
   * @throws ServiceException
   * @throws DAOException
   */
  public Map loadAllXt_xzqhbs() throws ServiceException, DAOException {
    Map mapKeyValue = null;
    try {
      PojoInfo  dao = DAOFactory.createXT_XZQHBDAO();
      List lstPo =super.findAllByHQL("from " + dao.getEntityType().getSimpleName());
      ////////////////////////////////////////////////////////////////////////
      //遍历并填充数据
      /////////////////////////////////////////////////////////////////////
      if (lstPo != null && !lstPo.isEmpty()) {
        mapKeyValue = new TreeMap();
        mapKeyValue.put("", "");
        for (Iterator iter = lstPo.iterator(); iter.hasNext(); ) {
          PoXT_XZQHB po = (PoXT_XZQHB) iter.next();
          mapKeyValue.put(po.getDm(), po.getMc());
        }
        //_log.info("系统行政区划总数：" + String.valueOf(mapKeyValue.size()));
      }
    }
    catch (DAOException ex) {
      throw ex;
    }
    return mapKeyValue;
  }

  /**
   * 加载警务责任区信息
   * @return
   * @throws ServiceException
   * @throws DAOException
   */
  public Map loadAllXt_jwzrqxxbs() throws ServiceException, DAOException {
    Map mapKeyValue = null;
    try {
      PojoInfo  dao = DAOFactory.createXT_JWZRQXXBDAO();
      List lstPo =super.findAllByHQL("from " + dao.getEntityType().getSimpleName());
      ////////////////////////////////////////////////////////////////////////
      //遍历并填充数据
      /////////////////////////////////////////////////////////////////////
      if (lstPo != null && !lstPo.isEmpty()) {
        mapKeyValue = new TreeMap();
        mapKeyValue.put("", "");
        for (Iterator iter = lstPo.iterator(); iter.hasNext(); ) {
          PoXT_JWZRQXXB po = (PoXT_JWZRQXXB) iter.next();
          mapKeyValue.put(po.getDm(), po.getMc());
        }
        //_log.info("系统警务责任区总数：" + String.valueOf(mapKeyValue.size()));
      }
    }
    catch (DAOException ex) {
      throw ex;
    }
    return mapKeyValue;
  }

  /**
   * 加载居委会信息表
   * @return
   * @throws ServiceException
   * @throws DAOException
   */
  public Map loadAllXt_jwhxxbs() throws ServiceException, DAOException {
    Map mapKeyValue = null;
    try {
      PojoInfo  dao = DAOFactory.createXT_JWHXXBDAO();
      List lstPo =super.findAllByHQL("from " + dao.getEntityType().getSimpleName());
      ////////////////////////////////////////////////////////////////////////
      //遍历并填充数据
      /////////////////////////////////////////////////////////////////////
      if (lstPo != null && !lstPo.isEmpty()) {
        mapKeyValue = new TreeMap();
        mapKeyValue.put("", "");
        for (Iterator iter = lstPo.iterator(); iter.hasNext(); ) {
          PoXT_JWHXXB po = (PoXT_JWHXXB) iter.next();
          mapKeyValue.put(po.getDm(), po.getMc());
        }
        //_log.info("系统居委会信息总数：" + String.valueOf(mapKeyValue.size()));
      }
    }
    catch (DAOException ex) {
      throw ex;
    }
    return mapKeyValue;
  }

  /**
   * 加载街路巷信息表
   * @return
   * @throws ServiceException
   * @throws DAOException
   */
  public Map loadAllXt_jlxxxbs() throws ServiceException, DAOException {
    Map mapKeyValue = null;
    try {
      PojoInfo  dao = DAOFactory.createXT_JLXXXBDAO();
      List lstPo =super.findAllByHQL("from " + dao.getEntityType().getSimpleName());
      ////////////////////////////////////////////////////////////////////////
      //遍历并填充数据
      /////////////////////////////////////////////////////////////////////
      if (lstPo != null && !lstPo.isEmpty()) {
        mapKeyValue = new TreeMap();
        mapKeyValue.put("", "");
        for (Iterator iter = lstPo.iterator(); iter.hasNext(); ) {
          PoXT_JLXXXB po = (PoXT_JLXXXB) iter.next();
          mapKeyValue.put(po.getDm(), po.getMc());
        }
        //_log.info("系统街路巷信息总数：" + String.valueOf(mapKeyValue.size()));
      }
    }
    catch (DAOException ex) {
      throw ex;
    }
    return mapKeyValue;
  }

  /**
   * 加载所有单位代码
   * @return
   * @throws ServiceException
   * @throws DAOException
   */
  public Map loadAllXt_dwxxbs() throws ServiceException, DAOException {
    Map mapKeyValue = null;
    try {
      PojoInfo  xt_dwxxbDAO = DAOFactory.createXT_DWXXBDAO();
      List lstPo =super.findAllByHQL("from " + xt_dwxxbDAO.getEntityType().getSimpleName());
      ////////////////////////////////////////////////////////////////////////
      //遍历并填充数据
      /////////////////////////////////////////////////////////////////////
      if (lstPo != null && !lstPo.isEmpty()) {
        mapKeyValue = new TreeMap();
        mapKeyValue.put("", "");
        for (Iterator iter = lstPo.iterator(); iter.hasNext(); ) {
          PoXT_DWXXB po = (PoXT_DWXXB) iter.next();
          mapKeyValue.put(po.getDm(), po.getMc());
        }
        //_log.info("系统单位代码信息总数：" + String.valueOf(mapKeyValue.size()));
      }
    }
    catch (DAOException ex) {
      throw ex;
    }
    return mapKeyValue;

  }

  /**
   * 加载所有用户信息
   * @return
   * @throws <{ServiceException}>
   * @throws <{DAOException}>
   */
  public Map loadAllXt_yhxxbs() throws ServiceException, DAOException {
      Map mapKeyValue = null;
      try {
          PojoInfo  xt_yhxxbdao = DAOFactory.createXT_YHXXBDAO();
          List lstPo =super.findAllByHQL("from " + xt_yhxxbdao.getEntityType().getSimpleName());

          ////////////////////////////////////////////////////////////////////////
          //遍历并填充数据
          /////////////////////////////////////////////////////////////////////
          if (lstPo != null && !lstPo.isEmpty()) {
            mapKeyValue = new TreeMap();
            mapKeyValue.put("", "");
            for (Iterator iter = lstPo.iterator(); iter.hasNext(); ) {
              PoXT_YHXXB po = (PoXT_YHXXB) iter.next();
              mapKeyValue.put(po.getYhid().toString(), po.getYhdlm());
            }
            //_log.info("系统用户信息总数：" + String.valueOf(mapKeyValue.size()));
          }
      } catch (Exception ex) {
          ex.printStackTrace();
          throw new ServiceException();
      }
      return mapKeyValue;
  }

}
