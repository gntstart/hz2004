/* Generated by Together */

package com.hzjc.hz2004.service.impl;

import com.hzjc.hz2004.vo.*;
import com.hzjc.wsstruts.exception.*;
import com.hzjc.hz2004.po.*;
import com.hzjc.hz2004.service.Hz2004Service;
import java.util.*;
import org.apache.commons.beanutils.BeanUtils;
import com.hzjc.util.StringUtils;
import com.hzjc.hz2004.constant.ZjConstant;
import com.hzjc.hz2004.dao.DAOFactory;
import com.hzjc.hz2004.dao.PojoInfo;
import com.hzjc.hz2004.appbase.*;
import com.hzjc.hz2004.base.ServiceImpl;
import com.hzjc.hz2004.base.SpringContextHolder;
import com.hzjc.hz2004.constant.PublicConstant;

/**
 * Hz2004项目继承框架的基础抽象类
 * <p>Title: Hz2004</p>
 * <p>Description: 常住人口管理系统Hz2004版</p>
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Company: 浙江金铖华元新技术有限公司</p>
 * @author kgb_hz@126.com,kgb@primetech.com.cn
 * @version 1.0
 */
abstract public class Hz2004BaseService   extends ServiceImpl
    implements Hz2004Service {

  /**
   * 保存系统操作日志
   * @param vo - 系统日志VO
   * @throws ServiceException
   * @throws DAOException
   */
  public void saveXtrz(VoCzrzxx vo) throws ServiceException, DAOException {
      //保存日
      PojoInfo dao = DAOFactory.createXT_XTRZBDAO();
      if (vo != null) {
        PoXT_XTRZB po = new PoXT_XTRZB();
        try {
          BeanUtils.copyProperties(po, vo);
        }
        catch (Exception ex) {
          throw new ServiceException(WSErrCode.ERR_DB_OTHER, ex);
        }
        Long lRzid = (Long) dao.getId();
        po.setRzid(lRzid);
        super.create(po);
      }
  }

  /**
   * 查询返回系统控制参数VO
   * @param strKzlb - 系统控制参数控制类别
   * @return        - 系统控制参数VO
   * @throws ServiceException
   * @throws DAOException
   */
  public static VoXT_XTKZCSB getXtkzcsAsVo(String strKzlb) throws
      ServiceException,
      DAOException {
    VoXT_XTKZCSB vo = null;
    try {
      //=============================================================
      //从中间件内存中取
      //=============================================================
      vo = SysParam.getXt_xtkzcsb(strKzlb);

      //============================================================
      //内存中没有，从数据库中取
      //============================================================
      if (vo == null) {
    	  
    	  PojoInfo xt_xtkzcsbDAO = DAOFactory.createXT_XTKZCSBDAO();
        StringBuffer strBuf = new StringBuffer();
        strBuf.append("from PoXT_XTKZCSB as XT_XTKZCSB ")
            .append(" where XT_XTKZCSB.kzlb='")
            .append(strKzlb).append("'");

        List lstPos = SpringContextHolder.getCommonService().queryAll(strBuf.toString());
        if (lstPos != null && !lstPos.isEmpty()) {
          PoXT_XTKZCSB po = (PoXT_XTKZCSB) lstPos.get(0);
          vo = new VoXT_XTKZCSB(po);

          //中间件内存中，同步化数据库中的信息（数据库中有，内存中没有；同步向内存中加）
         // _log.warn("系统控制参数同步,数据库中有,中间件内存中没有;内存中则增加之");
          SysParam.addXt_xtkzcs(vo);
        } //end  if (lstPos != null && !lstPos.isEmpty()) {
      } //end if (vo == null) {

      //判断最终返回的控制参数是否有（同步了数据库和内存以后）
      if (vo == null) {
        throw new ServiceException(WSErrCode.ERR_SERVICE_BUSSINESSLOGIC,
                                   "错误，数据库中的系统控制参数［参数控制类别代码="
                                   + strKzlb + "］没有配置！", null);
      }
    }
    catch (DAOException ex) {
      throw ex;
    }
    return vo;
  }

  /**
   * 根据传入的控制类别,得到该控制类别对应的系统控制值
   * @param strKzlb - 系统控制参数控制类别
   * @return        - 系统控制参数的参数值
   * @throws ServiceException
   * @throws DAOException
   */
  public static String getXtkzcsAsStr(String strKzlb) throws ServiceException,
      DAOException {
    String strKzz = "";
    try {
      //查询返回系统控制参数VO
      VoXT_XTKZCSB vo = getXtkzcsAsVo(strKzlb);
      if (vo != null) {
        strKzz = vo.getKzz();
      }
    }
    catch (DAOException ex) {
      throw ex;
    }
    catch (ServiceException ex) {
      throw ex;
    }
    return strKzz;
  }

  /**
   * 根据参数类别和代码，返回系统参数VO
   * @param strCslb - 系统参数表中参数类别
   * @param strDm   - 代码
   * @return
   * @throws ServiceException
   * @throws DAOException
   */
  public static VoXT_XTCSB getXtcsAsVo(String strCslb, String strDm) throws
      ServiceException, DAOException {
    VoXT_XTCSB vo = null;
    try {
      //==================================================================
      //从中间件内存中取
      //==================================================================
      vo = SysParam.getXt_xtcsbAsVo(strCslb, strDm);

      //==================================================================
      //内存中没有，从数据库中取
      //==================================================================
      if (vo == null) {
        String strHQL = "from PoXT_XTCSB where cslb='" + strCslb +
            "' and dm='" + strDm + "' ";
        //XT_XTCSBDAO dao = DAOFactory.createXT_XTCSBDAO();
        List lstpos =  SpringContextHolder.getCommonService().queryAll(strHQL);
        
        if (lstpos != null && !lstpos.isEmpty()) {
          PoXT_XTCSB po = (PoXT_XTCSB) lstpos.get(0);
          vo = new VoXT_XTCSB(po);

          //向内存中增加参数VO
          //_log.warn("系统参数同步,数据库中有,中间件内存中没有;内存中则增加之");
          SysParam.addXt_xtcs(vo);
        } //end if (lstpos != null && !lstpos.isEmpty()) {
      } //end if (vo == null) {

      //============================================================
      //判断返回系统参数类别对应的数据有没有配置
      //============================================================
      if (vo == null && !PublicConstant.XTCS_QXDYQFJG.equals(strCslb)) {
        throw new ServiceException(WSErrCode.ERR_SERVICE_BUSSINESSLOGIC,
                                   "错误：数据库中的系统参数［参数类别代码=" + strCslb +
                                   "］没有配置！", null);
      }

    }
    catch (DAOException ex) {
      throw ex;
    }
    return vo;
  }

  /**
   * 根据系统参数类别和代码，得到该代码对应的名称
   * @param strCslb
   * @param strDm
   * @return
   */
  public static String getXt_xtcsbAsStr(String strCslb, String strDm) {
    //得到系统参数VO
    VoXT_XTCSB vo = getXtcsAsVo(strCslb, strDm);
    //得到对应的名称
    String strDmMc = null;
    if (vo != null && vo.getMc() != null) {
      strDmMc = vo.getMc().trim();
    }
    else {
      strDmMc = strDm;
    }
    return strDmMc;
  }

  /**
   * 根据签发日期和有效期限，计算有效期限截止日期
   * @param strQfrq － 签发日期
   * @param strYxqx － 有效期限
   * @return
   */
  protected static final String getYxqxjzrq(String strQfrq, String strYxqx) {
    VoYxqxQsJzrq vo = new VoYxqxQsJzrq(strQfrq, strYxqx);
    vo.calculateYxqx();
   
    return vo.getYxqxjzrq();
  }

  /**
   * 有效期限，起始截止日期计算类
   * <p>Title: Hz2004</p>
   * <p>Description: 常住人口管理系统Hz2004版</p>
   * <p>Copyright: Copyright (c) 2004</p>
   * <p>Company: 浙江金铖华元新技术有限公司</p>
   * @author kgb_hz@126.com,kgb@primetech.com.cn
   * @version 1.0
   */
  private static class VoYxqxQsJzrq {
    private String qfrq; //签发日期
    private String yxqx; //有效期限
    private String yxqxqsrq; //有效期限起始日期
    private String yxqxjzrq = null; //有效期限截止日期

    public VoYxqxQsJzrq() {
    }

    /**
     *
     * @param strQfrq
     * @param strYxqx
     */
    public VoYxqxQsJzrq(String strQfrq, String strYxqx) {
      this.qfrq = strQfrq;
      this.yxqx = strYxqx;
    }

    /**
     *
     */
    private void calculateYxqx() {
      /////////////////////////////////////////////////////////////
      //计算有效期限起始日期
      this.yxqxqsrq = this.qfrq;
      if (StringUtils.isDate(this.yxqxqsrq, "yyyyMMdd")) {
        ///////////////////////////////////////////////////////
        //计算有效期限截止日期
        if (this.yxqx == null) { //有效期限为空
          this.yxqxjzrq = null;
        }
        else if (ZjConstant.YXQX_10N.equals(yxqx)) { //有效期限为10年
          this.yxqxjzrq = StringUtils.addYear(this.yxqxqsrq, 10);
        }
        else if (ZjConstant.YXQX_20N.equals(yxqx)) { //有效期限为20年
          this.yxqxjzrq = StringUtils.addYear(this.yxqxqsrq, 20);
        }
        else { //其他
          this.yxqxjzrq = null;
        }
      }

    }

    public String getQfrq() {
      return qfrq;
    }

    public void setQfrq(String qfrq) {
      this.qfrq = qfrq;
    }

    public String getYxqx() {
      return yxqx;
    }

    public void setYxqx(String yxqx) {
      this.yxqx = yxqx;
    }

    public String getYxqxqsrq() {
      return yxqxqsrq;
    }

    public String getYxqxjzrq() {
      return yxqxjzrq;
    }

  }

}
