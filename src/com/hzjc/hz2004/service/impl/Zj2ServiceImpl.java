/* Generated by Together */

package com.hzjc.hz2004.service.impl;

import java.io.InputStream;
import java.sql.Blob;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.LockOptions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.hzjc.hz2004.base.ExtMap;
import com.hzjc.hz2004.base.Page;
import com.hzjc.hz2004.base.SimpleJson;
import com.hzjc.hz2004.base.login.AuthToken;
import com.hzjc.hz2004.base.login.BaseContext;
//闵红斌增加
import com.hzjc.hz2004.common.HjCommon;
import com.hzjc.hz2004.constant.HjConstant;
import com.hzjc.hz2004.constant.PublicConstant;
import com.hzjc.hz2004.constant.ZjConstant;
import com.hzjc.hz2004.dao.DAOFactory;
import com.hzjc.hz2004.dao.PojoInfo;
import com.hzjc.hz2004.po.PoHJXX_CZRKJBXXB;
import com.hzjc.hz2004.po.PoHJXX_CZRKJBXXB_DYLS;
import com.hzjc.hz2004.po.PoHJXX_MLPXXXXB;
import com.hzjc.hz2004.po.PoHJXX_PZRZB;
import com.hzjc.hz2004.po.PoHJXX_RYZPXXB;
import com.hzjc.hz2004.po.PoHJXX_ZPLSB;
import com.hzjc.hz2004.po.PoHZ_ZJ_SB;
import com.hzjc.hz2004.po.PoHZ_ZJ_SBZB;
import com.hzjc.hz2004.po.PoVIEW_ZZST;
import com.hzjc.hz2004.po.PoV_HJ_CHCLXXB;
import com.hzjc.hz2004.po.PoV_HJ_GMSFHMSXMFPXXB;
import com.hzjc.hz2004.po.PoV_HJ_RDXXB;
import com.hzjc.hz2004.po.PoV_ZJ_GSXXB;
import com.hzjc.hz2004.po.PoV_ZJ_JMSFZXXB;
import com.hzjc.hz2004.po.PoV_ZJ_LQFFXXB;
import com.hzjc.hz2004.po.PoV_ZJ_SHQFXXB;
import com.hzjc.hz2004.po.PoV_ZJ_SJXXB;
import com.hzjc.hz2004.po.PoV_ZJ_XHXXB;
import com.hzjc.hz2004.po.PoV_ZJ_YSXXB;
import com.hzjc.hz2004.po.PoV_ZJ_ZZHKXXB;
import com.hzjc.hz2004.po.PoXT_DWXXB;
import com.hzjc.hz2004.po.PoXT_JWHXXB;
import com.hzjc.hz2004.po.PoXT_XTKZCSB;
import com.hzjc.hz2004.po.PoYDZJ_DBLKZ;
import com.hzjc.hz2004.po.PoYDZJ_SBXXB;
import com.hzjc.hz2004.po.PoYDZJ_SDZP;
import com.hzjc.hz2004.po.PoZJSH_SHQFXXB;
import com.hzjc.hz2004.po.PoZJXX_JMSFZXXB;
import com.hzjc.hz2004.po.PoZJYW_GSXXB;
import com.hzjc.hz2004.po.PoZJYW_LQFFXXB;
import com.hzjc.hz2004.po.PoZJYW_SJXXB;
import com.hzjc.hz2004.po.PoZJYW_SLXXB;
import com.hzjc.hz2004.po.PoZJYW_XHXXB;
import com.hzjc.hz2004.po.PoZJYW_YSXXB;
import com.hzjc.hz2004.po.PoOLD_HJXX_CZRKJBXXB;
import com.hzjc.hz2004.po.PoSB_JMSFZXXB;
import com.hzjc.hz2004.service.LoginService;
import com.hzjc.hz2004.service.Zj2Service;
import com.hzjc.hz2004.util.CommonUtil;
import com.hzjc.hz2004.util.DateHelper;
import com.hzjc.hz2004.vo.VoBggzfhxxEx;
import com.hzjc.hz2004.vo.VoBggzxx;
import com.hzjc.hz2004.vo.VoBggzxxEx;
import com.hzjc.hz2004.vo.VoBgryfhxx;
import com.hzjc.hz2004.vo.VoHJXX_CZRKJBXXB;
import com.hzjc.hz2004.vo.VoHJXX_RYZPXXB;
import com.hzjc.hz2004.vo.VoHJXX_SMKZPB;
import com.hzjc.hz2004.vo.VoHJXX_ZPLSB;
import com.hzjc.hz2004.vo.VoLsSfzDybzfhxx;
import com.hzjc.hz2004.vo.VoXT_XTCSB;
import com.hzjc.hz2004.vo.VoXtsjfw;
import com.hzjc.hz2004.vo.VoYdslDblkzfhxx;
import com.hzjc.hz2004.vo.VoYdslzffhxx;
import com.hzjc.hz2004.vo.VoYdslzfxx;
import com.hzjc.hz2004.vo.VoYdslzfywfhxx;
import com.hzjc.hz2004.vo.VoYdzjlqhqxx;
import com.hzjc.hz2004.vo.VoYdzjlqywfhxx;
import com.hzjc.hz2004.vo.VoYdzjsbxx;
import com.hzjc.hz2004.vo.VoZJYW_SLXXB;
import com.hzjc.hz2004.vo.VoZjClddyxx;
import com.hzjc.hz2004.vo.VoZjSlSlztfhxx;
import com.hzjc.hz2004.vo.VoZjdbzffhxx;
import com.hzjc.hz2004.vo.VoZjdbzfxx;
import com.hzjc.hz2004.vo.VoZjdbzfywfhxx;
import com.hzjc.hz2004.vo.VoZjgsfhxx;
import com.hzjc.hz2004.vo.VoZjgsxx;
import com.hzjc.hz2004.vo.VoZjgsywfhxx;
import com.hzjc.hz2004.vo.VoZjlqfffhxx;
import com.hzjc.hz2004.vo.VoZjlqffxx;
import com.hzjc.hz2004.vo.VoZjlqffywfhxx;
import com.hzjc.hz2004.vo.VoZjshfhxx;
import com.hzjc.hz2004.vo.VoZjshxx;
import com.hzjc.hz2004.vo.VoZjshywfhxx;
import com.hzjc.hz2004.vo.VoZjsjfhxx;
import com.hzjc.hz2004.vo.VoZjsjxx;
import com.hzjc.hz2004.vo.VoZjsjywfhxx;
import com.hzjc.hz2004.vo.VoZjslfhxx;
import com.hzjc.hz2004.vo.VoZjslxx;
import com.hzjc.hz2004.vo.VoZjslywfhxx;
import com.hzjc.hz2004.vo.VoZjslzffhxx;
import com.hzjc.hz2004.vo.VoZjslzfxx;
import com.hzjc.hz2004.vo.VoZjslzfywfhxx;
import com.hzjc.hz2004.vo.VoZjxhfhxx;
import com.hzjc.hz2004.vo.VoZjxhxx;
import com.hzjc.hz2004.vo.VoZjxhywfhxx;
import com.hzjc.hz2004.vo.VoZjysfhxx;
import com.hzjc.hz2004.vo.VoZjysxx;
import com.hzjc.hz2004.vo.VoZjysywfhxx;
import com.hzjc.util.StringUtils;
import com.hzjc.wsstruts.KDSActionProxy;
import com.hzjc.wsstruts.common.db.DbUtils;
import com.hzjc.wsstruts.dao.hibernate.DefaultDAO;
import com.hzjc.wsstruts.exception.DAOException;
import com.hzjc.wsstruts.exception.ServiceException;
import com.hzjc.wsstruts.exception.WSErrCode;
import com.hzjc.wsstruts.vo.VoPage;
import com.hzjc.wsstruts.vo.VoQueryResult;

/**
 * 二代证业务类
 * <p>Title: Hz2004</p>
 * <p>Description: 常住人口二代证Hz2004版</p>
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Company: HZJC</p>
 * @author Kansan Ku(kgb_hz@126.com)
 * @version 1.0
 * @since history
 *   2004-06-14  二代证受理信息表中添加了RYID，根据RYID确定一个人进行数据时效性进行判断。
 *   2004-06-15  证件收交、挂失、销毁时，如果证件类型是一代证则修改一代证办理标志，二代证则修改受理状态
 *   2004-06-24  派出所-区县-地市-省厅二代证件验收时,如果质量不合格时向证件质量控制回馈中插入记录
 *               (修改以前的不论是合格或不合格,就插入质量控制回馈表中.)
 *   2004-06-25  证件领取分发时，将证件审核签发信息中的签发日期反填到居民身份证中去。
 *   2004-06-25  二代证件受理信息保存时，检测在质量控制回馈中是否有不合格的记录；有，将上笔受理信息办理标志
 *               设置为“已重办”，并在受理信息中新加一条受理信息（受理号和数据包流水号不变）。
 *   2004-07-03  证件审核（派出所－地市－省厅）通过－证件验收（派出所－地市－省厅）通过－领证时，
 *               将证件质量回馈信息中的错误及未处理的记录处理掉
 *   2004-08-05  由于有表结构进行了修改，二代证领取时，将居民身份证信息表插入常住人口基本信息表中
 *
 */
@Service
public class Zj2ServiceImpl
    extends ZjBaseService
    implements Zj2Service {
  private static Map dwmap = new Hashtable();

  @Autowired
  private LoginService loginService;
  
  //日志处理
  protected static Log _log = LogFactory.getLog(Zj2ServiceImpl.class);

  /**
   *  二代证件受理提交业务
   * see # <code>processZjslyw(VoZjslxx[] voZjslxx, VoZjtdxx[] voZjtdxx)</code>
   * @param lstVoZjslxx
   * @param lstVoZjtdxx
   * @return
   * @throws ServiceException
   * @throws DAOException
   */
  public VoZjslywfhxx processZjslyw(List lstVoZjslxx, List lstVoZjtdxx) throws
      ServiceException, DAOException {
    try {
      return processZjslyw( (VoZjslxx[]) lstVoZjslxx.toArray(new VoZjslxx[
          lstVoZjslxx.size()]));
    }
    catch (DAOException ex) {
      return null;
    }
    catch (ServiceException ex) {
      return null;
    }
  }

  /**
   * 检查指定用户是否存在证件业务
   */
  public long checkZjyw(Map param,SimpleJson sj) throws Exception {
    VoQueryResult voQryResult = new VoQueryResult();
    try {
      //创建组织HQL的Buffer
      StringBuffer strBufHQLFromWhere = new StringBuffer();

      ////////////////////////////////////////////////////////////////
      //2、组织select语句部分
      ///////////////////////////////////////////////////////////////
      String gmsfhm = (String)param.get("gmsfhm");
      if(gmsfhm==null || gmsfhm.equals(""))
        return 0l;

      String xm = (String)param.get("xm");
      if(xm==null || xm.equals(""))
        xm = "";
      else
        xm = java.net.URLDecoder.decode(xm,"UTF-8");

      String[] sfzArray = gmsfhm.split(",");
      String[] xmsArray = xm.split(",");

      /////////////////////////////////////////////////////////////////
      //开始事务
      /////////////////////////////////////////////////////////////////

      //////////////////////////////////////////////////////////////////
      //4、调用DAO查询
      //////////////////////////////////////////////////////////////////

      //创建调用的DAO
      DefaultDAO dao = new DefaultDAO();
      long lCount = 0;
      long row=0;
      String msg = "";
      for(int i=0;i<sfzArray.length;i++){
        if(sfzArray[i].length()<=10)
          continue;

        //java.net.URLDecoder.decode(param.get("xm").toString(),"UTF-8");
        //24','31','18','21'
        String strHQLSelectCount = "select count(*) from PoZJYW_SLXXB a where (a.slzt='24' or a.slzt='31' or a.slzt='18' or a.slzt='21') and a.gmsfhm='" + sfzArray[i] + "'";

        //查询返回一页记录
        row  = super.getCount(strHQLSelectCount);
        if(row>0){
          lCount += row;
          msg += "身份证号码为" + sfzArray[i] + (xmsArray.length>i?"（" + xmsArray[i] + "）":"") + "的制证业务未完成！\n";
          sj.setMessage(msg);
        }
      }

      /////////////////////////////////////////////////////////////////
      //提交事务
      /////////////////////////////////////////////////////////////////

      return lCount;
    }
    catch (Exception ex) {
      //回滚事务
      throw ex;
    }
  }

  /**
   * 查找用户功能点
   * @param param Map
   * @param sj SimpleJson
   * @return long
   * @throws Exception
   */
  public long checkGnd(Map param,SimpleJson sj) throws Exception {
      VoQueryResult voQryResult = new VoQueryResult();
      try {
        //创建组织HQL的Buffer
        StringBuffer strBufHQLFromWhere = new StringBuffer();

        ////////////////////////////////////////////////////////////////
        //2、组织select语句部分
        ///////////////////////////////////////////////////////////////
        String ryid = (String)param.get("yhid");
        String gndbm = (String)param.get("gndbm");
        if(ryid==null || ryid.equals(""))
          return 0l;

        if(gndbm==null || gndbm.equals(""))
          return 0l;

        String strHQLSelectCount = "select count(*) "
            + "from  PoXT_JSGNQXB poxt_jsgnq0_,"
            + "  PoXT_JSXXB  poxt_jsxxb1_, "
            + " PoXT_YHJSXXB poxt_yhjsx0_,"
            + " PoXT_XTGNB  poxt_xtgnb2_"
            + "  where (poxt_jsgnq0_.jsid = poxt_jsxxb1_.jsid) "
            + "  and (poxt_jsgnq0_.gnid = poxt_xtgnb2_.gnid)"
            + "  and (poxt_yhjsx0_.jsid = poxt_jsxxb1_.jsid)"
            + "  and (poxt_yhjsx0_.yhid = " + ryid + ")"
            + "  and (poxt_xtgnb2_.gnbh='" + gndbm + "')";

        //java.net.URLDecoder.decode(param.get("xm").toString(),"UTF-8");
        //24','31','18','21'

        /////////////////////////////////////////////////////////////////
        //开始事务
        /////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////
        //4、调用DAO查询
        //////////////////////////////////////////////////////////////////

        //创建调用的DAO
        DefaultDAO dao = new DefaultDAO();
        List lstPos = null;
        long lCount = 0;

        //查询返回一页记录
        lCount  = super.getCount(strHQLSelectCount);

        /////////////////////////////////////////////////////////////////
        //提交事务
        /////////////////////////////////////////////////////////////////
        sj.setTotalCount(Integer.parseInt(lCount+""));

        return lCount;
      }
      catch (Exception ex) {
        //回滚事务
        throw ex;
      }
  }

  /**
   * 检查准迁证
   * @param param Map
   * @param sj SimpleJson
   * @return long
   * @throws Exception
   */
  public long checkZqzyw(Map param,SimpleJson sj) throws Exception {
    VoQueryResult voQryResult = new VoQueryResult();
    try {
      //创建组织HQL的Buffer
      StringBuffer strBufHQLFromWhere = new StringBuffer();

      ////////////////////////////////////////////////////////////////
      //2、组织select语句部分
      ///////////////////////////////////////////////////////////////
      String gmsfhm = (String)param.get("gmsfhm");
      if(gmsfhm==null || gmsfhm.equals(""))
        return 0l;

      //java.net.URLDecoder.decode(param.get("xm").toString(),"UTF-8");
      String strHQLSelectCount = "select count(*) from PoHJSP_HJSPSQB a where a.spjg='1' and a.lsbz='0' and a.gmsfhm='" + gmsfhm + "'";

      /////////////////////////////////////////////////////////////////
      //开始事务
      /////////////////////////////////////////////////////////////////

      //////////////////////////////////////////////////////////////////
      //4、调用DAO查询
      //////////////////////////////////////////////////////////////////

      //创建调用的DAO
      DefaultDAO dao = new DefaultDAO();
      List lstPos = null;
      long lCount = 0;
      //_log.info("视图ClassName=PoHJSP_HJSPSQB 信息查询HQL=" + strHQLSelectCount);

      //查询返回一页记录
      lCount  = super.getCount(strHQLSelectCount);
      if(lCount>0)
        sj.setMessage("身份证号码" + gmsfhm  + "已经存在迁入审批！");

      /////////////////////////////////////////////////////////////////
      //提交事务
      /////////////////////////////////////////////////////////////////

      return lCount;
    }
    catch (Exception ex) {
      //回滚事务
      throw ex;
    }
  }

  /**
   * 统计业务数据
   * @param param Map
   * @param sj SimpleJson
   * @return long
   * @throws Exception
   */
  public long totalInfo(Map param,SimpleJson sj) throws Exception {
    try {
      //创建组织HQL的Buffer
      StringBuffer strBufHQLFromWhere = new StringBuffer();

      ////////////////////////////////////////////////////////////////
      //2、组织select语句部分
      ///////////////////////////////////////////////////////////////
      String yhid = (String)param.get("yhid");

      /////////////////////////////////////////////////////////////////
      //开始事务
      /////////////////////////////////////////////////////////////////

      //////////////////////////////////////////////////////////////////
      //4、调用DAO查询
      //////////////////////////////////////////////////////////////////

      //创建调用的DAO
      DefaultDAO dao = new DefaultDAO();

      //查看是否有权限
      String strHQLSelectCount = "select count(*) " +
                  " from  PoXT_JSCDQXB poxt_jsgnq0_, " +
                  "  PoXT_JSXXB  poxt_jsxxb1_,  " +
                  " PoXT_YHJSXXB poxt_yhjsx0_, " +
                  " PoXT_XTGNCDB  poxt_xtgnb2_ " +
                  "  where (poxt_jsgnq0_.jsid = poxt_jsxxb1_.jsid)  " +
                  " and (poxt_jsgnq0_.gncdid = poxt_xtgnb2_.gncdid) " +
                  "  and (poxt_yhjsx0_.jsid = poxt_jsxxb1_.jsid) " +
                  "  and poxt_yhjsx0_.yhid=" + yhid +
                  " and (poxt_xtgnb2_.gncdid=100012)";
      long count  = super.getCount(strHQLSelectCount);
      if(count>0){
        //具有权限
        AuthToken auth = BaseContext.getUser();
        if(auth!=null){
          String dwdm = auth.getUser().getDwdm();
          if(dwdm.endsWith("00000"))
            dwdm = dwdm.substring(0,dwdm.length()-5);
          else if(dwdm.endsWith("000"))
            dwdm = dwdm.substring(0,dwdm.length()-3);

          strHQLSelectCount = "select count(*) " +
              " from PoHJYW_QCCLXXB a " +
              " where a.pcs_q like '" + dwdm + "%' and a.czlx = '1' and a.clbz = '0'";
          count  = super.getCount(strHQLSelectCount);
        }
      }

      /////////////////////////////////////////////////////////////////
      //提交事务
      /////////////////////////////////////////////////////////////////

      return count;
    }
    catch (Exception ex) {
      //回滚事务
      throw ex;
    }
  }
  
  public long updateHzyw(Map param,SimpleJson sj)  {
	  try{
		  String ids = (String)param.get("hzywid");
		  String clbs = (String)param.get("clbs");
		  String zxyy = (String)param.get("zxyy");
		  if(zxyy!=null && !param.containsKey("charset")){
			  zxyy = new String( ( (String) param.get("zxyy")).getBytes("iso-8859-1"),
					  "GBK");
		  };
		  if(clbs==null || clbs.trim().equals(""))
			  clbs = "1";
		  
		  if(ids==null || ids.trim().equals(""))
			  throw new  Exception("参数错误！");
		  
		  /////////////////////////////////////////////////////////////////
		  //开始事务
		  /////////////////////////////////////////////////////////////////
		  
		  //////////////////////////////////////////////////////////////////
		  //4、调用DAO查询
		  //////////////////////////////////////////////////////////////////
		  
		  //创建调用的DAO
		  DefaultDAO dao = new DefaultDAO();
		  String[] str = ids.split(",");
		  long count = 0;
		  for(String hzywid:str){
			  if(CommonUtil.isEmpty(hzywid))
				  continue;
			  
			  List list =super.findAllByHQL("from PoHZ_ZJ_SB a where a.id=" + hzywid);
			  if(list.size()>0){
				  PoHZ_ZJ_SB sb = (PoHZ_ZJ_SB)list.get(0);
				  
				  if(sb.getPch()!=null && !sb.getPch().equals("")){
					  //一个批次，统一处理
					  System.out.println("批量删除处理！");
					  list = super.findEntities("from PoHZ_ZJ_SB a where a.pch='" + sb.getPch() + "'");
					  int pccount = list.size();
					  for(int index=0;index<pccount;index++){
						  PoHZ_ZJ_SB sbx = (PoHZ_ZJ_SB)list.get(index);
						  sbx.setClbs("2");
						  sbx.setClsj(CommonUtil.getTimestamp(new java.util.Date()));
						  sbx.setZxyy(zxyy);
						  sbx.setBlrsfz(this.getUser().getGmsfhm());
						  super.update(sbx);
					  }
				  }else{
					  sb.setClbs("2");
					  sb.setClsj(CommonUtil.getTimestamp(new java.util.Date()));
					  sb.setZxyy(zxyy);
					  sb.setBlrsfz(this.getUser().getGmsfhm());
					  super.update(sb);
				  }
				  
				  count += list.size();
			  }
		  }
		  
		  return count;
		  /////////////////////////////////////////////////////////////////
		  //提交事务
		  /////////////////////////////////////////////////////////////////
	  }
	  catch (Exception ex) {
		  //回滚事务
		  throw new java.lang.RuntimeException(ex);
	  }
  }

  public long dealHzyw(Map param)  {
    try{
        String ids = (String)param.get("hzywid");

        if(ids==null || ids.trim().equals(""))
          throw new  Exception("参数错误！");

        String[] str = ids.split(",");
        long count = 0;
        for(String hzywid:str){
        	if(CommonUtil.isEmpty(hzywid) || "null".equals(hzywid))
        		continue;
        	
        	String hql = "from " + PoHZ_ZJ_SB.class.getName() + " a where a.id = ? ";
	        List list =super.findAllByHQL(hql, new Object[]{Long.parseLong(hzywid)});
	        if(list.size()>0){
	          PoHZ_ZJ_SB sb = (PoHZ_ZJ_SB)list.get(0);
	
	          if(sb.getPch()!=null && !sb.getPch().equals("")){
	            //一个批次，统一处理
	            System.out.println("批量完成处理！");
	            list = super.findEntities("from PoHZ_ZJ_SB a where a.pch='" + sb.getPch() + "' and a.clbs='0' ");
	            int pccount = list.size();
	            for(int index=0;index<pccount;index++){
	                 PoHZ_ZJ_SB sbx = (PoHZ_ZJ_SB)list.get(index);
	                 sbx.setClbs("1");
	                 sbx.setClsj(CommonUtil.getTimestamp(new java.util.Date()));
	                 sbx.setBlrsfz(this.getUser().getGmsfhm());
	                super.update(sbx);
	             }
	          }else{
	             sb.setClbs("1");
	             sb.setClsj(CommonUtil.getTimestamp(new java.util.Date()));
	             sb.setBlrsfz(this.getUser().getGmsfhm());
	            super.update(sb);
	          }
	          
	          count += list.size();
	        }
        }
        
        return count;
        /////////////////////////////////////////////////////////////////
        //提交事务
        /////////////////////////////////////////////////////////////////
      }
      catch (Exception ex) {
        //回滚事务
        throw new java.lang.RuntimeException(ex);
      }
  }

  public String getCxsx(Map param,SimpleJson sj) throws Exception {
    try{
        String rynbid = (String)param.get("rynbid");

        if(rynbid==null || rynbid.trim().equals(""))
          throw new  Exception("参数错误！");

        /////////////////////////////////////////////////////////////////
        //开始事务
        /////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////
        //4、调用DAO查询
        //////////////////////////////////////////////////////////////////

        //创建调用的DAO
        DefaultDAO dao = new DefaultDAO();
        List list =super.findAllByHQL("from PoHJXX_CZRKJBXXB a where a.rynbid=" + rynbid);
        if(list.size()>0){
          PoHJXX_CZRKJBXXB sb = (PoHJXX_CZRKJBXXB)list.get(0);
          if(sb!=null){
            String cxlx = sb.getCxfldm();
            if(cxlx==null || cxlx.equals("")){
              PoXT_JWHXXB poJwhxxb = null;
              PojoInfo  xt_jwhxxbDAO = DAOFactory.createXT_JWHXXBDAO();
              poJwhxxb  = super.get(PoXT_JWHXXB.class,sb.getJcwh());
              cxlx = poJwhxxb.getCxfldm();
            }

            if(cxlx==null || cxlx.equals("")){
              return "";
            }else{
              if(cxlx.startsWith("1")){
                return "(城镇)";
              }else{
                return "(乡村)";
              }
            }
          }
        }

        /////////////////////////////////////////////////////////////////
        //提交事务
        /////////////////////////////////////////////////////////////////

        return "";
      }
      catch (Exception ex) {
        //回滚事务
        throw ex;
      }
  }

  //获取常住人口信息和地区编码（户政业务触发的跨地市迁移）
  public String getKDSQY_CzrkAndDqbm(Map param,SimpleJson sj) throws Exception {
    try{
      String dqbm = getKDSQY_dqbm(param, sj);
      if(dqbm==null || dqbm.equals("")){
        return null;
      }

      String pch = (String)param.get("pch");
      String gmsfhm = (String)param.get("gmsfhm");
      String zqrsfz = null;

      DefaultDAO dao = new DefaultDAO();
      
      //户政业务过来，判断此批次是否是省内并同户
      if(pch!=null && !pch.equals("")){
          String hql = "from PoHZ_ZJ_SB a where a.pch='" + pch + "'";
          List list = dao.findEntities(hql);
          if(list.size()>0){
            gmsfhm = "";
            for(int i=0;i<list.size();i++){
              PoHZ_ZJ_SB obj = (PoHZ_ZJ_SB)list.get(i);
              if(i!=0)
                gmsfhm += ",";

              gmsfhm += obj.getBsqrsfz();
              if(obj.getSfzqr()!=null && obj.getSfzqr().equals("1")){
                zqrsfz = obj.getBsqrsfz();
              }
            }
          }
        }

        String str = KDSActionProxy.getKdqSpywRyxx(dqbm, gmsfhm);
        sj.setResult(str);
        sj.setOther2(zqrsfz);
        String pz = KDSActionProxy.getRemoteConfig(dqbm).toString();
        sj.setOther3(pz);

        return zqrsfz;
      }
      catch (Exception ex) {
        //回滚事务
        throw ex;
      }
  }

  public String getKDSQY_dqbm(Map param,SimpleJson sj) throws Exception {
    try{
        String gmsfhm = (String)param.get("gmsfhm");
        String dqbm = KDSActionProxy.getDqbm(gmsfhm);
        if(dqbm==null || dqbm.equals("") || dqbm.equals("null"))
          dqbm = "";

        return dqbm;
      }
      catch (Exception ex) {
        //回滚事务
        throw ex;
      }
  }

  public long saveCzrkPrintLs(Map param,SimpleJson sj) throws Exception {
    try{
        String hhnbid = (String)param.get("hhnbid");
        String yhdlm = (String)param.get("yhdlm");

        if(hhnbid==null || hhnbid.trim().equals("")){
          return 0;
        }
        /////////////////////////////////////////////////////////////////
        //开始事务
        /////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////
        //4、调用DAO查询
        //////////////////////////////////////////////////////////////////

        //创建调用的DAO
        DefaultDAO dao = new DefaultDAO();
        PoHJXX_CZRKJBXXB_DYLS ls = new PoHJXX_CZRKJBXXB_DYLS();
        ls.setDysj(CommonUtil.getTimestamp(new java.util.Date()));
        ls.setHhnbid(Long.valueOf(hhnbid));
        ls.setDyyh(yhdlm);

        if(ls.getHhnbid()!=null)
          super.create(ls);

        String hql = "select max(a.dysj),count(a.hhnbid) from CzrkDyls a where a.hhnbid=" + hhnbid;
        List reList = dao.findEntities(hql);
        if(reList.size()>0){
          Object[] obj = (Object[])reList.get(0);

          java.util.Date d = (java.util.Date)obj[0];
          java.text.SimpleDateFormat format = new java.text.SimpleDateFormat("yyyy年MM月dd日 HH点mm分");
          String sdate = format.format(d);

          sj.setResult("{\"printCount\":\"" + obj[1] + "\",\"lastPrintDate\":\"" + sdate + "\"}");
        }
        /////////////////////////////////////////////////////////////////
        //提交事务
        /////////////////////////////////////////////////////////////////

        return 1;
      }
      catch (Exception ex) {
        //回滚事务
        throw ex;
      }
  }

  public String queryBzdz(Map param,SimpleJson sj) throws Exception {
      try{
          String mlpnbid = (String)param.get("mlpnbid");

          if(mlpnbid==null || mlpnbid.trim().equals(""))
            throw new  Exception("参数错误！");

          /////////////////////////////////////////////////////////////////
          //开始事务
          /////////////////////////////////////////////////////////////////

          //////////////////////////////////////////////////////////////////
          //4、调用DAO查询
          //////////////////////////////////////////////////////////////////

          //创建调用的DAO
          DefaultDAO dao = new DefaultDAO();
          List list =super.findAllByHQL("from PoHJXX_MLPXXXXB a where a.mlpnbid=" + mlpnbid);
          if(list.size()>0){
            PoHJXX_MLPXXXXB sb = (PoHJXX_MLPXXXXB)list.get(0);
            sj.setList(list);
          }

          /////////////////////////////////////////////////////////////////
          //提交事务
          /////////////////////////////////////////////////////////////////

          return "1";
        }
        catch (Exception ex) {
          //回滚事务
          throw ex;
        }
  }

  /**
   * 锁定、解锁人员信息
   * @param param Map
   * @param sj SimpleJson
   * @return long
   * @throws Exception
   */
  public long lockRyzl(Map param,SimpleJson sj) throws Exception {
      VoQueryResult voQryResult = new VoQueryResult();
      try {
        //创建组织HQL的Buffer
        StringBuffer strBufHQLFromWhere = new StringBuffer();

        ////////////////////////////////////////////////////////////////
        //2、组织select语句部分
        ///////////////////////////////////////////////////////////////
        String rynbid = (String)param.get("rynbid");
        String yhid = (String)param.get("yhid");
        String zt = (String)param.get("zt");
        if(rynbid==null || rynbid.equals(""))
          throw new Exception("必须提供人员ID！");

        if(yhid==null || yhid.equals(""))
          throw new Exception("必须指定用户ID！");

        if(zt==null || !(zt.equals("0") || zt.equals("6")))
          throw new Exception("人员状态参数非法！");

        String hsql = "from  PoHJXX_CZRKJBXXB a where a.rynbid='" + rynbid + "'";

        //java.net.URLDecoder.decode(param.get("xm").toString(),"UTF-8");
        //24','31','18','21'

        /////////////////////////////////////////////////////////////////
        //开始事务
        /////////////////////////////////////////////////////////////////

        //////////////////////////////////////////////////////////////////
        //4、调用DAO查询
        //////////////////////////////////////////////////////////////////

        //创建调用的DAO
        DefaultDAO dao = new DefaultDAO();
        List list =super.findAllByHQL(hsql);
        if(list.size()!=1)
          throw new Exception("没有找到户籍资料！");

        PoHJXX_CZRKJBXXB hjxx = (PoHJXX_CZRKJBXXB)list.get(0);
        if(zt.equals("0")){
          if(!hjxx.getRysdzt().equals("6"))
            throw new Exception("人员不是本业务锁定，无法解锁！");

          hjxx.setRysdzt(zt);
          sj.setMessage("人员（ID="+hjxx.getRyid() + ",身份证=" + hjxx.getGmsfhm() + "）成功解锁！");
        }else{
          if(hjxx.getRysdzt().equals("6"))
            throw new Exception("人员已经被锁定，无须反复锁定！");

          if(!hjxx.getRysdzt().equals("0"))
            throw new Exception("人员锁定状态非正常，无法锁定！");

          hjxx.setRysdzt(zt);
          sj.setMessage("人员（ID="+hjxx.getRyid() + ",身份证=" + hjxx.getGmsfhm() + "）成功锁定！");
        }
       super.update(hjxx);

        /////////////////////////////////////////////////////////////////
        //提交事务
        /////////////////////////////////////////////////////////////////

        return list.size();
      }
      catch (Exception ex) {
        //回滚事务
        throw ex;
      }
  }

  public Page queryPoHZ_ZJ_SB(Map param,SimpleJson sj){
    VoQueryResult voQryResult = new VoQueryResult();
    try {
      /////////////////////////////////////////////////////////////////
      //开始事务
      /////////////////////////////////////////////////////////////////

      DefaultDAO dao = new DefaultDAO();

      //////////////////////////////////////////////////////////////////
      //4、调用DAO查询
      //////////////////////////////////////////////////////////////////
      String kzz = "1";
      String strHQLip = "from PoXT_XTKZCSB where kzlb='10025' ";
      List lst =super.findAllByHQL(strHQLip);
      if (lst != null && lst.size() > 0) {
        PoXT_XTKZCSB poXT_XTKZCSB = (PoXT_XTKZCSB) lst.get(0);
        kzz = poXT_XTKZCSB.getKzz();
      }

      if(dwmap.size()==0){
        strHQLip = "from PoXT_DWXXB";
        List dwlist =super.findAllByHQL(strHQLip);
        for(int i=0;i<dwlist.size();i++){
          PoXT_DWXXB dw = (PoXT_DWXXB)dwlist.get(i);
          dwmap.put(dw.getDm(), dw.getMc());
        }
      }

      //14为跨地区户籍迁移
      String hsql = "from  PoHZ_ZJ_SB  where 1 = 1 ";
      
      List<Object> params = new ArrayList<Object>();
      
      /**
			2018.07.12
			新增	刁杰
			是外网对接,传入业务ID时仅查询指定业务记录
			否则正常执行查询
       */
      String ywid = (String)param.get("ywid");
      if(CommonUtil.isNotEmpty(ywid)) {
    	  
    	  hsql += " and id = ? ";
    	  params.add(Long.parseLong(ywid));
    	  
      }else {
          AuthToken auth = BaseContext.getUser();
          Long yhid = auth.getUser().getYhid();
          if(!auth.isAdmin()) {//为管理员时，不拼接数据范围条件 add by zjm 20190710
        	  if("2".equals(kzz)){
                  //按单位
                  hsql += " and czdw='" + auth.getUser().getDwdm().trim() + "'";
                }else{
                  List listsjfw = new ArrayList();
                  XtywqxServiceImpl.getYhsjfw(yhid.toString(), PublicConstant.XQLX_XQN, listsjfw);
                  if (listsjfw.size() > 0) {
                    hsql += " and (";
                    for (int i = 0; i < listsjfw.size(); i++) {
                      VoXtsjfw fw = (VoXtsjfw) listsjfw.get(i);
                      if (i > 0)
                        hsql += " or ";
                      hsql += " instr(czdw,'" + fw.getSjfw() + "')=1 ";
                    }
                    hsql += ")";
                  }
                  else {
                    throw new RuntimeException("此用户没有数据范围，无法处理户政业务！");
                  }
                }  
          }
          //hsql += " and ywlb<>'18' ";
          
          String clbs = (String)param.get("clbs");
    	  if(CommonUtil.isEmpty(clbs))
    		  clbs = "0";
    	  
    	  hsql += " and clbs=? ";
    	  params.add(clbs);
    	  
    	  //Date cjsj1 = DateHelper.getStartDate((String)param.get("cjsj1"));
    	  String cjsj1 = (String)param.get("cjsj1");
    	  if(CommonUtil.isNotEmpty(cjsj1)){
    		  hsql += " and to_char(czsj,'yyyymmddhh24miss')>=?";
    		  params.add(cjsj1);
    	  }
    	  
    	  //Date cjsj2 = DateHelper.getEndDate((String)param.get("cjsj2"));
    	  String cjsj2 = (String)param.get("cjsj2");
    	  if(CommonUtil.isNotEmpty(cjsj2)){
    		  hsql += " and to_char(czsj,'yyyymmddhh24miss')<=?";
    		  params.add(cjsj2);
    	  }
    	  
    	  String sqrxm = (String)param.get("sqrxm");
    	  if(CommonUtil.isNotEmpty(sqrxm)) {
    		  hsql += " and sqrxm=? ";
        	  params.add(sqrxm);
    	  }
    	  
    	  String bsqrxm = (String)param.get("bsqrxm");
    	  if(CommonUtil.isNotEmpty(bsqrxm)) {
    		  hsql += " and bsqrxm=? ";
        	  params.add(bsqrxm);
    	  }
    	  String pj = (String)param.get("pj");
    	  if(CommonUtil.isNotEmpty(pj)) {
    		  hsql += " and pj=? ";
        	  params.add(pj);
    	  }
    	  hsql += " order by czsj asc";
          
      }
      //创建调用的DAO
      
      int pageIndex = Integer.parseInt((String)param.get("pageIndex"));
      int pageSize = Integer.parseInt((String)param.get("pageSize"));
      Page p = super.getPageRecords(hsql, params.toArray(), pageIndex, pageSize);
      List list = p.getList();
      
//      List list =super.findAllByHQL(hsql, params.toArray());
      for(int i=0;i<list.size();i++){
        PoHZ_ZJ_SB sb = (PoHZ_ZJ_SB)list.get(i);
        if(sb.getCzdw()!=null){
          sb.setCzdw_mc((String)dwmap.get(sb.getCzdw()));
          if(sb.getCzdw_mc()==null){
            strHQLip = "from PoXT_DWXXB where dm='" + sb.getCzdw() + "'";
            List dwlist =super.findAllByHQL(strHQLip);
            if(dwlist.size()>0){
              PoXT_DWXXB dw = (PoXT_DWXXB)dwlist.get(0);
              sb.setCzdw_mc(dw.getMc());
              dwmap.put(dw.getDm(), dw.getMc());
            }
          }
        }
      }
      /////////////////////////////////////////////////////////////////
      //提交事务
      /////////////////////////////////////////////////////////////////

      return p;
    }
    catch (Exception ex) {
      ex.printStackTrace();
      //回滚事务
      throw ex;
    }
  }

  public Map queryPoHZ_ZJ_SBzb(Map param,SimpleJson sj) throws Exception {
    try {
      /////////////////////////////////////////////////////////////////
      //开始事务
      /////////////////////////////////////////////////////////////////
      String hzywid = (String)param.get("hzywid");
      String pch = (String)param.get("pch");

      DefaultDAO dao = new DefaultDAO();

      //14为跨地区户籍迁移
      String hsql = "from  PoHZ_ZJ_SBZB  where id=" + hzywid + " and pch='" + pch + "'";
      List list =super.findAllByHQL(hsql);

      Map map = new HashMap();
      for(int i=0;i<list.size();i++){
    	  PoHZ_ZJ_SBZB zb= (PoHZ_ZJ_SBZB)list.get(i);
        String sfz = zb.getSfzh();
        String pname = zb.getPname().trim();
        String pvalue = zb.getPvalue();

        Map child = (Map)map.get(sfz);
        if(child==null){
          child = new HashMap();
          map.put(sfz, child);
        }

        child.put(pname, pvalue);
      }

      /////////////////////////////////////////////////////////////////
      //提交事务
      /////////////////////////////////////////////////////////////////

      return map;
    }
    catch (Exception ex) {
      ex.printStackTrace();
      //回滚事务
      throw ex;
    }
  }

  public List queryPostMessage(Map param,SimpleJson sj) throws Exception {
    try {
      /////////////////////////////////////////////////////////////////
      //开始事务
      /////////////////////////////////////////////////////////////////

      DefaultDAO dao = new DefaultDAO();

      //////////////////////////////////////////////////////////////////
      //4、调用DAO查询
      //////////////////////////////////////////////////////////////////
      AuthToken auth = BaseContext.getUser();

      String strHQLip = "from PostMessage a where a.yhdlm='" + auth.getYhdlm() + "'";
      List lst =super.findAllByHQL(strHQLip);

      /////////////////////////////////////////////////////////////////
      //提交事务
      /////////////////////////////////////////////////////////////////

      return lst;
    }
    catch (Exception ex) {
      ex.printStackTrace();
      //回滚事务
      throw ex;
    }
  }

  /**
   *
   * 二代证件受理业务
   * @param voZjslxx[] - 证件受理信息数组
   * @return com.hzjc.hz2004.vo.VoZjslywfhxx
   * @roseuid 40594CA00397
   * @throws ServiceException
   * @throws DAOException
   */
  public VoZjslywfhxx processZjslyw(VoZjslxx[] voZjslxx) throws
      ServiceException, DAOException {

    VoZjslywfhxx voZjslywfhxx = null;
    VoZjslfhxx voZjslfhxx[] = null;
    String now = StringUtils.getServiceTime();

    //数据完整性处理
    if (voZjslxx == null || (voZjslxx != null && voZjslxx.length <= 0)) {
      return null;
    }

    try {
      //创建调用的对象DAO
      PojoInfo  hjxx_czrkjbxxbDAO = DAOFactory.createHJXX_CZRKJBXXBDAO();
      PojoInfo  hjxx_mlpxxxxbDAO = DAOFactory.createHJXX_MLPXXXXBDAO();
      PojoInfo  zjyw_slxxbDAO = DAOFactory.createZJYW_SLXXBDAO();
      PojoInfo  zjls_sfzywczbDAO = DAOFactory.createZJLS_SFZYWCZBDAO();
      PojoInfo  hjxx_zplsbDAO = DAOFactory.createHJXX_ZPLSBDAO();
      PojoInfo  hjxx_ryzpxxbDAO = DAOFactory.createHJXX_RYZPXXBDAO();
      PojoInfo  hjls_hjywlsbDAO = DAOFactory.createHJLS_HJYWLSBDAO();
      PojoInfo  xt_xtkzcsbDAO = DAOFactory.createXT_XTKZCSBDAO();

      ////////////////////////////////////////////////////
      //开始事务

      String kzz = "0";
      String strHQLip = "from PoXT_XTKZCSB where kzlb='10021' ";
      List lst =super.findAllByHQL(strHQLip);
      if (lst != null && lst.size() > 0) {
        PoXT_XTKZCSB poXT_XTKZCSB = (PoXT_XTKZCSB) lst.get(0);
        kzz = poXT_XTKZCSB.getKzz();
      }

      ////////////////////////////////////////////////////////
      //业务限制判断
      VerifyBusinessLimit(PublicConstant.GNBH_ZJ_2DZSLYW, voZjslxx);

      //////////////////////////////////////////////////////////////////////////
      //保存受理信息
      voZjslfhxx = new VoZjslfhxx[voZjslxx.length];
      for (int i = 0; i < voZjslxx.length; i++) {
        String qfjg = null; //签发机关
        String slh = null; //受理号

        //////////////////////////////////////////////////////
        //得到证件业务ID
        Long zjywid = (Long) zjls_sfzywczbDAO.getId();

        //得到人员信息
        PoHJXX_CZRKJBXXB poRyxx  = super.get(PoHJXX_CZRKJBXXB.class,
            voZjslxx[i].getRynbid());
        if (poRyxx == null) {
          throw new ServiceException(WSErrCode.ERR_SERVICE_BUSSINESSLOGIC,
                                     "找不到证件受理对应的人员信息，证件受理业务无法完成。", null);
        }

        if(kzz.equals("1")){
          List list = super.findEntities("from PoVIEW_ZZST a where a.gmsfhm='" + poRyxx.getGmsfhm() + "' order by a.slrq desc");

          //受理原因为11,12只允许使用一次
          if(voZjslxx[i].getSlyy()!=null && (voZjslxx[i].getSlyy().equals("11") || voZjslxx[i].getSlyy().equals("12"))){
            if(list.size()>=1){
              throw new ServiceException(WSErrCode.ERR_SERVICE_BUSSINESSLOGIC,
                                         poRyxx.getGmsfhm() +
                                         "已经存在成功制证记录，不允许使用此受理原因！。", null);
            }
          }

          if(list.size()>0 && voZjslxx[i].getSlyy()!=null && !voZjslxx[i].getSlyy().equals("41")){
        	  PoVIEW_ZZST zt = (PoVIEW_ZZST)list.get(0);
            if(zt.getSlrq()!=null){
              long between_days=(System.currentTimeMillis()-zt.getSlrq().getTime())/(1000*3600*24);
              int day = Integer.parseInt(String.valueOf(between_days));
              if(day<=15){
                throw new ServiceException(WSErrCode.ERR_SERVICE_BUSSINESSLOGIC,
                                     poRyxx.getGmsfhm() + "制证未超过15天，请使用证件丢失不领原因！。", null);
              }
            }
          }
        }

        super.refresh(poRyxx, LockOptions.UPGRADE);
        if (! (PublicConstant.JLBZ_ZX.equals(poRyxx.getJlbz()) &&
               PublicConstant.CXBZ_FCX.equals(poRyxx.getCxbz()))) {
          throw new ServiceException(WSErrCode.ERR_SERVICE_BUSSINESSLOGIC,
                                     "不允许对人信息的历史记录办理业务，证件受理业务无法完成。", null);
        }
        //得到地信息
        PoHJXX_MLPXXXXB poMlpxxxx  = super.get(PoHJXX_MLPXXXXB.class,
            poRyxx.getMlpnbid());
        if (poMlpxxxx == null) {
          throw new ServiceException(WSErrCode.ERR_SERVICE_BUSSINESSLOGIC,
                                     "找不到证件受理人所在的地信息，证件受理业务无法完成。", null);
        }
        //数据范围权限限制
        if (!VerifyDataRangeByMlpnbid(PublicConstant.GNBH_ZJ_2DZSLYW,
                                      poRyxx.getMlpnbid())) {
          throw new ServiceException(WSErrCode.ERR_SERVICE_DATASCOPE,
                                     "证件受理数据范围受到限制，证件受理提交业务无法完成。", null);
        }
        //重号判断（先判断系统控制参数）
        checkEdzslChpd(new VoHJXX_CZRKJBXXB(poRyxx));
        //从系统参数中得到签发机关
        VoXT_XTCSB voXtcsxx = getQxqfjgAsVoByMlpnbid(poRyxx.getMlpnbid());
        if (voXtcsxx != null) {
          qfjg = voXtcsxx.getKzbzb();
        }
        if (qfjg == null || (qfjg != null && qfjg.trim().length() <= 0)) {
          throw new ServiceException(WSErrCode.ERR_SERVICE_DATANOTFULL,
                                     "没有设置该人所在的区县对应签发机关，证件受理业务无法完成。", null);
        }
        //胡斌 20060608 判断受理人是否有正常证件业务受理中
        StringBuffer strHQL = new StringBuffer();
        strHQL.append("from PoZJYW_SLXXB where ryid=").append(poRyxx.getRyid())
            .append(" and slzt > 2 and slzt < 93")
            .append(" and slzt not in (10,12,17,23,25,30,32,62,72,82,91)");
        List slxxList =super.findAllByHQL(strHQL.toString());
        if (slxxList != null && slxxList.size() > 0) {
          throw new ServiceException(WSErrCode.ERR_SERVICE_BUSSINESSLOGIC,
                                     "该人已经存在正常的证件受理业务，证件受理业务无法完成。", null);
        }

        //数据时效性判断
        //???

        //生成新的受理号
        slh = assign2IDSlh(poRyxx.getMlpnbid());
        if (slh == null) {
          throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER,
                                     "分配受理号失败，证件受理业务无法完成。", null);
        }

        //检测是否有未进入审核的受理信息，如果有则作废上一笔受理信息
        strHQL = new StringBuffer(100);
        strHQL.append("from PoZJYW_SLXXB where ryid=")
            .append(String.valueOf(poRyxx.getRyid()))
            .append(" and (slzt='")
            .append(ZjConstant.ZJ_BLBZ_2ID_CS)
            .append("' or slzt='")
            .append(ZjConstant.ZJ_BLBZ_2ID_SJWZ)
            .append("')");
        slxxList =super.findAllByHQL(strHQL.toString());
        if (slxxList != null && slxxList.size() > 0) {
          PoZJYW_SLXXB poSlxx = (PoZJYW_SLXXB) slxxList.get(0);
          //传上笔受理信息内部受理ID声明将上笔受理信息作废并置着重办
          if (voZjslxx[i].getNbslid() == null) {
            throw new ServiceException(WSErrCode.ERR_SERVICE_BUSSINESSLOGIC,
                                       "该人的证件受理信息存在，证件受理业务无法完成。", null);
          }
          poSlxx.setSlzt(ZjConstant.ZJ_BLBZ_2ID_ZF); //作废
         super.update(poSlxx);

          //保存证件流水
          saveSfzywlsXtrz( (Long) zjls_sfzywczbDAO.getId(),
                          PublicConstant.GNBH_ZJ_2DZSLYW, poSlxx.getSlh(),
                          poSlxx.getSlzt());
        }

        //判断是否有质量控制回馈信息，对上笔证件受理信息进行质量处理
        strHQL = new StringBuffer();
        strHQL.append("from PoZJYW_SLXXB where ryid=").append(poRyxx.getRyid())
            .append(" and slzt in (10,12,17,23,25,30,32,62,72,82,91)");
        slxxList =super.findAllByHQL(strHQL.toString());
        if (slxxList != null && slxxList.size() > 0) {
          for (int k = 0; k < slxxList.size(); k++) {
            PoZJYW_SLXXB poSlxx = (PoZJYW_SLXXB) slxxList.get(k);
            poSlxx.setSlzt(ZjConstant.ZJ_BLBZ_2ID_YCB); //已重办
            poSlxx.setCldw(this.getXtDwxx_sm());
            poSlxx.setClrq(now.substring(0, 8));
            poSlxx.setClqk("已重办");
           super.update(poSlxx);
          }
        }

        //保存受理信息
        PoZJYW_SLXXB poSlxxNew = new PoZJYW_SLXXB();
        BeanUtils.copyProperties(poSlxxNew, poMlpxxxx);
        BeanUtils.copyProperties(poSlxxNew, poRyxx);
        BeanUtils.copyProperties(poSlxxNew, voZjslxx[i]);
        poSlxxNew.setNbslid( (Long) zjyw_slxxbDAO.getId());
        poSlxxNew.setNbsfzid(null);
        poSlxxNew.setSlh(slh);
        poSlxxNew.setQfjg(qfjg);
        poSlxxNew.setSlzt(voZjslxx[i].getZpid() == null ?
                          ZjConstant.ZJ_BLBZ_2ID_CS :
                          ZjConstant.ZJ_BLBZ_2ID_SJWZ);
        poSlxxNew.setZz(joinSfzZz(voZjslxx[i].getRynbid())); //组合身份证地址字段
        poSlxxNew.setSjblsh(null);
        poSlxxNew.setCxbz(PublicConstant.CXBZ_FCX);
        poSlxxNew.setZjywid(zjywid);
        poSlxxNew.setYwbz(PublicConstant.GNBH_ZJ_2DZSLYW);
        poSlxxNew.setCzyid(this.getUserInfo().getYhid());
        poSlxxNew.setCzsj(now);
        poSlxxNew.setDwdm(this.getUserInfo().getDwdm());
        //安徽省铜陵市铜官山区宝山新村１２３４５６７８９　栋１０３号
        String zz = poSlxxNew.getZz();
        if(zz==null) zz="";
        zz = zz.replaceAll("１","1").replaceAll("２","2").replaceAll("３","3").replaceAll("４","4").replaceAll("５","5")
            .replaceAll("６","6").replaceAll("７","7").replaceAll("８","8").replaceAll("９","9").replaceAll("０","0")
            .replaceAll("　","").replaceAll(" ","");
        poSlxxNew.setZz(zz);

        super.create(poSlxxNew);

        //保存证件流水
        saveSfzywlsXtrz(zjywid, PublicConstant.GNBH_ZJ_2DZSLYW,
                        poSlxxNew.getSlh(), poSlxxNew.getSlzt());

        //回填人员基本信息常表的有效期限截止日期和有效期限起始日期
        poRyxx.setQfjg(poSlxxNew.getQfjg());
        poRyxx.setZjlb(ZjConstant.ZJ_ZJLB_EDZ);
        poRyxx.setYxqxjzrq(poSlxxNew.getYxqxjzrq());
        poRyxx.setYxqxqsrq(poSlxxNew.getYxqxqsrq());
        //modi by hh 20060306快证不用填写电话号码
        if (voZjslxx[i].getSjrlxdh() != null &&
            voZjslxx[i].getSjrlxdh().trim().length() > 0 &&
            ! (voZjslxx[i].getZzlx() != null &&
               "2".equals(voZjslxx[i].getZzlx().trim()))) {
          poRyxx.setDhhm(voZjslxx[i].getSjrlxdh()); //更新投递电话号码到人常
        }
       super.update(poRyxx);

        //处理照片来源于照片临时表(先拍照到照片临时表后受理方式)
        PoHJXX_CZRKJBXXB poRyxxNew = null;
        if (ZjConstant.ZPLYLX_ZPLSB.equals(voZjslxx[i].getZplylx()) &&
            voZjslxx[i].getZpid() != null) {
          //得到照片临时表的中对应记录
          PoHJXX_ZPLSB poZplsxx  = super.get(PoHJXX_ZPLSB.class,voZjslxx[i].
              getZpid());
          if (poZplsxx == null) {
            throw new ServiceException(WSErrCode.ERR_SERVICE_DATANOTFULL,
                                       "在照片临时表中无法找到照片记录，二代证件受理业务无法完成。", null);
          }
          VoHJXX_ZPLSB voZplsxx = new VoHJXX_ZPLSB(poZplsxx);
          //生成变更更成信息
          VoBggzxx voBggzxx = new VoBggzxx();
          voBggzxx.setRynbid(voZjslxx[i].getRynbid());
          voBggzxx.setBggzlb(HjConstant.BGGZLB_QT_GZ);
          voBggzxx.setBggzrq(now.substring(0, 8));
          voBggzxx.setBggzxm("zp");
          voBggzxx.setZp(voZplsxx.getZp());
          voBggzxx.setSfbczpdzplsb(false); //Add 2005/05/10 10:05:00 By MHB
          List voBggzxxList = new ArrayList();
          voBggzxxList.add(voBggzxx);
          VoBggzxxEx voBggzxxEx[] = new VoBggzxxEx[1];
          voBggzxxEx[0] = new VoBggzxxEx();
          voBggzxxEx[0].setRynbid(voZjslxx[i].getRynbid());
          voBggzxxEx[0].setFlag(1);
          voBggzxxEx[0].setBggzxxList(voBggzxxList);
          VoBggzfhxxEx voBggzfhxxEx = null;
          //调用变更更正功能，实现照片变更到人员照片表去中
          HjCommon hjCommon = new HjCommon();
         
          Long hjywid = (Long) hjls_hjywlsbDAO.getId();
          hjCommon.saveHJYWLSXX(hjywid, PublicConstant.GNBH_HJ_BGGZYW,
                                PublicConstant.HJYWLS_YWLX_GR, 1, null, now); //闵红斌增加(2005/03/24 09:50:00)
          voBggzfhxxEx = hjCommon.saveBGGZXX(hjywid, null, voBggzxxEx,
                                             PublicConstant.GNBH_ZJ_2DZSLYW,
                                             now);
          VoBgryfhxx voBgryfhxxs[] = (voBggzfhxxEx != null ?
                                      voBggzfhxxEx.getVoBgryfhxx() : null);
          VoBgryfhxx voBgryfhxx = (voBgryfhxxs.length == 1 ? voBgryfhxxs[0] : null);
          //得到变更后的人员信息
          poRyxxNew  = super.get(PoHJXX_CZRKJBXXB.class,
              voBgryfhxx != null ? voBgryfhxx.getRynbid() : null);
          if (poRyxxNew == null) {
            throw new ServiceException(WSErrCode.ERR_SERVICE_DATANOTFULL,
                                       "找不到变更后的人员信息，二代证件受理业务无法完成。", null);
          }
          //回填受理号到照表临时表中
          poZplsxx.setRyid(poRyxxNew.getRyid());
          poZplsxx.setRynbid(poRyxxNew.getRynbid());
          poZplsxx.setZpid(poRyxxNew.getZpid());
          poZplsxx.setSlh(poSlxxNew.getSlh());
         super.update(poZplsxx);
        }
        //照片来源于人员照片表(处理引用常表照片方式)
        else if (ZjConstant.ZPLYLX_RYZPB.equals(voZjslxx[i].getZplylx()) &&
                 voZjslxx[i].getZpid() != null) {
          //从人员照片表中得到人员照片信息
          PoHJXX_RYZPXXB poRyzpxx  = super.get(PoHJXX_RYZPXXB.class,
              voZjslxx[i].getZpid());
          if (poRyzpxx == null) {
            throw new ServiceException(WSErrCode.ERR_SERVICE_DATANOTFULL,
                                       "在照片临时表中无法找到照片记录，二代证件受理业务无法完成。", null);
          }
          VoHJXX_RYZPXXB voRyzpxx = new VoHJXX_RYZPXXB(poRyzpxx);
          //保存人员照片到照片临时表中去
          VoHJXX_ZPLSB voZplsxx = new VoHJXX_ZPLSB();
          voZplsxx.setZplsid( (Long) hjxx_zplsbDAO.getId());
          voZplsxx.setSlh(poSlxxNew.getSlh());
          voZplsxx.setGmsfhm(poRyxx.getGmsfhm());
          voZplsxx.setRyid(poSlxxNew.getRyid());
          voZplsxx.setRynbid(poSlxxNew.getRynbid());
          voZplsxx.setZp(voRyzpxx.getZp());
          voZplsxx.setZpid(voRyzpxx.getZpid());
          voZplsxx.setCzrid(this.getUserInfo().getYhid());
          voZplsxx.setBcsj(now);
          voZplsxx.setJlbz("2");//20110524 hb 照片审核
          super.create(voZplsxx.toPoHJXX_ZPLSB());
        }
        //照片来源于省厅异地采集照片表(处理引用常表照片方式)
        else if (ZjConstant.ZPLYLX_SKYDCJZPB.equals(voZjslxx[i].getZplylx())) {
          ResultSet rs = null;
          Connection conn = null;
          PreparedStatement preparedstatement = null;

          String strSQL = null;
          StringBuffer strFromHQL = new StringBuffer();
          StringBuffer strUpdataHQL = new StringBuffer();
          YdzzServiceImpl ydzzImpl = new YdzzServiceImpl();
          Long zpid = null;
          String strGmsfhm = null;

          conn = ydzzImpl.getConn("ydcjjndi");
          if (conn == null) { //如果连接不上数据库
            throw new ServiceException(WSErrCode.ERR_ACTION_SERVICE_NOTEXIST,
                                       "无法建立与省库连接", null);
          }
          else {
            conn.setAutoCommit(false);

            try {
              strSQL =
                  "select * from ydcj_ydcjxxb where cjzt = '0' and gmsfhm = '" +
                  poRyxx.getGmsfhm() + "'";
              preparedstatement = conn.prepareStatement(strSQL);
              rs = preparedstatement.executeQuery(strSQL);
              if (!rs.next()) {
                throw new ServiceException(WSErrCode.ERR_SERVICE_BUSSINESSLIMIT,
                                           "无法找到该人采集信息。", null);
              }
              else {
                zpid = Long.valueOf(rs.getString("zpid"));
                strGmsfhm = rs.getString("gmsfhm");
              }

              strFromHQL.append("select sdzp from YDCJ_YDCJZPB ")
                  .append(" where zpid = '").append(zpid)
                  .append("'");
              rs = preparedstatement.executeQuery(strFromHQL.toString());
              VoBggzxx voBggzxx = new VoBggzxx();
              String strColumnValue = null;

              if (rs.next()) {
                if (rs.getClass().getName().toString().equals( //weblogic的连接池
                    "weblogic.jdbc.wrapper.ResultSet_oracle_jdbc_driver_OracleResultSetImpl")) {
                  Blob oblob = rs.getBlob(1);
                  //oracle.sql.BLOB oblob = (oracle.sql.BLOB) blob.getVendorObj();

                  //直接转换为byte
                  InputStream output = oblob.getBinaryStream();
                  try {
                    byte[] tmpByte = ydzzImpl.getBytes(output);
                    strColumnValue = tmpByte == null ? "" :
                        new String(Base64.getEncoder().encode(tmpByte)); //进行Base64编码
                  }
                  catch (Exception ex) {
                    throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER,
                                               "BOLB字段转换失败", null);
                  }
                }

                if (rs.getClass().getName().toString().equals( //webSphere的连接池
                    "com.ibm.ws.rsadapter.jdbc.WSJdbcResultSet")) {
                  oracle.sql.BLOB oblob = (oracle.sql.BLOB) rs.getBlob(1);
                  //直接转换为byte
                  InputStream output = oblob.getBinaryStream();
                  try {
                    byte[] tmpByte = ydzzImpl.getBytes(output);
                    strColumnValue = tmpByte == null ? "" :
                        new String(Base64.getEncoder().encode(tmpByte)); //进行Base64编码
                  }
                  catch (Exception ex) {
                    throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER,
                                               "BOLB字段转换失败", null);
                  }
                }
                voBggzxx.setZp(strColumnValue);
              }
              else {
                throw new ServiceException(WSErrCode.ERR_SERVICE_BUSSINESSLIMIT,
                                           "无法找到照片ID为" + voZjslxx[i].getZpid() +
                                           "照片信息。", null);
              }
              if (rs.next()) {
                throw new ServiceException(WSErrCode.ERR_SERVICE_BUSSINESSLIMIT,
                                           "该照片ID找到多条，信息保存失败。", null);
              }

              voBggzxx.setRynbid(voZjslxx[i].getRynbid());
              voBggzxx.setBggzlb(HjConstant.BGGZLB_QT_GZ);
              voBggzxx.setBggzrq(now.substring(0, 8));
              voBggzxx.setBggzxm("zp");
              voBggzxx.setSfbczpdzplsb(true);
              List voBggzxxList = new ArrayList();
              voBggzxxList.add(voBggzxx);
              VoBggzxxEx voBggzxxEx[] = new VoBggzxxEx[1];
              voBggzxxEx[0] = new VoBggzxxEx();
              voBggzxxEx[0].setRynbid(voZjslxx[i].getRynbid());
              voBggzxxEx[0].setFlag(1);
              voBggzxxEx[0].setBggzxxList(voBggzxxList);
              //调用变更更正功能，实现照片变更到人员照片表去中
              HjCommon hjCommon = new HjCommon();
             // hjCommon.setUserInfo(this.getUserInfo());
              Long hjywid = (Long) hjls_hjywlsbDAO.getId();
              hjCommon.saveHJYWLSXX(hjywid, PublicConstant.GNBH_HJ_BGGZYW,
                                    PublicConstant.HJYWLS_YWLX_GR, 1, null, now);
              hjCommon.saveBGGZXX(hjywid, null, voBggzxxEx,
                                  PublicConstant.GNBH_ZJ_2DZSLYW, now);

              strUpdataHQL.append(
                  "UPDATE YDCJ_YDCJXXB SET CJZT = 1 WHERE cjzt = '0' ")
                  .append(" and gmsfhm = '").append(strGmsfhm).append("'");
              preparedstatement.executeUpdate(strUpdataHQL.toString());

              if (conn != null) {
                conn.commit();
              }
            }
            catch (ServiceException ex) {
              conn.rollback();
              throw ex;
            }
            catch (DAOException ex) {
              conn.rollback();
              throw ex;
            }
            catch (Exception ex) {
              conn.rollback();
              throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER, ex);
            }
            finally {
              //关闭游标
              conn.close();
              DbUtils.close(rs);
              if (preparedstatement != null) {
                preparedstatement.close();
              }
            }
          }

        }
        //处理先受理后拍照方式
        else {
          //不用处理
        }

        //生成返回信息
        voZjslfhxx[i] = new VoZjslfhxx();
        voZjslfhxx[i].setNbslid(poSlxxNew.getNbslid());
        voZjslfhxx[i].setRynbid(poRyxxNew != null ? poRyxxNew.getRynbid() :
                                poRyxx.getRynbid());
        voZjslfhxx[i].setHhnbid(poRyxx.getHhnbid());
        voZjslfhxx[i].setMlpnbid(poRyxx.getMlpnbid());
        voZjslfhxx[i].setRyid(poRyxx.getRyid());
        voZjslfhxx[i].setGmsfhm(poRyxx.getGmsfhm());
        voZjslfhxx[i].setXm(poRyxx.getXm());
      }

      ///////////////////////////////////////////////////
      //生成业务返回信息
      voZjslywfhxx = new VoZjslywfhxx();
      voZjslywfhxx.setVoZjslfhxx(voZjslfhxx);

      //////////////////////////////////////////////
      //提交事务
    }
    catch (ServiceException ex) {
      //回滚事务
      throw ex;
    }
    catch (DAOException ex) {
      //回滚事务
      throw ex;
    }
    catch (Exception ex) {
      //回滚事务
      throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER, ex);
    }

    return voZjslywfhxx;
  }

  /**
   * 证件验收业务
   * @param voZjysxx - 证件验收信息VO数组
   * @param gnbh - 功能编号
   * @return
   * @throws ServiceException
   * @throws DAOException
   */
  public VoZjysywfhxx processZjysyw(VoZjysxx[] voZjysxx, String gnbh) throws
      ServiceException, DAOException {

    VoZjysywfhxx voZjysywfhxx = null;
    VoZjysfhxx voZjysfhxx[] = null;
    String strHQL = null;
    String now = StringUtils.getServiceTime();

    //数据校验
    if (gnbh == null || voZjysxx == null ||
        (voZjysxx != null && voZjysxx.length <= 0)) {
      return null;
    }

    try {
      //创建需要的DAO
      PojoInfo  zjyw_slxxbDAO = DAOFactory.createZJYW_SLXXBDAO();
      PojoInfo  zjyw_ysxxbDAO = DAOFactory.createZJYW_YSXXBDAO();
      PojoInfo  zjls_sfzywczbDAO = DAOFactory.createZJLS_SFZYWCZBDAO();
      PojoInfo  hjxx_czrkjbxxbDAO = DAOFactory.createHJXX_CZRKJBXXBDAO();
      PojoInfo  old_hjxx_czrkjbxxbDAO = DAOFactory.
          createOLD_HJXX_CZRKJBXXBDAO();

      /////////////////////////////////////
      //开始事务

      /////////////////////////////////////
      //换算证件验收状态
      String zjyszt = null;
      if (PublicConstant.GNBH_ZJ_PCSZJYSYW.equals(gnbh)) {
        zjyszt = ZjConstant.ZJ_YSZT_PCS;
      }
      else if (PublicConstant.GNBH_ZJ_QXZJYSYW.equals(gnbh)) {
        zjyszt = ZjConstant.ZJ_YSZT_QX;
      }
      else if (PublicConstant.GNBH_ZJ_DSZJYSYW.equals(gnbh)) {
        zjyszt = ZjConstant.ZJ_YSZT_DS;
      }
      else if (PublicConstant.GNBH_ZJ_STZJYSYW.equals(gnbh)) {
        zjyszt = ZjConstant.ZJ_YSZT_ST;
      }

      //////////////////////////////////////
      //业务限制判断
      VerifyBusinessLimit(gnbh, voZjysxx);

      ///////////////////////////////////////
      //处理派出所证件验收信息
      voZjysfhxx = new VoZjysfhxx[voZjysxx.length];
      for (int i = 0; i < voZjysxx.length; i++) {

        //得到受理信息
        PoZJYW_SLXXB poSlxx  = super.get(PoZJYW_SLXXB.class,voZjysxx[i].
            getNbslid());
        if (poSlxx == null) {
          throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER,
                                     "找不到验收信息对应的证件受理信息，无法完成派出所证件验收业务。", null);
        }

        //得到人员信息
//        PoHJXX_CZRKJBXXB poHJXX_CZRKJBXXB  = super.get(.class,
//            poSlxx.getRynbid());
//        if (poHJXX_CZRKJBXXB == null) {
//          throw new ServiceException(WSErrCode.ERR_SERVICE_BUSSINESSLOGIC,
//                                     "证件受理信息对应的人员信息不存在，无法完成证件审核业务。", null);
//        }
        //可能常口中不存在信息，要从历史表中查找 lzh modified here 20070209
        PoHJXX_CZRKJBXXB poHJXX_CZRKJBXXB = null;
        PoOLD_HJXX_CZRKJBXXB poOLD_HJXX_CZRKJBXXB = null;
        if (poSlxx != null && poSlxx.getRynbid() != null) {
          poHJXX_CZRKJBXXB = super.
              get(PoHJXX_CZRKJBXXB.class,poSlxx.getRynbid());

          if (poHJXX_CZRKJBXXB == null) {
            poOLD_HJXX_CZRKJBXXB = super.
                get(PoOLD_HJXX_CZRKJBXXB.class,poSlxx.getRynbid());

            if (poOLD_HJXX_CZRKJBXXB == null) {
              throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER,
                                         "该证件信息对应的常住人口基本信息不存在。", null);
            }

            try {
              poHJXX_CZRKJBXXB = new PoHJXX_CZRKJBXXB();
              BeanUtils.copyProperties(poHJXX_CZRKJBXXB, poOLD_HJXX_CZRKJBXXB);
            }
            catch (Exception ex) {
              throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER,
                                         "从poOLD_HJXX_CZRKJBXXB中复制信息出错！", null);
            }
          }
        }
        if (poHJXX_CZRKJBXXB == null) {
          throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER,
                                     "该证件对应的常住人口基本信息不存在。", null);
        }

        //数据范围权限限制
        if (!VerifyDataRangeByRynbid(gnbh,
                                     poSlxx.getRynbid())) {
          throw new ServiceException(WSErrCode.ERR_SERVICE_DATASCOPE,
                                     "派出所证件验收业务数据范围受到限制，无法完成派出所证件验收业务。", null);
        }

        //得到证件业务ID
        Long zjywid = (Long) zjls_sfzywczbDAO.getId();

        //根据验收状态转换更新受理信息表中的受理状态
        String zjslzt = null;
        //派出所验收
        if (ZjConstant.ZJ_YSZT_PCS.equals(zjyszt)) {
          zjslzt = (ZjConstant.ZJ_ZZXXCWLB_HG.equals(voZjysxx[i].getZzxxcwlb()) ?
                    ZjConstant.ZJ_BLBZ_2ID_PCSZJYSTG :
                    ZjConstant.ZJ_BLBZ_2ID_PCSZJYSBTG);
        }
        //区县验收
        else if (ZjConstant.ZJ_YSZT_QX.equals(zjyszt)) {
          zjslzt = (ZjConstant.ZJ_ZZXXCWLB_HG.equals(voZjysxx[i].getZzxxcwlb()) ?
                    ZjConstant.ZJ_BLBZ_2ID_QXZJYSTG :
                    ZjConstant.ZJ_BLBZ_2ID_QXZJYSBTG);
        }
        //地市验收
        else if (ZjConstant.ZJ_YSZT_DS.equals(zjyszt)) {
          zjslzt = (ZjConstant.ZJ_ZZXXCWLB_HG.equals(voZjysxx[i].getZzxxcwlb()) ?
                    ZjConstant.ZJ_BLBZ_2ID_DSZJYSTG :
                    ZjConstant.ZJ_BLBZ_2ID_DSZJYSBTG);
        }
        //省厅验收
        else if (ZjConstant.ZJ_YSZT_ST.equals(zjyszt)) {
          zjslzt = (ZjConstant.ZJ_ZZXXCWLB_HG.equals(voZjysxx[i].getZzxxcwlb()) ?
                    ZjConstant.ZJ_BLBZ_2ID_STZJYSTG :
                    ZjConstant.ZJ_BLBZ_2ID_STZJYSBTG);
        }

        //保存证件验收信息
        PoZJYW_YSXXB poYsxx = null;
        strHQL = "from PoZJYW_YSXXB where nbslid=" + voZjysxx[i].getNbslid() +
            " and yszt='" + zjyszt + "' and cxbz='" +
            PublicConstant.CXBZ_FCX + "' ";
        List ysxxList =super.findAllByHQL(strHQL);
        if (ysxxList != null && ysxxList.size() > 0) {
          poYsxx = (PoZJYW_YSXXB) ysxxList.get(0);
          poYsxx.setZzxxcwlb(voZjysxx[i].getZzxxcwlb()); //制证信息错误类别
          poYsxx.setCwms(voZjysxx[i].getCwms()); //错误描述
          poYsxx.setZjywid(zjywid); //证件业务ID
          poYsxx.setCzrid(this.getUserInfo().getYhid());
          poYsxx.setCzsj(now);
         super.update(poYsxx);
        }
        else {
          poYsxx = new PoZJYW_YSXXB();

          //lzh modified here 20070209添加字段
          try {
            BeanUtils.copyProperties(poYsxx, poHJXX_CZRKJBXXB); //从常住人口PO中取得并装载到PO中
            BeanUtils.copyProperties(poYsxx, poSlxx); //从受理信息PO中取得并装载到PO中
          }
          catch (Exception ex) {
            throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER,
                                       "从常表和受理信息表中装载信息中异常。", null);
          }
          poYsxx.setSlzt(zjslzt);
          poYsxx.setCzyid(this.getUserInfo().getYhid());
          poYsxx.setSlrid(poSlxx.getCzyid());
          poYsxx.setSlsj(poSlxx.getCzsj());

          poYsxx.setYsslid( (Long) zjyw_ysxxbDAO.getId()); //验收受理ID
          poYsxx.setYszt(zjyszt);
          poYsxx.setNbslid(poSlxx.getNbslid()); //内部受理ID
          poYsxx.setRynbid(poSlxx.getRynbid()); //人员内部ID
          poYsxx.setZzxxcwlb(voZjysxx[i].getZzxxcwlb()); //制证信息错误类别
          poYsxx.setCwms(voZjysxx[i].getCwms()); //错误描述
          poYsxx.setCxbz(PublicConstant.CXBZ_FCX);
          poYsxx.setZjywid(zjywid); //证件业务ID
          poYsxx.setCzrid(this.getUserInfo().getYhid());
          poYsxx.setCzsj(now);
          super.create(poYsxx); //保存证件验收信息
        }

        //保存受理信息的质量反馈信息部分
        if (!ZjConstant.ZJ_ZZXXCWLB_HG.equals(voZjysxx[i].getZzxxcwlb())) {
          poSlxx.setZzxxcwlb(poYsxx.getZzxxcwlb());
          poSlxx.setCwms(poYsxx.getCwms());
          poSlxx.setJydw(this.getXtDwxx_sm());
          poSlxx.setJyrxm(getUserInfo().getYhxm());
          poSlxx.setJyrq(now.substring(0, 8));
          poSlxx.setSlzt(zjslzt);
          poSlxx.setZlhkzt(zjslzt);
          poSlxx.setHksj(now);
          poSlxx.setCldw(null);
          poSlxx.setClrq(null);
          poSlxx.setClqk(null);
         super.update(poSlxx);
        }
        //处理证件质量控制回馈信息中的错误未处理的记录
        else {
          if (poSlxx.getZzxxcwlb() != null &&
              poSlxx.getZzxxcwlb().trim().length() > 0) {
            poSlxx.setCldw(this.getUserInfo().getDwdm());
            poSlxx.setClrq(now.substring(0, 8));
            poSlxx.setClqk("已处理");
          }
          poSlxx.setSlzt(zjslzt);
         super.update(poSlxx);
        }

        //保存身份证业务操作信息
        saveSfzywlsXtrz(zjywid, gnbh,
                        poSlxx.getSlh(), poSlxx.getSlzt());

        //生成返回信息
        voZjysfhxx[i] = new VoZjysfhxx();
        voZjysfhxx[i].setNbslid(poYsxx.getNbslid());
        voZjysfhxx[i].setYsslid(poYsxx.getYsslid());
      }

      ///////////////////////////////////////
      //生成业务返回信息
      voZjysywfhxx = new VoZjysywfhxx();
      voZjysywfhxx.setVoZjysfhxx(voZjysfhxx);

      ///////////////////////////////////////
      //提交事务
    }
    catch (DAOException ex2) {
      //回滚事务
      throw ex2;
    }
    catch (ServiceException ex) {
      //回滚事务
      throw ex;
    }

    return voZjysywfhxx;
  }

  /**
   * 派出所证件验收业务
   * @param voZjysxx - 证件验收信息VO数组
   * @return
   * @throws ServiceException
   * @throws DAOException
   */
  public VoZjysywfhxx processPcsZjysyw(VoZjysxx[] voZjysxx) throws
      ServiceException, DAOException {
    return this.processZjysyw(voZjysxx, PublicConstant.GNBH_ZJ_PCSZJYSYW);
  }

  /**
   * 区县证件验收业务
   * @param voZjysxx  - 证件验收信息数组
   * @return
   * @throws ServiceException
   * @throws DAOException
   */
  public VoZjysywfhxx processQxZjysyw(VoZjysxx[] voZjysxx) throws
      ServiceException, DAOException {
    return this.processZjysyw(voZjysxx, PublicConstant.GNBH_ZJ_QXZJYSYW);
  }

  /**
   * 地市证件验收业务
   * @param voZjysxx - 证件验收信息数组
   * @return
   * @throws ServiceException
   * @throws DAOException
   */
  public VoZjysywfhxx processDsZjysyw(VoZjysxx[] voZjysxx) throws
      ServiceException, DAOException {

    return this.processZjysyw(voZjysxx, PublicConstant.GNBH_ZJ_DSZJYSYW);
  }

  /**
   * 省厅证件验收提交业务
   * @param voZjysxx  - 证件验收信息数组
   * @return
   * @throws ServiceException
   * @throws DAOException
   */
  public VoZjysywfhxx processStZjysyw(VoZjysxx[] voZjysxx) throws
      ServiceException, DAOException {

    return this.processZjysyw(voZjysxx, PublicConstant.GNBH_ZJ_STZJYSYW);
  }

  /**
   * 二代证件挂失提交业务
   * @param voZjgsxx[] - 证件挂失信息数组
   * @return com.hzjc.hz2004.vo.VoZjgsywfhxx
   * @roseuid 405C544B030D
   */
  public VoZjgsywfhxx processZjgsyw(VoZjgsxx[] voZjgsxx) throws
      ServiceException, DAOException {

    String now = StringUtils.getServiceTime();

    //数据校验
    if (voZjgsxx == null || (voZjgsxx != null && voZjgsxx.length <= 0)) {
      return null;
    }

    //_log.info("证件挂失业务_开始");
    VoZjgsywfhxx voZjgsywfhxx = null;
    VoZjgsfhxx[] arrayVoZjgsfhxxs = new VoZjgsfhxx[voZjgsxx.length];
    try {
      ///////////////////////////////////////////////////////////////////////
      //开始事务
      ///////////////////////////////////////////////////////////////////////
      //_log.info("开始事务");

      //创建需要调用的DAO
      PojoInfo  zjyw_gsxxbDAO = DAOFactory.createZJYW_GSXXBDAO();
      PojoInfo  zjxx_jmsfzxxbDAO = DAOFactory.createZJXX_JMSFZXXBDAO();
      PojoInfo  zjyw_slxxbDAO = DAOFactory.createZJYW_SLXXBDAO();
      PojoInfo  zjls_sfzywczbDAO = DAOFactory.createZJLS_SFZYWCZBDAO();
      PojoInfo  hjxx_czrkjbxxbDAO = DAOFactory.createHJXX_CZRKJBXXBDAO();
      PojoInfo  hjxx_mlpxxxxbDAO = DAOFactory.createHJXX_MLPXXXXBDAO();

      ///////////////////////////////////////////////////////////////////////////
      //1、业务限制判断
      ///////////////////////////////////////////////////////////////////////////
      //_log.info("1、业务限制判断");
      VerifyBusinessLimit(PublicConstant.GNBH_ZJ_ZJGSYW, voZjgsxx);
      ////////////////////////////////////////////////////////////////

      for (int i = 0; i < voZjgsxx.length; i++) {

        //定义全局调用变量
        Long lZjywid = (Long) zjls_sfzywczbDAO.getId(); //证件业务ID
        Long lGsslid = (Long) zjyw_gsxxbDAO.getId(); //挂失受理ID

        VoZjgsxx aVoZjgsxx = voZjgsxx[i];
        Long lNbsfzid = aVoZjgsxx.getNbsfzid();
        //////////////////////////////////////////////////////////////////////////
        //2、保存证件挂失信息
        /////////////////////////////////////////////////////////////////////////
        PoZJYW_GSXXB poZJYW_GSXXB = new PoZJYW_GSXXB();
        try {
          BeanUtils.copyProperties(poZJYW_GSXXB, aVoZjgsxx); //将证件挂失信息复制到
        }
        //InvocationTargetException IllegalAccessException
        catch (Exception ex) {
          throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER,
                                     "将客户端传入的参数装载到证件挂失信息中发生异常！",
                                     ex);
        }
        //_log.info("2、保存证件挂失信息");
        poZJYW_GSXXB.setCxbz(PublicConstant.CXBZ_FCX);
        poZJYW_GSXXB.setZjywid(lZjywid); //证件业务ID
        poZJYW_GSXXB.setGsslid(lGsslid); //挂失受理ID
        poZJYW_GSXXB.setCzrid(this.getUserInfo().getYhid());
        poZJYW_GSXXB.setCzsj(now);
        poZJYW_GSXXB.setYwbz(PublicConstant.GNBH_ZJ_ZJSJYW);
        poZJYW_GSXXB.setCzyid(this.getUserInfo().getYhid());
        super.create(poZJYW_GSXXB); //插入挂失信息表
        //给证件挂失返回信息的数组赋值
        arrayVoZjgsfhxxs[i] = new VoZjgsfhxx(lGsslid, lNbsfzid);

        PoZJXX_JMSFZXXB poZJXX_JMSFZXXB = super.
            get(PoZJXX_JMSFZXXB.class,
            lNbsfzid); //根据内部身份证ID得到居民身份证信息PO
        if (poZJXX_JMSFZXXB != null) {
          ///////////////////////////////////////////////
          //数据范围权限限制
          PoHJXX_CZRKJBXXB poRyxxNew = null;
          String strHQL = "from PoHJXX_CZRKJBXXB where jlbz='" +
              PublicConstant.JLBZ_ZX + "' and cxbz='" + PublicConstant.CXBZ_FCX +
              "' and ryid=" + poZJXX_JMSFZXXB.getRyid();
          List ryxxList =super.findAllByHQL(strHQL);
          if (ryxxList != null && ryxxList.size() > 0) {
            poRyxxNew = (PoHJXX_CZRKJBXXB) ryxxList.get(0);
          }
          if (poRyxxNew != null &&
              !VerifyDataRangeByRynbid(PublicConstant.GNBH_ZJ_ZJGSYW,
                                       poRyxxNew.getRynbid())) {
            throw new ServiceException(WSErrCode.ERR_SERVICE_DATASCOPE,
                                       "证件挂失业务数据范围受到限制，不能办理！", null);
          }

          /////////////////////////////////////////////////////////////////////////
          //3、设置 证件状态 为挂失
          //////////////////////////////////////////////////////////////////////////
          //_log.info("3、设置 证件状态 为挂失");
          poZJXX_JMSFZXXB.setZjzt(ZjConstant.ZJ_ZJZT_GS); //设置状态
         super.update(poZJXX_JMSFZXXB); //更新证件状态

          //向证件挂失表中增加人信息
          poZJYW_GSXXB.setGmsfhm(poRyxxNew.getGmsfhm());
          poZJYW_GSXXB.setXm(poRyxxNew.getXm());
          poZJYW_GSXXB.setXb(poRyxxNew.getXb());
          poZJYW_GSXXB.setMz(poRyxxNew.getMz());
          poZJYW_GSXXB.setCsrq(poRyxxNew.getCsrq());
          poZJYW_GSXXB.setCssj(poRyxxNew.getCssj());
          poZJYW_GSXXB.setCsdssxq(poRyxxNew.getCsdssxq());
          poZJYW_GSXXB.setZpid(poRyxxNew.getZpid());
          poZJYW_GSXXB.setRynbid(poRyxxNew.getRynbid());
          //向证件挂失表中增加居民身份证信息
          poZJYW_GSXXB.setRyid(poZJXX_JMSFZXXB.getRyid());
          poZJYW_GSXXB.setQfjg(poZJXX_JMSFZXXB.getQfjg());
          poZJYW_GSXXB.setYxqxqsrq(poZJXX_JMSFZXXB.getYxqxqsrq());
          poZJYW_GSXXB.setYxqxjzrq(poZJXX_JMSFZXXB.getYxqxjzrq());
          poZJYW_GSXXB.setSlyy(poZJXX_JMSFZXXB.getSlyy());
          poZJYW_GSXXB.setBzyy(poZJXX_JMSFZXXB.getBzyy());
          poZJYW_GSXXB.setZz(poZJXX_JMSFZXXB.getZz());
          poZJYW_GSXXB.setZz1(poZJXX_JMSFZXXB.getZz1());
          poZJYW_GSXXB.setZz2(poZJXX_JMSFZXXB.getZz2());
          poZJYW_GSXXB.setZz3(poZJXX_JMSFZXXB.getZz3());
          poZJYW_GSXXB.setZz4(poZJXX_JMSFZXXB.getZz4());
          poZJYW_GSXXB.setKtglh(poZJXX_JMSFZXXB.getKtglh());
          poZJYW_GSXXB.setZjlb(poZJXX_JMSFZXXB.getZjlb());
          poZJYW_GSXXB.setZjzt(poZJXX_JMSFZXXB.getZjzt());
          //向证件挂失表中增加门楼牌信息
          PoHJXX_MLPXXXXB poMlpxx = null;
          poMlpxx  = super.get(PoHJXX_MLPXXXXB.class,poRyxxNew.getMlpnbid());
          if (poMlpxx != null) {
            poZJYW_GSXXB.setMlpnbid(poMlpxx.getMlpnbid());
            poZJYW_GSXXB.setSsxq(poMlpxx.getSsxq());
            poZJYW_GSXXB.setJlx(poMlpxx.getJlx());
            poZJYW_GSXXB.setMlph(poMlpxx.getMlph());
            poZJYW_GSXXB.setMlxz(poMlpxx.getMlxz());
            poZJYW_GSXXB.setPcs(poMlpxx.getPcs());
            poZJYW_GSXXB.setZrq(poMlpxx.getZrq());
            poZJYW_GSXXB.setXzjd(poMlpxx.getXzjd());
            poZJYW_GSXXB.setJcwh(poMlpxx.getJcwh());
            poZJYW_GSXXB.setPxh(poMlpxx.getPxh());
          }

          //////////////////////////////////////////////////////////////////////////
          //4、IF 有受理信息 THEN 修改 受理状态 为 挂失
          ////////////////////////////////////////////////////////////////////////
          //修改受理状态
          if (ZjConstant.ZJ_ZJLB_EDZ.equals(poZJXX_JMSFZXXB.getZjlb())) {
            //_log.info("4、IF 有二代证件受理信息 THEN 修改 受理状态 为 挂失");
            //findEdzSlxxAndUpdateSlztByNbsfzid(lNbsfzid,
            //                                 ZjConstant.ZJ_BLBZ_2ID_YGS,
            //                                 PublicConstant.GNBH_ZJ_ZJGSYW);
            //modi by hh 20060314
            //findEdzSlxxAndUpdateSlztByNbsfzid(lNbsfzid,poZJXX_JMSFZXXB.getYxqxqsrq(),
            //                                   ZjConstant.ZJ_BLBZ_2ID_YGS,
            //                                   PublicConstant.GNBH_ZJ_ZJGSYW);
            //add hb 20061226
            findEdzSlxxAndUpdateSlztByGmsfhm(poZJXX_JMSFZXXB.getGmsfhm(),
                                             poZJXX_JMSFZXXB.getYxqxqsrq(),
                                             ZjConstant.ZJ_BLBZ_2ID_YGS,
                                             PublicConstant.GNBH_ZJ_ZJGSYW);
          }
          else if (ZjConstant.ZJ_ZJLB_YDZ.equals(poZJXX_JMSFZXXB.getZjlb())) {
            //_log.info("4、IF 有一代证件受理信息 THEN 修改 受理状态 为 挂失");
            findYdzSlxxAndUpdateSlztByNbsfzid(lNbsfzid,
                                              ZjConstant.ZJ_BLBZ_1ID_YGS);
          }
        }
        else {
          throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER,
                                     "该受理信息对应的居民身份证信息不存在.", null);
        }

        //插入挂失信息表
        super.create(poZJYW_GSXXB);

        /////////////////////////////////////////////////////////////////////////
        //5、保存身份证业务操作信息
        //6、保存操作日志
        ////////////////////////////////////////////////////////////////////////
        ////_log.info("5、保存身份证业务操作信息 6、保存操作日志");
        //修改受理状态时，已记录身份证操作业务
        saveSfzywlsXtrz(lZjywid, PublicConstant.GNBH_ZJ_ZJGSYW, null, null);

      }

      /////////////////////////////////////////////////////////////////////////
      //提交业务
      /////////////////////////////////////////////////////////////////////////
      //_log.info("提交业务");

      /////////////////////////////////////////////////////////////////////////
      //7、返回信息处理
      ///////////////////////////////////////////////////////////////////////////
      voZjgsywfhxx = new VoZjgsywfhxx();
      //voZjgsywfhxx.setZjywid(lZjywid);
      voZjgsywfhxx.setVoZjgsfhxx(arrayVoZjgsfhxxs);

      //_log.info("证件挂失业务_结束");
    }
    //数据库层的异常处理
    catch (DAOException ex1) {
      throw ex1;
    }
    //业务的异常处理
    catch (ServiceException ex) {
      throw ex;
    }
    return voZjgsywfhxx;
  }

  /**
   * 二代证件收交提交业务
   * @param voZjsjxx[] - 证件收交信息数组
   * @return com.hzjc.hz2004.vo.VoZjsjywfhxx
   * @roseuid 405C5A050315
   */
  public VoZjsjywfhxx processZjsjyw(VoZjsjxx[] voZjsjxx) throws
      ServiceException, DAOException {

    String now = StringUtils.getServiceTime();

    //数据校验
    if (voZjsjxx == null || (voZjsjxx != null && voZjsjxx.length <= 0)) {
      return null;
    }

    //_log.info("证件收交业务_开始");
    VoZjsjywfhxx voZjsjywfhxx = null;
    VoZjsjfhxx[] arrayVoZjsjfhxxs = new VoZjsjfhxx[voZjsjxx.length];
    try {
      /////////////////////////////////////////////////////////////////
      //1、开始事务
      /////////////////////////////////////////////////////////////////
      //_log.info("1、开始事务");

      PojoInfo  zjyw_sjxxbDAO = DAOFactory.createZJYW_SJXXBDAO();
      PojoInfo  zjxx_jmsfzxxbDAO = DAOFactory.createZJXX_JMSFZXXBDAO();
      PojoInfo  zjyw_slxxbDAO = DAOFactory.createZJYW_SLXXBDAO();
      PojoInfo  zjls_sfzywczbDAO = DAOFactory.createZJLS_SFZYWCZBDAO();
      PojoInfo  hjxx_czrkjbxxbDAO = DAOFactory.createHJXX_CZRKJBXXBDAO();
      PojoInfo  hjxx_mlpxxxxbDAO = DAOFactory.createHJXX_MLPXXXXBDAO();

      ///////////////////////////////////////////////////////////////////////////
      //2、业务限制判断
      ///////////////////////////////////////////////////////////////////////////
      //_log.info("2、业务限制判断");
      VerifyBusinessLimit(PublicConstant.GNBH_ZJ_ZJSJYW, voZjsjxx);
      //////////////////////////////////////////////////////////////

      for (int i = 0; i < voZjsjxx.length; i++) {
        VoZjsjxx aVoZjsjxx = voZjsjxx[i];
        Long lZjywid = (Long) zjls_sfzywczbDAO.getId(); //证件业务ID
        Long lSjslid = (Long) zjyw_sjxxbDAO.getId(); //收交受理ID
        /////////////////////////////////////////////////////////////
        //3、保存收交信息
        /////////////////////////////////////////////////////////////
        PoZJYW_SJXXB poZJYW_SJXXB = new PoZJYW_SJXXB();
        Long lNbsfzid = aVoZjsjxx.getNbsfzid();
        try {
          BeanUtils.copyProperties(poZJYW_SJXXB, aVoZjsjxx);
        }
        catch (Exception ex) {
          throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER,
                                     "将客户端传入的参数装载转换到证件收交信息发生异常.", ex);
        }
        //_log.info("3、保存收交信息");
        poZJYW_SJXXB.setCxbz(PublicConstant.CXBZ_FCX);
        poZJYW_SJXXB.setZjywid(lZjywid); //证件业务ID
        poZJYW_SJXXB.setSjyy(aVoZjsjxx.getSjyy()); //收交原因
        poZJYW_SJXXB.setSjslid(lSjslid); //收交受理ID
        poZJYW_SJXXB.setCzrid(this.getUserInfo().getYhid());
        poZJYW_SJXXB.setCzsj(now);
        poZJYW_SJXXB.setYwbz(PublicConstant.GNBH_ZJ_ZJSJYW);
        poZJYW_SJXXB.setCzyid(this.getUserInfo().getYhid());
        super.create(poZJYW_SJXXB);
        //给证件收交返回数组赋值
        arrayVoZjsjfhxxs[i] = new VoZjsjfhxx(lSjslid, lNbsfzid);

        //////////////////////////////////////////////////////////////////
        //4、设置 证件状态 为收交
        /////////////////////////////////////////////////////////////////
        PoZJXX_JMSFZXXB poZJXX_JMSFZXXB = super.get(PoZJXX_JMSFZXXB.class,
            lNbsfzid);
        if (poZJXX_JMSFZXXB != null) {
          /////////////////////////////////////////////////////////////////////////////
          //数据范围权限限制
          PoHJXX_CZRKJBXXB poRyxxNew = null;
          String strHQL = "from PoHJXX_CZRKJBXXB where jlbz='" +
              PublicConstant.JLBZ_ZX + "' and cxbz='" + PublicConstant.CXBZ_FCX +
              "' and ryid=" + poZJXX_JMSFZXXB.getRyid();
          List ryxxList =super.findAllByHQL(strHQL);
          if (ryxxList != null && ryxxList.size() > 0) {
            poRyxxNew = (PoHJXX_CZRKJBXXB) ryxxList.get(0);
          }
          if (poRyxxNew != null &&
              !VerifyDataRangeByRynbid(PublicConstant.GNBH_ZJ_ZJSJYW,
                                       poRyxxNew.getRynbid())) {
            throw new ServiceException(WSErrCode.ERR_SERVICE_DATASCOPE,
                                       "证件收交业务数据范围受到限制，不能办理！", null);
          }

          //_log.info("4、设置 证件状态 为收交");
          poZJXX_JMSFZXXB.setZjzt(ZjConstant.ZJ_ZJZT_SH); //证件收回
          poZJXX_JMSFZXXB.setSjyy(aVoZjsjxx.getSjyy()); //收交原因
         super.update(poZJXX_JMSFZXXB); //更新居民身份证信息

          //向证件收交表中增加人信息
          poZJYW_SJXXB.setGmsfhm(poRyxxNew.getGmsfhm());
          poZJYW_SJXXB.setXm(poRyxxNew.getXm());
          poZJYW_SJXXB.setXb(poRyxxNew.getXb());
          poZJYW_SJXXB.setMz(poRyxxNew.getMz());
          poZJYW_SJXXB.setCsrq(poRyxxNew.getCsrq());
          poZJYW_SJXXB.setCssj(poRyxxNew.getCssj());
          poZJYW_SJXXB.setCsdssxq(poRyxxNew.getCsdssxq());
          poZJYW_SJXXB.setZpid(poRyxxNew.getZpid());
          poZJYW_SJXXB.setRynbid(poRyxxNew.getRynbid());
          //向证件收交表中增加居民身份证信息
          poZJYW_SJXXB.setRyid(poZJXX_JMSFZXXB.getRyid());
          poZJYW_SJXXB.setQfjg(poZJXX_JMSFZXXB.getQfjg());
          poZJYW_SJXXB.setYxqxqsrq(poZJXX_JMSFZXXB.getYxqxqsrq());
          poZJYW_SJXXB.setYxqxjzrq(poZJXX_JMSFZXXB.getYxqxjzrq());
          poZJYW_SJXXB.setSlyy(poZJXX_JMSFZXXB.getSlyy());
          poZJYW_SJXXB.setBzyy(poZJXX_JMSFZXXB.getBzyy());
          poZJYW_SJXXB.setZz(poZJXX_JMSFZXXB.getZz());
          poZJYW_SJXXB.setZz1(poZJXX_JMSFZXXB.getZz1());
          poZJYW_SJXXB.setZz2(poZJXX_JMSFZXXB.getZz2());
          poZJYW_SJXXB.setZz3(poZJXX_JMSFZXXB.getZz3());
          poZJYW_SJXXB.setZz4(poZJXX_JMSFZXXB.getZz4());
          poZJYW_SJXXB.setKtglh(poZJXX_JMSFZXXB.getKtglh());
          poZJYW_SJXXB.setZjlb(poZJXX_JMSFZXXB.getZjlb());
          poZJYW_SJXXB.setZjzt(poZJXX_JMSFZXXB.getZjzt());
          //向证件收交表中增加门楼牌信息
          PoHJXX_MLPXXXXB poMlpxx = null;
          poMlpxx  = super.get(PoHJXX_MLPXXXXB.class,poRyxxNew.getMlpnbid());
          if (poMlpxx != null) {
            poZJYW_SJXXB.setMlpnbid(poMlpxx.getMlpnbid());
            poZJYW_SJXXB.setSsxq(poMlpxx.getSsxq());
            poZJYW_SJXXB.setJlx(poMlpxx.getJlx());
            poZJYW_SJXXB.setMlph(poMlpxx.getMlph());
            poZJYW_SJXXB.setMlxz(poMlpxx.getMlxz());
            poZJYW_SJXXB.setPcs(poMlpxx.getPcs());
            poZJYW_SJXXB.setZrq(poMlpxx.getZrq());
            poZJYW_SJXXB.setXzjd(poMlpxx.getXzjd());
            poZJYW_SJXXB.setJcwh(poMlpxx.getJcwh());
            poZJYW_SJXXB.setPxh(poMlpxx.getPxh());
          }

          ///////////////////////////////////////////////////////////////////
          //5、IF 有受理信息 THEN 修改 受理状态 为 收交
          ///////////////////////////////////////////////////////////////////
          //修改受理状态
          if (ZjConstant.ZJ_ZJLB_EDZ.equals(poZJXX_JMSFZXXB.getZjlb())) {
            //_log.info("5、IF 有二代证件受理信息 THEN 修改 受理状态 为 收交");
            // findEdzSlxxAndUpdateSlztByNbsfzid(lNbsfzid,
            //                                  ZjConstant.ZJ_BLBZ_2ID_YSJ,
            //                                  PublicConstant.GNBH_ZJ_ZJSJYW);
            // modi by hh 20060314
            //findEdzSlxxAndUpdateSlztByNbsfzid(lNbsfzid,poZJXX_JMSFZXXB.getYxqxqsrq(),
            //                                  ZjConstant.ZJ_BLBZ_2ID_YSJ,
            //                                 PublicConstant.GNBH_ZJ_ZJSJYW);
            //add hb 20061226
            findEdzSlxxAndUpdateSlztByGmsfhm(poZJXX_JMSFZXXB.getGmsfhm(),
                                             poZJXX_JMSFZXXB.getYxqxqsrq(),
                                             ZjConstant.ZJ_BLBZ_2ID_YSJ,
                                             PublicConstant.GNBH_ZJ_ZJSJYW);

          }
          else if (ZjConstant.ZJ_ZJLB_YDZ.equals(poZJXX_JMSFZXXB.getZjlb())) {
            //_log.info("5、IF 有一代证件受理信息 THEN 修改 受理状态 为 收交");
            findYdzSlxxAndUpdateSlztByNbsfzid(lNbsfzid,
                                              ZjConstant.ZJ_BLBZ_1ID_YSJ);
          }
        }
        else {
          throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER,
                                     "该证件收交信息对应的居民身份证信息不存在.", null);
        }

        //保存收交信息
        super.create(poZJYW_SJXXB);
        ///////////////////////////////////////////////////////////////////////
        //6、保存身份证业务操作信息
        //7、保存操作日志
        ////////////////////////////////////////////////////////////////////////
        ////_log.info("6、保存身份证业务操作信息 7、保存操作日志");
        saveSfzywlsXtrz(lZjywid, PublicConstant.GNBH_ZJ_ZJSJYW, null, null);

      }

      ///////////////////////////////////////////////////////////////////////
      //9、提交事务
      /////////////////////////////////////////////////////////////////////////
      //_log.info("9、提交事务");

      /////////////////////////////////////////////////////////////////////////
      //8、返回信息处理
      ///////////////////////////////////////////////////////////////////////////
      voZjsjywfhxx = new VoZjsjywfhxx();
      //voZjsjywfhxx.setZjywid(lZjywid);
      voZjsjywfhxx.setVoZjsjfhxx(arrayVoZjsjfhxxs);

      //_log.info("证件收交业务_结束");
    }
    catch (ServiceException ex1) {
      throw ex1;
    }
    catch (DAOException ex1) {
      throw ex1;
    }
    return voZjsjywfhxx;
  }

  /**
   * 二代证件销毁提交业务
   * @param voZjxhxx[] - 证件销毁信息数组
   * @return com.hzjc.hz2004.vo.VoZjxhywfhxx
   * @roseuid 405C5E35008C
   */
  public VoZjxhywfhxx processZjxhyw(VoZjxhxx[] voZjxhxx) throws
      ServiceException, DAOException {

    String now = StringUtils.getServiceTime();

    //数据校验
    if (voZjxhxx == null || (voZjxhxx != null && voZjxhxx.length <= 0)) {
      return null;
    }

    //_log.info("证件销毁业务_开始");
    VoZjxhywfhxx voZjxhywfhxx = null;
    VoZjxhfhxx[] arrayVoZjxhfhxxs = new VoZjxhfhxx[voZjxhxx.length];
    try {
      ///////////////////////////////////////////////////////////////////////////
      //1、开始事务
      ///////////////////////////////////////////////////////////////////////////
      //_log.info("1、开始事务");

      //创建需要的DAO
      PojoInfo  zjls_sfzywczbDAO = DAOFactory.createZJLS_SFZYWCZBDAO();
      PojoInfo  zjxx_jmsfzxxbDAO = DAOFactory.createZJXX_JMSFZXXBDAO();
      PojoInfo  zjyw_xhxxbDAO = DAOFactory.createZJYW_XHXXBDAO();
      PojoInfo  hjxx_czrkjbxxbDAO = DAOFactory.createHJXX_CZRKJBXXBDAO();
      PojoInfo  hjxx_mlpxxxxbDAO = DAOFactory.createHJXX_MLPXXXXBDAO();

      //全局变量
      Long lZjywid = (Long) zjls_sfzywczbDAO.getId();

      ///////////////////////////////////////////////////////////////////////////
      //2、业务限制判断
      ///////////////////////////////////////////////////////////////////////////
      //_log.info("2、业务限制判断");
      VerifyBusinessLimit(PublicConstant.GNBH_ZJ_ZJXHYW, voZjxhxx);
      //////////////////////////////////////////////////////////////

      for (int i = 0; i < voZjxhxx.length; i++) {
        VoZjxhxx aVoZjxhxx = voZjxhxx[i];
        Long lNbsfzid = aVoZjxhxx.getNbsfzid(); //证件业务ID
        Long lXhxxid = (Long) zjyw_xhxxbDAO.getId(); //销毁信息ID

        /////////////////////////////////////////////////////////////////////////
        //3、保存销毁信息
        ////////////////////////////////////////////////////////////////////////
        PoZJYW_XHXXB poZJYW_XHXXB = new PoZJYW_XHXXB();
        try {
          BeanUtils.copyProperties(poZJYW_XHXXB, aVoZjxhxx);
        }
        catch (Exception ex) {
          throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER,
                                     "将客户端传入的参数装载转换到证件销毁信息中发生异常.", ex);
        }
        poZJYW_XHXXB.setCxbz(PublicConstant.CXBZ_FCX);
        poZJYW_XHXXB.setZjywid(lZjywid); //证件业务ID
        poZJYW_XHXXB.setXhxxid(lXhxxid); //销毁信息ID
        poZJYW_XHXXB.setCzrid(this.getUserInfo().getYhid());
        poZJYW_XHXXB.setCzsj(now);
        poZJYW_XHXXB.setYwbz(PublicConstant.GNBH_ZJ_ZJSJYW);
        poZJYW_XHXXB.setCzyid(this.getUserInfo().getYhid());
        super.create(poZJYW_XHXXB); //保存证件销毁信息
        //给销毁返回数组信息赋值
        arrayVoZjxhfhxxs[i] = new VoZjxhfhxx(lXhxxid, lNbsfzid);

        //////////////////////////////////////////////////////////////////////////
        //4、设置 证件状态 为销毁
        //////////////////////////////////////////////////////////////////////////
        PoZJXX_JMSFZXXB poZJXX_JMSFZXXB = super.
            get(PoZJXX_JMSFZXXB.class,
            lNbsfzid); //得到该人对应的居民身份证信息
        if (poZJXX_JMSFZXXB != null) {

          /////////////////////////////////////////////////////////////////////////////
          //数据范围权限限制
          PoHJXX_CZRKJBXXB poRyxxNew = null;
          String strHQL = "from PoHJXX_CZRKJBXXB where jlbz='" +
              PublicConstant.JLBZ_ZX + "' and cxbz='" + PublicConstant.CXBZ_FCX +
              "' and ryid=" + poZJXX_JMSFZXXB.getRyid();
          List ryxxList =super.findAllByHQL(strHQL);
          if (ryxxList != null && ryxxList.size() > 0) {
            poRyxxNew = (PoHJXX_CZRKJBXXB) ryxxList.get(0);
          }
          if (poRyxxNew != null &&
              !VerifyDataRangeByRynbid(PublicConstant.GNBH_ZJ_ZJXHYW,
                                       poRyxxNew.getRynbid())) {
            throw new ServiceException(WSErrCode.ERR_SERVICE_DATASCOPE,
                                       "证件销毁业务数据范围受到限制，不能办理！", null);
          }

          //_log.info("4、设置 证件状态 为销毁");
          poZJXX_JMSFZXXB.setZjzt(ZjConstant.ZJ_ZJZT_XH); //设置状态
         super.update(poZJXX_JMSFZXXB); //更新证件状态

          //向证件销毁表中增加人信息
          poZJYW_XHXXB.setGmsfhm(poRyxxNew.getGmsfhm());
          poZJYW_XHXXB.setXm(poRyxxNew.getXm());
          poZJYW_XHXXB.setXb(poRyxxNew.getXb());
          poZJYW_XHXXB.setMz(poRyxxNew.getMz());
          poZJYW_XHXXB.setCsrq(poRyxxNew.getCsrq());
          poZJYW_XHXXB.setCssj(poRyxxNew.getCssj());
          poZJYW_XHXXB.setCsdssxq(poRyxxNew.getCsdssxq());
          poZJYW_XHXXB.setZpid(poRyxxNew.getZpid());
          poZJYW_XHXXB.setRynbid(poRyxxNew.getRynbid());
          //向证件销毁表中增加居民身份证信息
          poZJYW_XHXXB.setRyid(poZJXX_JMSFZXXB.getRyid());
          poZJYW_XHXXB.setQfjg(poZJXX_JMSFZXXB.getQfjg());
          poZJYW_XHXXB.setYxqxqsrq(poZJXX_JMSFZXXB.getYxqxqsrq());
          poZJYW_XHXXB.setYxqxjzrq(poZJXX_JMSFZXXB.getYxqxjzrq());
          poZJYW_XHXXB.setSlyy(poZJXX_JMSFZXXB.getSlyy());
          poZJYW_XHXXB.setBzyy(poZJXX_JMSFZXXB.getBzyy());
          poZJYW_XHXXB.setZz(poZJXX_JMSFZXXB.getZz());
          poZJYW_XHXXB.setZz1(poZJXX_JMSFZXXB.getZz1());
          poZJYW_XHXXB.setZz2(poZJXX_JMSFZXXB.getZz2());
          poZJYW_XHXXB.setZz3(poZJXX_JMSFZXXB.getZz3());
          poZJYW_XHXXB.setZz4(poZJXX_JMSFZXXB.getZz4());
          poZJYW_XHXXB.setKtglh(poZJXX_JMSFZXXB.getKtglh());
          poZJYW_XHXXB.setZjlb(poZJXX_JMSFZXXB.getZjlb());
          poZJYW_XHXXB.setZjzt(poZJXX_JMSFZXXB.getZjzt());
          //向证件销毁表中增加门楼牌信息
          PoHJXX_MLPXXXXB poMlpxx = null;
          poMlpxx  = super.get(PoHJXX_MLPXXXXB.class,poRyxxNew.getMlpnbid());
          if (poMlpxx != null) {
            poZJYW_XHXXB.setMlpnbid(poMlpxx.getMlpnbid());
            poZJYW_XHXXB.setSsxq(poMlpxx.getSsxq());
            poZJYW_XHXXB.setJlx(poMlpxx.getJlx());
            poZJYW_XHXXB.setMlph(poMlpxx.getMlph());
            poZJYW_XHXXB.setMlxz(poMlpxx.getMlxz());
            poZJYW_XHXXB.setPcs(poMlpxx.getPcs());
            poZJYW_XHXXB.setZrq(poMlpxx.getZrq());
            poZJYW_XHXXB.setXzjd(poMlpxx.getXzjd());
            poZJYW_XHXXB.setJcwh(poMlpxx.getJcwh());
            poZJYW_XHXXB.setPxh(poMlpxx.getPxh());
          }

          //////////////////////////////////////////////////////////////////////////
          //5、IF 有受理信息 THEN 修改 受理状态 为 销毁
          //////////////////////////////////////////////////////////////////////////
          //修改受理状态
          if (ZjConstant.ZJ_ZJLB_EDZ.equals(poZJXX_JMSFZXXB.getZjlb())) {
            //_log.info("5、IF 有二代证件受理信息 THEN 修改 受理状态 为 销毁");
            //findEdzSlxxAndUpdateSlztByNbsfzid(lNbsfzid,
            //                                 ZjConstant.ZJ_BLBZ_2ID_YXH,
            //                                 PublicConstant.GNBH_ZJ_ZJXHYW);
            //modi by hh 20060314
            //findEdzSlxxAndUpdateSlztByNbsfzid(lNbsfzid,poZJXX_JMSFZXXB.getYxqxqsrq(),
            //                                 ZjConstant.ZJ_BLBZ_2ID_YXH,
            //                                  PublicConstant.GNBH_ZJ_ZJXHYW);
            //add hb 20061226
            findEdzSlxxAndUpdateSlztByGmsfhm(poZJXX_JMSFZXXB.getGmsfhm(),
                                             poZJXX_JMSFZXXB.getYxqxqsrq(),
                                             ZjConstant.ZJ_BLBZ_2ID_YXH,
                                             PublicConstant.GNBH_ZJ_ZJXHYW);

          }
          else if (ZjConstant.ZJ_ZJLB_YDZ.equals(poZJXX_JMSFZXXB.getZjlb())) {
            //_log.info("5、IF 有一代证件受理信息 THEN 修改 受理状态 为 销毁");
            findYdzSlxxAndUpdateSlztByNbsfzid(lNbsfzid,
                                              ZjConstant.ZJ_BLBZ_1ID_YXH);
          }
        }
        else {
          throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER,
                                     "该证件销毁信息没有对应的居民身份证信息。", null);
        }

        //保存证件销毁信息
        super.create(poZJYW_XHXXB);
      }

      ///////////////////////////////////////////////////////////////////////////
      //6、保存身份证业务操作信息
      //7、保存操作日志
      ///////////////////////////////////////////////////////////////////////////
      ////_log.info("6、保存身份证业务操作信息 7、保存操作日志");
      saveSfzywlsXtrz(lZjywid, PublicConstant.GNBH_ZJ_ZJXHYW, null, null);

      ////////////////////////////////////////////////////////////////////////
      //提交事务
      ////////////////////////////////////////////////////////////////////////
      //_log.info("提交事务");

      ///////////////////////////////////////////////////////////////////////
      //8、返回信息处理
      ////////////////////////////////////////////////////////////////////////
      voZjxhywfhxx = new VoZjxhywfhxx();
      //voZjxhywfhxx.setZjywid(lZjywid);
      voZjxhywfhxx.setVoZjxhfhxx(arrayVoZjxhfhxxs);

      //_log.info("证件销毁业务_结束");
    }
    catch (DAOException ex1) {
      throw ex1;
    }
    catch (ServiceException ex) {
      throw ex;
    }
    return voZjxhywfhxx;
  }

  /**
   * 证件领取发放提交业务
   * @param voZjlqffxx[] - 证件领取发放信息数组
   * @return <{com.hzjc.hz2004.vo.VoZjlqffywfhxx}>
   * @roseuid 4061309401C6
   */
  public VoZjlqffywfhxx processZjlqffyw(VoZjlqffxx[] voZjlqffxx) throws
      ServiceException, DAOException {

    String now = StringUtils.getServiceTime();

    //数据校验
    if (voZjlqffxx == null || (voZjlqffxx != null && voZjlqffxx.length <= 0)) {
      return null;
    }

    //_log.info("证件领取分发业务_开始");
    VoZjlqffywfhxx voZjlqffywfhxx = null;
    try {
      ///////////////////////////////////////////////////////////////////////////
      //开始事务
      ///////////////////////////////////////////////////////////////////////////
      //_log.info("开始事务");

      //创建需要的DAO
      PojoInfo  zjyw_lqffxxbDAO = DAOFactory.createZJYW_LQFFXXBDAO();
      PojoInfo  zjyw_slxxbDAO = DAOFactory.createZJYW_SLXXBDAO();
      PojoInfo  zjls_sfzywczbDAO = DAOFactory.createZJLS_SFZYWCZBDAO();
      PojoInfo  zjxx_jmsfzxxbDAO = DAOFactory.createZJXX_JMSFZXXBDAO();
      //PojoInfo  sb_jmsfzxxbDAO = DAOFactory.createSB_JMSFZXXBDAO();
      PojoInfo  hjxx_czrkjbxxbDAO = DAOFactory.createHJXX_CZRKJBXXBDAO();
      //PojoInfo  old_hjxx_czrkjbxxbDAO = DAOFactory.
      //    createOLD_HJXX_CZRKJBXXBDAO();

      ///////////////////////////////////////////////////////////////////////////
      //2、业务限制判断
      ///////////////////////////////////////////////////////////////////////////
      //_log.info("2、业务限制判断");
      VerifyBusinessLimit(PublicConstant.GNBH_ZJ_ZJLQFFYW, voZjlqffxx);
      ///////////////////////////////////////////////////////////////////////////

      VoZjlqfffhxx[] arrayVoZjlqfffhxxs = new VoZjlqfffhxx[voZjlqffxx.length];

      ////////////////////////////////////////////////////////////////////////////
      //循环处理，每个证件领取发放信息
      ////////////////////////////////////////////////////////////////////////////
      for (int i = 0; i < voZjlqffxx.length; i++) {
        VoZjlqffxx aVoZjlqffxx = voZjlqffxx[i];

        ///////////////////////////////////////////////////////////////////////
        //1、保存证件领取发放信息
        ///////////////////////////////////////////////////////////////////////
        Long lNbslid = aVoZjlqffxx.getNbslid();
        PoZJYW_SLXXB poZJYW_SLXXB  = super.get(PoZJYW_SLXXB.class,lNbslid); //根据内部受理ID，得到受理信息
        if (poZJYW_SLXXB == null) {
          throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER,
                                     "该证件领取发放信息对应的受理信息不存在。", null);
        }
        //add by hh 20051220 领取过的人不能再领取证件
        if (poZJYW_SLXXB.getSlzt().equals(ZjConstant.ZJ_BLBZ_2ID_YLZ)) {
          throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER,
                                     "此证已经领取!", null);
        }
        /////////////////////////////////////////////////////////////////////////////
        //数据范围权限限制(modify by kgb 2004-06-1)
        //////////////////////////////////////////////////////////////////////////////
        //_log.info("业务提交，数据范围权限限制判断：");
        if (!VerifyDataRangeByRynbid(PublicConstant.GNBH_ZJ_ZJLQFFYW,
                                     poZJYW_SLXXB.getRynbid())) {
          throw new ServiceException(WSErrCode.ERR_SERVICE_DATASCOPE,
                                     "证件领取分发业务数据范围受到限制，不能办理！", null);
        }

        PoHJXX_CZRKJBXXB poHJXX_CZRKJBXXB = null;
        PoOLD_HJXX_CZRKJBXXB poOLD_HJXX_CZRKJBXXB = null;
        if (poZJYW_SLXXB != null && poZJYW_SLXXB.getRynbid() != null) {
          poHJXX_CZRKJBXXB = super.
              get(PoHJXX_CZRKJBXXB.class,poZJYW_SLXXB.getRynbid());

          if (poHJXX_CZRKJBXXB == null) {
            poOLD_HJXX_CZRKJBXXB = super.
                get(PoOLD_HJXX_CZRKJBXXB.class,poZJYW_SLXXB.getRynbid());

            if (poOLD_HJXX_CZRKJBXXB == null) {
              throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER,
                                         "该证件领取发放信息对应的常住人口基本信息不存在。", null);
            }

            try {
              poHJXX_CZRKJBXXB = new PoHJXX_CZRKJBXXB();
              BeanUtils.copyProperties(poHJXX_CZRKJBXXB, poOLD_HJXX_CZRKJBXXB);
            }
            catch (Exception ex) {
              throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER,
                                         "从poOLD_HJXX_CZRKJBXXB中复制信息出错！", null);
            }
          }
        }
        if (poHJXX_CZRKJBXXB == null) {
          throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER,
                                     "该证件领取发放信息对应的常住人口基本信息不存在。", null);
        }
        ////////////////////////////////////////////////////////////////////////////
        //定义全局变量
        ////////////////////////////////////////////////////////////////////////////
        Long lZjywid = (Long) zjls_sfzywczbDAO.getId(); //得到身份证业务操作表的证件业务ID

        PoZJYW_LQFFXXB poZJYW_LQFFXXB = new PoZJYW_LQFFXXB();
        try {
          //lzh modified here 20070208添加字段
          BeanUtils.copyProperties(poZJYW_LQFFXXB, poHJXX_CZRKJBXXB); //从常住人口PO中取得并装载到居民身份证PO中
          BeanUtils.copyProperties(poZJYW_LQFFXXB, poZJYW_SLXXB); //从受理信息PO中取得并装载到居民身份证PO中

          BeanUtils.copyProperties(poZJYW_LQFFXXB, aVoZjlqffxx); //从客户端传入的参数
        }
        catch (Exception ex) {
          throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER,
                                     "客户端传入参数装载到证件领取发放信息中异常。", null);
        }
//        poZJYW_LQFFXXB.setRynbid(poZJYW_SLXXB.getRynbid()); //人员内部ID
        //胡斌 20060821  领证日期由前台传入，属于人工输入参数，不能强行修改
        if ("".equals(poZJYW_LQFFXXB.getLqrq()) || poZJYW_LQFFXXB.getLqrq() == null) {
          poZJYW_LQFFXXB.setLqrq(StringUtils.formateDate()); //领取日期
        }
        poZJYW_LQFFXXB.setCxbz(PublicConstant.CXBZ_FCX);
        poZJYW_LQFFXXB.setZjywid(lZjywid); //证件业务ID
        poZJYW_LQFFXXB.setCzrid(this.getUserInfo().getYhid());
        poZJYW_LQFFXXB.setCzsj(now);
        Long lLqffid = (Long) zjyw_lqffxxbDAO.getId();
        poZJYW_LQFFXXB.setLqffid(lLqffid); //得到领取分发信息的ID

        //lzh modified here 20070208添加字段
        poZJYW_LQFFXXB.setYwbz(PublicConstant.GNBH_ZJ_ZJLQFFYW);
        poZJYW_LQFFXXB.setCzyid(this.getUserInfo().getYhid());
        poZJYW_LQFFXXB.setSlzt(ZjConstant.ZJ_BLBZ_2ID_YLZ);
        poZJYW_LQFFXXB.setSlrid(poZJYW_SLXXB.getCzyid());
        poZJYW_LQFFXXB.setSlsj(poZJYW_SLXXB.getCzsj());

        //_log.info("1、保存证件领取发放信息");
        super.create(poZJYW_LQFFXXB); //保存领取发放信息
        //给数组赋值
        arrayVoZjlqfffhxxs[i] = new VoZjlqfffhxx(lNbslid, lLqffid);

        //////////////////////////////////////////////////////////////////////
        //2、通过受理信息生成并保存 居民身份证信息、上报居民身份证信息表
        //////////////////////////////////////////////////////////////////////
        PoZJXX_JMSFZXXB poZJXX_JMSFZXXB = new PoZJXX_JMSFZXXB();
        try {
          BeanUtils.copyProperties(poZJXX_JMSFZXXB, poHJXX_CZRKJBXXB); //从常住人口PO中取得并装载到居民身份证PO中
          BeanUtils.copyProperties(poZJXX_JMSFZXXB, poZJYW_SLXXB); //从受理信息PO中取得并装载到居民身份证PO中
        }
        catch (Exception ex1) {
          throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER,
                                     "人口基本信息、证件受理信息装载转换到居民身份证信息中发生异常。", ex1);
        }

        //poZJXX_JMSFZXXB.setBzyy("");//办证原因？？？
        //poZJXX_JMSFZXXB.setSjyy("");//收交原因？？？
        poZJXX_JMSFZXXB.setZjlb(ZjConstant.ZJ_ZJLB_EDZ); //证件类别
        poZJXX_JMSFZXXB.setZjzt(ZjConstant.ZJ_ZJZT_ZC); //证件状态
        Long lNbsfzid = (Long) zjxx_jmsfzxxbDAO.getId();
        poZJXX_JMSFZXXB.setNbsfzid(lNbsfzid); //内部身份证ID
        //add by hh 20050920 身份证信息表中增加增加时间，增加类型
        poZJXX_JMSFZXXB.setZjlx(ZjConstant.SFZXX_ZJLX_LQ);
        poZJXX_JMSFZXXB.setZjsj(StringUtils.getServiceTime());

        //_log.info("2、通过受理信息生成并保存居民身份证信息");
        //add by hh 20060302 保存身份证信息前需要判断此信息是否已经存在
        //modi by hh 20060407 增加判断条件证件类别
        List lstJmsfz =super.findAllByHQL(
            " from PoZJXX_JMSFZXXB where gmsfhm='" + poZJXX_JMSFZXXB.getGmsfhm() +
            "' and yxqxqsrq='" + poZJXX_JMSFZXXB.getYxqxqsrq() + "' and zjlb='" +
            poZJXX_JMSFZXXB.getZjlb() + "'");
        if (lstJmsfz == null || lstJmsfz.size() <= 0) {
          super.create(poZJXX_JMSFZXXB); //保存居民身份证信息

          //上报居民身份证信息表 lzh add 20061110
          PoSB_JMSFZXXB poSB_JMSFZXXB = new PoSB_JMSFZXXB();
          try {
            BeanUtils.copyProperties(poSB_JMSFZXXB, poHJXX_CZRKJBXXB); //从常住人口PO中取得并装载到居民身份证PO中
            BeanUtils.copyProperties(poSB_JMSFZXXB, poZJYW_SLXXB); //从受理信息PO中取得并装载到居民身份证PO中
          }
          catch (Exception ex1) {
            throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER,
                                       "人口基本信息、证件受理信息装载转换到居民身份证信息中发生异常。", ex1);
          }
          poSB_JMSFZXXB.setNbsfzid(lNbsfzid); //内部身份证ID
          poSB_JMSFZXXB.setSlsj(poZJYW_SLXXB.getCzsj());
          poSB_JMSFZXXB.setCzsj(now); //操作时间
          poSB_JMSFZXXB.setCzrid(this.getUserInfo().getYhid()); //操作人ID
          poSB_JMSFZXXB.setCzrdw(this.getUserInfo().getDwdm()); //操作人单位

          super.create(poSB_JMSFZXXB); //保存居民身份证信息
        }
        ///////////////////////////////////////////////////////////////////////
        //3、修改 受理状态 为已领取
        ////////////////////////////////////////////////////////////////////////
        poZJYW_SLXXB.setSlzt(ZjConstant.ZJ_BLBZ_2ID_YLZ); //修改受理状态
        //_log.info("3、修改 受理状态 为已领取");
       super.update(poZJYW_SLXXB); //修改受理信息PO

        /////////////////////////////////////////////////////////////////////////
        //处理证件质量控制回馈信息中的错误未处理的记录
        if (!ZjConstant.ZJ_ZZXXCWLB_HG.equals(poZJYW_SLXXB.getZzxxcwlb())) {
          poZJYW_SLXXB.setCldw(getXtDwxx_sm());
          poZJYW_SLXXB.setClrq(StringUtils.getServiceDate());
          poZJYW_SLXXB.setClqk("已处理");
         super.update(poZJYW_SLXXB);
        }

        ////////////////////////////////////////////////////////////////////////
        //add by kgb 2004-08-05
        //修改常住人口基本信息表
        String strHQL = " from PoHJXX_CZRKJBXXB where ryid = '" +
            poZJYW_SLXXB.getRyid() +
            "' and jlbz='" + PublicConstant.JLBZ_ZX +
            "' and cxbz='" + PublicConstant.CXBZ_FCX + "'";
        List czrkList =super.findAllByHQL(strHQL);
        PoHJXX_CZRKJBXXB poCzrkxx = null;
        if (czrkList != null && czrkList.size() > 0) {
          poCzrkxx = (PoHJXX_CZRKJBXXB) czrkList.get(0);
        }
        else {
          throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER,
                                     "常口数据信息获取发生异常。", null);
        }
        poCzrkxx.setNbsfzid(poZJXX_JMSFZXXB.getNbsfzid());
        poCzrkxx.setQfjg(poZJXX_JMSFZXXB.getQfjg());
        poCzrkxx.setYxqxqsrq(poZJXX_JMSFZXXB.getYxqxqsrq());
        poCzrkxx.setYxqxjzrq(poZJXX_JMSFZXXB.getYxqxjzrq());
       super.update(poCzrkxx);

        //////////////////////////////////////////////////////////////////////
        //4、保存身份证业务操作信息
        ////////////////////////////////////////////////////////////////////。
        //_log.info("4、保存身份证业务操作信息");
        saveSfzywlsXtrz(lZjywid, PublicConstant.GNBH_ZJ_ZJLQFFYW,
                        poZJYW_SLXXB.getSlh(), poZJYW_SLXXB.getSlzt());
      }

      ////////////////////////////////////////////////////////////////////////
      //提交事务
      ////////////////////////////////////////////////////////////////////////
      //_log.info("提交事务");

      ///////////////////////////////////////////////////////////////////////
      //6、返回信息处理
      ////////////////////////////////////////////////////////////////////////
      voZjlqffywfhxx = new VoZjlqffywfhxx();
      //voZjlqffywfhxx.setZjywid(lZjywid);
      voZjlqffywfhxx.setVoZjlqfffhxx(arrayVoZjlqfffhxxs);

      //_log.info("证件领取分发业务_结束");
    }
    catch (DAOException ex2) {
      throw ex2;
    }
    catch (ServiceException ex2) {
      throw ex2;
    }
    return voZjlqffywfhxx;
  }

  /**
   * 证件身份核验业务
   * @return
   * @throws <{ServiceException}>
   * @throws <{DAOException}>
   */
  public void processZjsfhyyw() throws ServiceException, DAOException {
    //读卡，取出人员姓名和公民身份号码。
    //根据此条件查询出人口信息和照片信息。
    //调用户籍业务接口；户籍服务接口中实现该方法。
  }

  /**
   * 二代证件催领单打印业务
   * @param arrayVoZjClddyxx - 二代证件催领单打印信息数组
   * @throws ServiceException
   * @throws DAOException
   */
  public void processZjClddyyw(VoZjClddyxx[] arrayVoZjClddyxx) throws
      ServiceException, DAOException {
    if (arrayVoZjClddyxx == null ||
        (arrayVoZjClddyxx != null && arrayVoZjClddyxx.length <= 0)) {
      //throw new ServiceException(WSErrCode.ERR_SERVICE_DATANOTFULL,
      //                         "客户端没有传入要打印催领单的二代证受理业务！", null);
      return;
    }

    //_log.info("二代证件催领单打印业务开始");
    try {
      ///////////////////////////////////////////////////////////////
      //开始事务
      //////////////////////////////////////////////////////////////////
      //_log.info("开始事务");

      PojoInfo  zjyw_slxxbDAO = DAOFactory.createZJYW_SLXXBDAO();
      PojoInfo  zjls_sfzywczbDAO = DAOFactory.createZJLS_SFZYWCZBDAO();
      ///////////////////////////////////////////////////////////////////////////
      //1、业务限制判断
      ///////////////////////////////////////////////////////////////////////////
      VerifyBusinessLimit(PublicConstant.GNBH_ZJ_2DZCLDDYYW, arrayVoZjClddyxx);
      //_log.info("1、业务限制判断");
      ////////////////////////////////////////////////////////////////

      for (int i = 0; i < arrayVoZjClddyxx.length; i++) {
        VoZjClddyxx aVo = arrayVoZjClddyxx[i];

        /////////////////////////////////////////////////////////////
        //查找受理信息
        /////////////////////////////////////////////////////////////
        PoZJYW_SLXXB po  = super.get(PoZJYW_SLXXB.class,aVo.getNbslid());
        if (po == null) {
          throw new ServiceException(WSErrCode.ERR_SERVICE_BUSSINESSLOGIC,
                                     "数据库中不存在要打印催领单的受理信息。", null);
        }
        else if (! (ZjConstant.ZJ_BLBZ_2ID_PCSZJYSTG.equals(po.getSlzt()) ||
                    ZjConstant.ZJ_BLBZ_2ID_YDYCLT.equals(po.getSlzt()))) {
          throw new ServiceException(WSErrCode.ERR_SERVICE_BUSSINESSLOGIC,
                                     "该受理信息派出所验收没通过，不能打印证件催领单。", null);
        }

        /////////////////////////////////////////////////////////////
        //修改受理状态
        /////////////////////////////////////////////////////////////
        po.setSlzt(ZjConstant.ZJ_BLBZ_2ID_YDYCLT); //修改受理状态：已打印催领单
       super.update(po); //修改受理信息

        Long lZjywid = (Long) zjls_sfzywczbDAO.getId();
        //////////////////////////////////////////////////////////////////////
        //4、保存身份证业务操作信息
        //5、保存操作日志
        ////////////////////////////////////////////////////////////////////。
        //_log.info("4、保存身份证业务操作信息 5、保存操作日志");
        saveSfzywlsXtrz(lZjywid, PublicConstant.GNBH_ZJ_2DZCLDDYYW, po.getSlh(),
                        po.getSlzt());
      }

      //提交事务
      //_log.info("二代证件催领单打印业务结束");
    }
    catch (DAOException ex) {
      throw ex;
    }
    catch (ServiceException ex) {
      throw ex;
    }
  }

  /**
   * 换领二代证查询(催办单打印)
   * @param strHQL - 查询HQL语句
   * @param vopage - 分页信息VO
   * @return
   * @throws ServiceException
   * @throws DAOException
   */
  public VoQueryResult queryHledzryxx(String strHQL,
                                      VoPage vopage) throws ServiceException,
      DAOException {
    VoQueryResult voQryResult = new VoQueryResult();
    try {
      ///////////////////////////////////////////////////////////////
      //1、判断传入的参数vopage
      ///////////////////////////////////////////////////////////////
      int iPageOffset = vopage.getPageindex();
      int iPageSize = vopage.getPagesize();
      long iRecordCount = vopage.getRecordcount();
      //创建组织HQL的Buffer
      StringBuffer strBufHQLFromWhere = new StringBuffer();

      ////////////////////////////////////////////////////////////////
      //2、组织select语句部分
      ///////////////////////////////////////////////////////////////
      String strHQLSelectCount = " select count(*) ";
      String strHQLSelect = " select poview ";

      //3、组织from * where *语句部分
      ////////////////////////////////////////////////////////////////
      strBufHQLFromWhere.append(" from PoV_ZJ_JMSFZXXB ")
          .append(" as poview  where 1=1 ");

      /////////////////////////////////////////////////////////////////
      //开始事务
      /////////////////////////////////////////////////////////////////

      /////////////////////////////////////////////////////////////
      //数据范围？？？
      //////////////////////////////////////////////////////////////S
      //add by kgb 2004-05-25
      String strDataRange = queryDataRange(PublicConstant.GNBH_ZJ_HLEDZRYCX);
      if (strDataRange != null && !strDataRange.trim().equals("")) {
        strBufHQLFromWhere.append(" and ");
        strBufHQLFromWhere.append(strDataRange);
      }

      ////////////////////////////////////////////////////////////////////
      //查询身份证为一代证，需要办理二代证而未申请办理的人员
      ///////////////////////////////////////////////////////////////////////
      StringBuffer strBufHledz = new StringBuffer();
      strBufHledz.append(" and zjlb='").append(ZjConstant.ZJ_ZJLB_YDZ).append(
          "' ").append(" and zjzt='").append(ZjConstant.ZJ_ZJZT_ZC).append("' ");
      strBufHQLFromWhere.append(strBufHledz.toString());

      //组合传入的条件限制语句
      if (strHQL != null && !strHQL.trim().equals("")) {
        strBufHQLFromWhere.append(" and ");
        strBufHQLFromWhere.append(strHQL);
      }

      //////////////////////////////////////////////////////////////////
      //4、调用DAO查询
      //////////////////////////////////////////////////////////////////
      //创建调用的DAO
      DefaultDAO dao = new DefaultDAO();
      List lstPos = null;
      long lCount = iRecordCount;
      String strHQLAll = strHQLSelect.concat(strBufHQLFromWhere.toString());
      //_log.info("视图ClassName=PoV_ZJ_JMSFZXXB 信息查询HQL=" + strHQLAll);
      //查询返回一页记录
      lstPos =super.getPageRecords(strHQLAll, new Object[]{}, iPageOffset,
                                       iPageSize).getList();
      //如果传入的记录数为-1，则要查询返回总记录数
      if (iRecordCount == -1) {
        strHQLAll = strHQLSelectCount.concat(strBufHQLFromWhere.toString());
        lCount  = super.getCount(strHQLAll);
      }

      /////////////////////////////////////////////////////////////////
      //提交事务
      /////////////////////////////////////////////////////////////////

      /////////////////////////////////////////////////////////////////
      //5、返回值初始化
      /////////////////////////////////////////////////////////////////
      voQryResult.setPagelist(lstPos);
      voQryResult.setVotype(PoV_ZJ_JMSFZXXB.class);
      voQryResult.setRecordcount(lCount);
    }
    catch (DAOException ex) {
      //回滚事务
      throw ex;
    }
    catch (ServiceException ex) {
      throw ex;
    }
    return voQryResult;

  }

  /**
   * 查询一代证到期人员（催办单打印）
   * @param strJzrq  - 有效期限截止日期
   * @param strHQL   - 查询条件
   * @param vopage   - 分页信息
   * @return         - 查询结果
   * @throws ServiceException
   * @throws DAOException
   */
  public VoQueryResult queryYdzdqryxx(String strJzrq, String strHQL,
                                      VoPage vopage) throws ServiceException,
      DAOException {
    VoQueryResult voQryResult = new VoQueryResult();
    try {
      ///////////////////////////////////////////////////////////////
      //1、判断传入的参数vopage
      ///////////////////////////////////////////////////////////////
      int iPageOffset = vopage.getPageindex();
      int iPageSize = vopage.getPagesize();
      long iRecordCount = vopage.getRecordcount();
      //创建组织HQL的Buffer
      StringBuffer strBufHQLFromWhere = new StringBuffer();

      ////////////////////////////////////////////////////////////////
      //2、组织select语句部分
      ///////////////////////////////////////////////////////////////
      String strHQLSelectCount = " select count(*) ";
      String strHQLSelect = " select poview ";

      //3、组织from * where *语句部分
      ////////////////////////////////////////////////////////////////
      strBufHQLFromWhere.append(" from PoV_ZJ_JMSFZXXB ")
          .append(" as poview  where 1=1 ");

      /////////////////////////////////////////////////////////////////
      //开始事务
      /////////////////////////////////////////////////////////////////

      /////////////////////////////////////////////////////////////
      //数据范围？？？
      //////////////////////////////////////////////////////////////S
      //add by kgb 2004-05-25
      String strDataRange = queryDataRange(PublicConstant.GNBH_ZJ_EDZDQRYCX);
      if (strDataRange != null && !strDataRange.trim().equals("")) {
        strBufHQLFromWhere.append(" and ");
        strBufHQLFromWhere.append(strDataRange);
      }

      ////////////////////////////////////////////////////////////////////
      //有效期限截止日期和证件类别(一代证)，进行组合
      ///////////////////////////////////////////////////////////////////////
      //组合10年到期和20年到期
      strJzrq = strJzrq == null ? StringUtils.getServiceDate() : strJzrq;
      String strYear = strJzrq.substring(0, 4);
      String strMonthDay = strJzrq.substring(4, strJzrq.length());
      int iYear10 = Integer.parseInt(strYear) - 10;
      int iYear20 = iYear10 - 10;
      String strYxqxqsrq10 = String.valueOf(iYear10).concat(strMonthDay);
      String strYxqxqsrq20 = String.valueOf(iYear20).concat(strMonthDay);
      //组织语句
      StringBuffer strBufYdzdq = new StringBuffer();
      strBufYdzdq.append(" and zjlb='").append(ZjConstant.ZJ_ZJLB_YDZ)
          .append("' and (")
          .append("(yxqx='1' and qfrq<='").append(strYxqxqsrq10).append(
          "') or ") //10年有效期
          .append("(yxqx='2' and qfrq<='").append(strYxqxqsrq20).append(
          "')") //或20年有效期
          .append(")");
      strBufHQLFromWhere.append(strBufYdzdq.toString());

      //组合传入的条件限制语句
      if (strHQL != null && !strHQL.trim().equals("")) {
        strBufHQLFromWhere.append(" and ");
        strBufHQLFromWhere.append(strHQL);
      }

      //////////////////////////////////////////////////////////////////
      //4、调用DAO查询
      //////////////////////////////////////////////////////////////////
      //创建调用的DAO
      DefaultDAO dao = new DefaultDAO();
      List lstPos = null;
      long lCount = iRecordCount;
      String strHQLAll = strHQLSelect.concat(strBufHQLFromWhere.toString());
      //_log.info("视图ClassName=PoV_ZJ_JMSFZXXB 信息查询HQL=" + strHQLAll);
      //查询返回一页记录
      lstPos =super.getPageRecords(strHQLAll,new Object[]{}, iPageOffset,
                                       iPageSize).getList();
      //如果传入的记录数为-1，则要查询返回总记录数
      if (iRecordCount == -1) {
        strHQLAll = strHQLSelectCount.concat(strBufHQLFromWhere.toString());
        lCount  = super.getCount(strHQLAll);
      }

      /////////////////////////////////////////////////////////////////
      //提交事务
      /////////////////////////////////////////////////////////////////

      /////////////////////////////////////////////////////////////////
      //5、返回值初始化
      /////////////////////////////////////////////////////////////////
      voQryResult.setPagelist(lstPos);
      voQryResult.setVotype(PoV_ZJ_JMSFZXXB.class);
      voQryResult.setRecordcount(lCount);
    }
    catch (DAOException ex) {
      //回滚事务
      throw ex;
    }
    catch (ServiceException ex) {
      throw ex;
    }
    return voQryResult;
  }

  /**
   * 查询二代证到期人员信息（催办单打印）
   * @param strJzrq - 有效期限截止日期
   * @param strHQL  - 查询条件
   * @param vopage  - 分页信息
   * @return  查询结果
   * @throws ServiceException
   * @throws DAOException
   */
  public VoQueryResult queryEdzdqryxx(String strJzrq, String strHQL,
                                      VoPage vopage) throws ServiceException,
      DAOException {
    VoQueryResult voQryResult = new VoQueryResult();
    try {
      ///////////////////////////////////////////////////////////////
      //1、判断传入的参数vopage
      ///////////////////////////////////////////////////////////////
      int iPageOffset = vopage.getPageindex();
      int iPageSize = vopage.getPagesize();
      long iRecordCount = vopage.getRecordcount();
      //创建组织HQL的Buffer
      StringBuffer strBufHQLFromWhere = new StringBuffer();

      ////////////////////////////////////////////////////////////////
      //2、组织select语句部分
      ///////////////////////////////////////////////////////////////
      String strHQLSelectCount = " select count(*) ";
      String strHQLSelect = " select poview ";

      //3、组织from * where *语句部分
      ////////////////////////////////////////////////////////////////
      strBufHQLFromWhere.append(" from PoV_ZJ_JMSFZXXB ")
          .append(" as poview  where 1=1 ");

      /////////////////////////////////////////////////////////////////
      //开始事务
      /////////////////////////////////////////////////////////////////

      /////////////////////////////////////////////////////////////
      //数据范围？？？
      //////////////////////////////////////////////////////////////S
      //add by kgb 2004-05-25
      String strDataRange = queryDataRange(PublicConstant.GNBH_ZJ_EDZDQRYCX);
      if (strDataRange != null && !strDataRange.trim().equals("")) {
        strBufHQLFromWhere.append(" and ");
        strBufHQLFromWhere.append(strDataRange);
      }

      ////////////////////////////////////////////////////////////////////
      //有效期限截止日期和证件类别(二代证)，进行组合
      ///////////////////////////////////////////////////////////////////////
      StringBuffer strBufEdzdq = new StringBuffer();
      strBufEdzdq.append(" and zjlb='").append(ZjConstant.ZJ_ZJLB_EDZ).append(
          "' ")
          .append(" and (yxqxjzrq is not null) and (yxqxjzrq <> '') ");
      if (strJzrq != null && !strJzrq.equals("")) { //传入不为空，与传入的参数比较
        strBufEdzdq.append(" and yxqxjzrq <='").append(strJzrq).append("' ");
      }
      else { //否则，与当前日期比较
        strBufEdzdq.append(" and yxqxjzrq <='").append(StringUtils.
            getServiceDate()).
            append("' ");
      }
      strBufHQLFromWhere.append(strBufEdzdq.toString());

      //组合传入的条件限制语句
      if (strHQL != null && !strHQL.trim().equals("")) {
        strBufHQLFromWhere.append(" and ");
        strBufHQLFromWhere.append(strHQL);
      }

      //////////////////////////////////////////////////////////////////
      //4、调用DAO查询
      //////////////////////////////////////////////////////////////////
      //创建调用的DAO
      DefaultDAO dao = new DefaultDAO();
      List lstPos = null;
      long lCount = iRecordCount;
      String strHQLAll = strHQLSelect.concat(strBufHQLFromWhere.toString());
      //_log.info("视图ClassName=PoV_ZJ_JMSFZXXB 信息查询HQL=" + strHQLAll);
      //查询返回一页记录
      lstPos =super.getPageRecords(strHQLAll, new Object[]{},iPageOffset,
                                       iPageSize).getList();
      //如果传入的记录数为-1，则要查询返回总记录数
      if (iRecordCount == -1) {
        strHQLAll = strHQLSelectCount.concat(strBufHQLFromWhere.toString());
        lCount  = super.getCount(strHQLAll);
      }

      /////////////////////////////////////////////////////////////////
      //提交事务
      /////////////////////////////////////////////////////////////////

      /////////////////////////////////////////////////////////////////
      //5、返回值初始化
      /////////////////////////////////////////////////////////////////
      voQryResult.setPagelist(lstPos);
      voQryResult.setVotype(PoV_ZJ_JMSFZXXB.class);
      voQryResult.setRecordcount(lCount);
    }
    catch (DAOException ex) {
      //回滚事务
      throw ex;
    }
    catch (ServiceException ex) {
      throw ex;
    }
    return voQryResult;

  }

  /**
   * 查询满16岁需申领二代证件人员信息（催办单打印）
   * @param strJzrq - 有效期限截止日期
   * @param strHQL  - 查询条件
   * @param vopage  - 分页信息
   * @return  查询结果
   * @throws ServiceException
   * @throws DAOException
   */
  public VoQueryResult queryM16ssledzryxx(String strJzrq, String strHQL,
                                          VoPage vopage) throws
      ServiceException,
      DAOException {
    VoQueryResult voQryResult = new VoQueryResult();
    try {
      ///////////////////////////////////////////////////////////////
      //1、判断传入的参数vopage
      ///////////////////////////////////////////////////////////////
      int iPageOffset = vopage.getPageindex();
      int iPageSize = vopage.getPagesize();
      long iRecordCount = vopage.getRecordcount();
      //创建组织HQL的Buffer
      StringBuffer strBufHQLFromWhere = new StringBuffer();

      ////////////////////////////////////////////////////////////////
      //2、组织select语句部分
      ///////////////////////////////////////////////////////////////
      String strHQLSelectCount = " select count(*) ";
      String strHQLSelect = " select V_HJ_RDXXB ";

      //3、组织from * where *语句部分
      ////////////////////////////////////////////////////////////////
      //计算得到满16岁的出生日期
      strJzrq = strJzrq == null ? StringUtils.getServiceDate() : strJzrq;
      int iYear = Integer.parseInt(strJzrq.substring(0, 4)) - 16;
      String strCsrq = String.valueOf(iYear).concat(strJzrq.substring(4,
          strJzrq.length()));
      strBufHQLFromWhere.append("from PoV_HJ_RDXXB as V_HJ_RDXXB ")
          .append("where 1=1 ")
          .append("and V_HJ_RDXXB.csrq <='").append(strCsrq).append("' ")
          .append("and V_HJ_RDXXB.rjlbz ='").append(PublicConstant.JLBZ_ZX).
          append("' ")
          .append("and V_HJ_RDXXB.ryid not in ")
          .append(
          "(select ZJXX_JMSFZXXB.ryid from PoZJXX_JMSFZXXB as ZJXX_JMSFZXXB ")
          .append("where ZJXX_JMSFZXXB.zjlb='").append(ZjConstant.ZJ_ZJLB_EDZ).
          append("' ")
          .append(
          "and ZJXX_JMSFZXXB.ryid = V_HJ_RDXXB.ryid group by ZJXX_JMSFZXXB.ryid)");

      /////////////////////////////////////////////////////////////////
      //开始事务
      /////////////////////////////////////////////////////////////////

      /////////////////////////////////////////////////////////////
      //数据范围？？？
      //////////////////////////////////////////////////////////////S
      //add by kgb 2004-05-25
      String strDataRange = queryDataRange(PublicConstant.GNBH_ZJ_EDZDQRYCX);
      if (strDataRange != null && !strDataRange.trim().equals("")) {
        strBufHQLFromWhere.append(" and ");
        strBufHQLFromWhere.append(strDataRange);
      }

      //组合传入的条件限制语句
      if (strHQL != null && !strHQL.trim().equals("")) {
        strBufHQLFromWhere.append(" and ");
        strBufHQLFromWhere.append(strHQL);
      }

      //////////////////////////////////////////////////////////////////
      //4、调用DAO查询
      //////////////////////////////////////////////////////////////////
      //创建调用的DAO
      DefaultDAO dao = new DefaultDAO();
      List lstPos = null;
      long lCount = iRecordCount;
      String strHQLAll = strHQLSelect.concat(strBufHQLFromWhere.toString());
      //_log.info("视图ClassName=PoV_HJ_RDXXB 信息查询HQL=" + strHQLAll);
      //查询返回一页记录
      lstPos =super.getPageRecords(strHQLAll, new Object[]{},iPageOffset,
                                       iPageSize).getList();
      //如果传入的记录数为-1，则要查询返回总记录数
      if (iRecordCount == -1) {
        strHQLAll = strHQLSelectCount.concat(strBufHQLFromWhere.toString());
        lCount  = super.getCount(strHQLAll);
      }

      /////////////////////////////////////////////////////////////////
      //提交事务
      /////////////////////////////////////////////////////////////////

      /////////////////////////////////////////////////////////////////
      //5、返回值初始化
      /////////////////////////////////////////////////////////////////
      voQryResult.setPagelist(lstPos);
      voQryResult.setVotype(PoV_HJ_RDXXB.class);
      voQryResult.setRecordcount(lCount);
    }
    catch (DAOException ex) {
      //回滚事务
      throw ex;
    }
    catch (ServiceException ex) {
      throw ex;
    }
    return voQryResult;

  }

  /**
   * 得到证件受理信息。
   * @param strHQL  - 查询条件HQL
   * @param vopage  - 分页信息VO
   * @return        - 查询结果VO
   * @throws <{ServiceException}>
   * @throws <{DAOException}>
   */
  public VoQueryResult queryZjslxx(String strHQL, VoPage vopage) throws
      ServiceException,
      DAOException {
    //调用超类的查询方法。
    return executeQuery(strHQL, vopage, PoZJYW_SLXXB.class,
                        PublicConstant.GNBH_ZJ_2DZSLXXCX);
  }

  /**
   *
   * @param strHQL
   * @return
   * @throws ServiceException
   * @throws DAOException
   */
  public VoQueryResult queryZjslxxGroupBySlzt(String strHQL) throws
      ServiceException,
      DAOException {
    VoQueryResult voQryResult = new VoQueryResult();
    try {
      //创建组织HQL的Buffer
      StringBuffer strBufHQLFromWhere = new StringBuffer();

      ////////////////////////////////////////////////////////////////
      //2、组织select语句部分
      ///////////////////////////////////////////////////////////////
      String strHQLSelect =
          " select po.slzt,count(*) from PoZJYW_SLXXB as po where 1=1 ";
      /////////////////////////////////////////////////////////////////

      //开始事务

      /////////////////////////////////////////////////////////////
      //数据范围？？？
      //////////////////////////////////////////////////////////////
      //add by kgb 2004-05-25
      String strDataRange = queryDataRange(PublicConstant.
                                           GNBH_ZJ_ZJSLSLZTFZXXCX);
      if (strDataRange != null && !strDataRange.trim().equals("")) {
        strBufHQLFromWhere.append(" and ");
        strBufHQLFromWhere.append(strDataRange);
      }
      /////////////////////////////////////////////////////////////////

      //组合传入的条件限制语句
      if (strHQL != null && !strHQL.trim().equals("")) {
        strBufHQLFromWhere.append(" and ");
        strBufHQLFromWhere.append(strHQL);
      }

      //////////////////////////////////////////////////////////////////
      //4、调用DAO查询
      //////////////////////////////////////////////////////////////////
      //创建调用的DAO
      DefaultDAO dao = new DefaultDAO();
      String strHQLAll = strHQLSelect + strBufHQLFromWhere.toString() +
          " group by slzt ";
      List lstPos =super.findAllByHQL(strHQLAll);
      //提交事务

      /////////////////////////////////////////////////////////////////
      //5、返回值初始化
      /////////////////////////////////////////////////////////////////
      long lCount = 0;
      List lstVos = null;
      if (lstPos != null && !lstPos.isEmpty()) {
        lCount = lstPos.size();
        lstVos = new ArrayList();
        /////////////////////////////////////////////////////
        //循环组织值
        for (int i = 0; i < lstPos.size(); i++) {
          Object[] arryObjs = (Object[]) lstPos.get(i);
          String strSlzt = String.valueOf(arryObjs[0]);
          int iCount = Integer.parseInt(String.valueOf(arryObjs[1]));
          VoZjSlSlztfhxx vo = new VoZjSlSlztfhxx(strSlzt, iCount);
          lstVos.add(vo);
        }
      }
      voQryResult.setPagelist(lstVos);
      voQryResult.setVotype(VoZjSlSlztfhxx.class);
      voQryResult.setRecordcount(lCount);
    }
    catch (DAOException ex) {
      //回滚事务
      throw ex;
    }
    catch (ServiceException ex) {
      throw ex;
    }
    return voQryResult;

  }

  /**
   * 得到临时证件受理统计信息，临时证件受理统计信息由PoLSSFZ_SLXXB（临时身份证受理信息）组成
   * @param strHQL String
   * @throws ServiceException
   * @throws DAOException
   * @return VoQueryResult
   */
  public VoQueryResult queryLssfzslxxGroupByDybz(String strHQL, String strGroup) throws
      ServiceException,
      DAOException {
    VoQueryResult voQryResult = new VoQueryResult();
    try {
      //创建组织HQL的Buffer
      StringBuffer strBufHQLFromWhere = new StringBuffer();

      //组织select语句部分
      String strGroupTj = "";
      String strGroupSelect = "";
      if (strGroup != null && ! ("".equals(strGroup))) {
        strGroupTj = strGroup + ",";
        strGroupSelect = "po." + strGroup + ",";
      }
      String strHQLSelect = " select " + strGroupSelect +
          "po.dybz,count(*) from PoLSSFZ_SLXXB as po where 1=1 ";

      //开始事务

      //数据范围
      String strDataRange = queryDataRange(PublicConstant.
                                           GNBH_ZJ_ZJSLSLZTFZXXCX);
      if (strDataRange != null && !strDataRange.trim().equals("")) {
        strBufHQLFromWhere.append(" and ");
        strBufHQLFromWhere.append(strDataRange);
      }

      //组合传入的条件限制语句
      if (strHQL != null && !strHQL.trim().equals("")) {
        strBufHQLFromWhere.append(" and ");
        strBufHQLFromWhere.append(strHQL);
      }

      //调用DAO查询
      //创建调用的DAO
      DefaultDAO dao = new DefaultDAO();
      String strHQLAll = strHQLSelect + strBufHQLFromWhere.toString() +
          " group by " + strGroupTj + "dybz ";
      List lstPos =super.findAllByHQL(strHQLAll);
      //提交事务

      //返回值初始化
      long lCount = 0;
      List lstVos = null;
      if (lstPos != null && !lstPos.isEmpty()) {
        lCount = lstPos.size();
        lstVos = new ArrayList();
        //循环组织值
        for (int i = 0; i < lstPos.size(); i++) {
          Object[] arryObjs = (Object[]) lstPos.get(i);
          String strTj = String.valueOf(arryObjs[0]);
          String strDybz = String.valueOf(arryObjs[1]);
          int iCount = Integer.parseInt(String.valueOf(arryObjs[2]));
          VoLsSfzDybzfhxx vo = new VoLsSfzDybzfhxx(strTj, strDybz, iCount);
          lstVos.add(vo);
        }
      }
      voQryResult.setPagelist(lstVos);
      voQryResult.setVotype(VoLsSfzDybzfhxx.class);
      voQryResult.setRecordcount(lCount);
    }
    catch (DAOException ex) {
      //回滚事务
      throw ex;
    }
    catch (ServiceException ex) {
      throw ex;
    }
    return voQryResult;

  }

  /**
   * 得到证件挂失信息，证件挂失信息是由PoZJYW_GSXXB(证件挂失信息)组成。
   * @param strHQL
   * @param vopage
   * @return
   * @throws ServiceException
   * @throws DAOException
   */
  public VoQueryResult queryZjgsxx(String strHQL, VoPage vopage) throws
      ServiceException,
      DAOException {
    //调用超类的查询方法。
    return executeQuery(strHQL, vopage, PoV_ZJ_GSXXB.class,
                        PublicConstant.GNBH_ZJ_GSXXCX);
  }

  /**
   * 得到证件销毁信息，证件销毁信息是由PoZJYW_XHXXB(证件销毁信息)组成。
   * @param strHQL
   * @param vopage
   * @return
   * @throws ServiceException
   * @throws DAOException
   */
  public VoQueryResult queryZjxhxx(String strHQL, VoPage vopage) throws
      ServiceException,
      DAOException {
    //调用超类的查询方法。
    return executeQuery(strHQL, vopage, PoV_ZJ_XHXXB.class,
                        PublicConstant.GNBH_ZJ_XHXXCX);
  }

  /**
   * 得到证件收交信息，证件收交信息是由PoZJYW_SJXXB(证件收交信息)组成。
   * @param strHQL
   * @param vopage
   * @return
   * @throws ServiceException
   * @throws DAOException
   */
  public VoQueryResult queryZjsjxx(String strHQL, VoPage vopage) throws
      ServiceException,
      DAOException {
    //调用超类的查询方法。
    return executeQuery(strHQL, vopage, PoV_ZJ_SJXXB.class,
                        PublicConstant.GNBH_ZJ_SJXXCX);
  }

  /**
   * 得到证件投递信息，证件投递信息由PoZJYW_TDXXB(证件投递信息)组成。
   * @param strHQL
   * @param vopage
   * @return
   * @throws ServiceException
   * @throws DAOException
   */
  public VoQueryResult queryZjtdxx(String strHQL, VoPage vopage) throws
      ServiceException,
      DAOException {
    //调用超类的查询方法。
    return executeQuery(strHQL, vopage, PoZJYW_SLXXB.class,
                        PublicConstant.GNBH_ZJ_TDXXCX);
  }

  /**
   * 得到证件审核信息，证件审核信息是由PoZJSH_SHQFXXB(证件审核信息)组成。
   * @param strHQL
   * @param vopage
   * @return
   * @throws ServiceException
   * @throws DAOException
   */
  public VoQueryResult queryZjshxx(String strHQL, VoPage vopage) throws
      ServiceException,
      DAOException {
    //调用超类的查询方法。
    return executeQuery(strHQL, vopage, PoV_ZJ_SHQFXXB.class,
                        PublicConstant.GNBH_ZJ_SHXXCX);
  }

  /**
   * 得到证件领取发放信息，证件领取发放信息由PoZJYW_LQFFXXB(领取发放信息)组成。
   * @param strHQL
   * @param vopage
   * @return
   * @throws ServiceException
   * @throws DAOException
   */
  public VoQueryResult queryZjlqffxx(String strHQL, VoPage vopage) throws
      ServiceException, DAOException {
    //调用超类的查询方法。
    return executeQuery(strHQL, vopage, PoV_ZJ_LQFFXXB.class,
                        PublicConstant.GNBH_ZJ_LQFFXXCX);
  }

  /**
   * 查询证件验收信息，证件验收信息由PoZJYW_YSXXB(证件验收信息)组成。
   * @param strHQL
   * @param vopage
   * @return:返回信息是PoZJYW_YSXXB(证件验收信息)。
   * @throws ServiceException
   * @throws DAOException
   */
  public VoQueryResult queryZjysxx(String strHQL, VoPage vopage) throws
      ServiceException,
      DAOException {
    //调用超类的查询方法。
    return executeQuery(strHQL, vopage, PoV_ZJ_YSXXB.class,
                        PublicConstant.GNBH_ZJ_YSXXCX);
  }

  /**
   * 通过姓名或身份号码得到居民身份证信息，居民身份证信息由PoZJXX_JMSFZXXB(证件信息)
   * + PoHJXX_MLPXXXXB(地信息)＋Zpid(照片ＩＤ)组成 。
   * @param strHQL
   * @param vopage
   * @return:返回信息由PoZJXX_JMSFZXXB(证件信息)+ PoHJXX_MLPXXXXB(地信息)＋Zpid(照片ＩＤ)组成 。
   * @throws ServiceException
   * @throws DAOException
   */
  public VoQueryResult queryJmsfzxx(String strHQL, VoPage vopage) throws
      ServiceException,
      DAOException {
    //调用超类的查询方法。
    return executeQuery(strHQL, vopage, PoV_ZJ_JMSFZXXB.class,
                        PublicConstant.GNBH_ZJ_JMSFZXXCX);
  }

  /**
   * 制证回馈信息查询
   * @param strHQL
   * @param vopage
   * @return:返回信息由PoZJYW_ZZHKXXB(制证回馈信息)
   * @throws ServiceException
   * @throws DAOException
   */
  public VoQueryResult queryZzhkxx(String strHQL, VoPage vopage) throws
      ServiceException, DAOException {
    //调用超类的查询方法。
    return executeQuery(strHQL, vopage, PoV_ZJ_ZZHKXXB.class,
                        PublicConstant.GNBH_ZJ_ZZHKXXCX);
  }

  /**
   *
   * @param strHQL
   * @param vopage
   * @return
   * @throws ServiceException
   * @throws DAOException
   */
  public VoQueryResult queryZlkzhkxx(String strHQL, VoPage vopage) throws
      ServiceException, DAOException {
    //调用超类的查询方法。
    return executeQuery(strHQL, vopage, PoZJYW_SLXXB.class,
                        PublicConstant.GNBH_ZJ_ZLKZHKXXCX);
  }

  /**
   * 公民身份号码顺序吗分配信息查询
   * @param strHQL
   * @param vopage
   * @return
   * @throws <{ServiceException}>
   * @throws <{DAOException}>
   */
  public VoQueryResult queryGmsfhmsxmfpxx(String strHQL, VoPage vopage) throws
      ServiceException, DAOException {
    VoQueryResult voQryResult = new VoQueryResult();
    try {
      ///////////////////////////////////////////////////////////////
      //1、判断传入的参数vopage
      ///////////////////////////////////////////////////////////////
      int iPageOffset = vopage.getPageindex();
      int iPageSize = vopage.getPagesize();
      long iRecordCount = vopage.getRecordcount();
      //创建组织HQL的Buffer
      StringBuffer strBufHQLFromWhere = new StringBuffer(100);

      ////////////////////////////////////////////////////////////////
      //2、组织select语句部分
      ///////////////////////////////////////////////////////////////
      String strHQLSelectCount = " select count(*) ";
      String strHQLSelect = " select V_HJ_GMSFHMSXMFPXXB ";
      /////////////////////////////////////////////////////////////////

      ////////////////////////////////////////////////////////////////
      //3、组织from * where *语句部分
      ////////////////////////////////////////////////////////////////
      strBufHQLFromWhere.append(
          " from PoV_HJ_GMSFHMSXMFPXXB as  V_HJ_GMSFHMSXMFPXXB where 1=1 ");

      //数据范围???
      //组合传入的条件限制语句
      if (strHQL != null && !strHQL.trim().equals("")) {
        strBufHQLFromWhere.append(" and ");
        strBufHQLFromWhere.append(strHQL);
      }

      //////////////////////////////////////////////////////////////////
      //4、调用DAO查询
      //////////////////////////////////////////////////////////////////
      //开始事务
      //创建调用的DAO
      PojoInfo  dao = DAOFactory.
          createV_HJ_GMSFHMSXMFPXXBDAO();
      List lstPos = null;
      long lCount = iRecordCount;
      String strHQLAll = strHQLSelect.concat(strBufHQLFromWhere.toString());
      //_log.info("公民身份号码顺序码分配信息HQL=" + strHQLAll);
      //查询返回一页记录
      lstPos =super.getPageRecords(
          strHQLAll,new Object[]{}, iPageOffset, iPageSize).getList();
      //如果传入的记录数为-1，则要查询返回总记录数
      if (iRecordCount == -1) {
        strHQLAll = strHQLSelectCount.concat(strBufHQLFromWhere.toString());
        lCount  = super.getCount(strHQLAll);
      }

      //提交事务

      /////////////////////////////////////////////////////////////////
      //5、返回值初始化
      /////////////////////////////////////////////////////////////////
      voQryResult.setPagelist(lstPos);
      voQryResult.setVotype(PoV_HJ_GMSFHMSXMFPXXB.class);
      voQryResult.setRecordcount(lCount);
    }
    catch (DAOException ex) {
      //回滚事务
      throw ex;
    }
    catch (ServiceException ex) {
      throw ex;
    }
    return voQryResult;
  }

  /**
   * 重号信息和重号处理信息查询
   * @param strHQL
   * @param vopage
   * @return
   * @throws ServiceException
   * @throws DAOException
   */
  public VoQueryResult queryChclxx(String strHQL, VoPage vopage) throws
      ServiceException, DAOException {
    //调用超类的查询方法。
    return executeQuery(strHQL, vopage, PoV_HJ_CHCLXXB.class,
                        PublicConstant.GNBH_ZJ_CHCLXXCX);

  }

  /**
   * 证件审核业务处理
   * @param voZjshxx - 证件审核信息
   * @param gnbh - 功能编号
   * @return
   * @throws ServiceException
   * @throws DAOException
   */
  public VoZjshywfhxx processZjshyw(VoZjshxx voZjshxx[], String gnbh) throws
      ServiceException, DAOException {

    VoZjshywfhxx voZjshywfhxx = null;
    VoZjshfhxx voZjshfhxx[] = null;
    String strHQL = null;
    String now = StringUtils.getServiceTime();

    //数据校验
    if (voZjshxx == null || (voZjshxx != null && voZjshxx.length <= 0)) {
      return null;
    }

    try {
      //创建要调用的DAO
      PojoInfo  zjsh_shqfxxbDAO = DAOFactory.createZJSH_SHQFXXBDAO();
      PojoInfo  zjls_sfzywczbDAO = DAOFactory.createZJLS_SFZYWCZBDAO();
      PojoInfo  zjyw_slxxbDAO = DAOFactory.createZJYW_SLXXBDAO();
      PojoInfo  hjxx_zplsbDAO = DAOFactory.createHJXX_ZPLSBDAO();
      PojoInfo  hjxx_czrkjbxxbDAO = DAOFactory.createHJXX_CZRKJBXXBDAO();
      PojoInfo  hjxx_pzrzbDAO = DAOFactory.createHJXX_PZRZBDAO();
      PojoInfo  hjls_hjywlsbDAO = DAOFactory.createHJLS_HJYWLSBDAO();
      PojoInfo  hjxx_smkzpbDAO = DAOFactory.createHJXX_SMKZPBDAO();
      PojoInfo  old_hjxx_czrkjbxxbDAO = DAOFactory.
          createOLD_HJXX_CZRKJBXXBDAO();

      /////////////////////////////////////
      //开始事务

      /////////////////////////////////////
      //换算审核签发类型
      String shqflx = null;
      if (PublicConstant.GNBH_ZJ_QXZJSHYW.equals(gnbh)) {
        shqflx = ZjConstant.ZJ_SHQFLX_QXSH;
      }
      else if (PublicConstant.GNBH_ZJ_DSZJSHYW.equals(gnbh)) {
        shqflx = ZjConstant.ZJ_SHQFLX_DSSH;
      }
      else if (PublicConstant.GNBH_ZJ_STZJSHYW.equals(gnbh)) {
        shqflx = ZjConstant.ZJ_SHQFLX_STSH;
      }

      /////////////////////////////////////
      //业务限制判断
      VerifyBusinessLimit(gnbh, voZjshxx);

      ////////////////////////////////////
      //保存证件审核信息
      voZjshfhxx = new VoZjshfhxx[voZjshxx.length];
      for (int i = 0; i < voZjshxx.length; i++) { //循环处理每个证件审核信息

        //得到受理信息
        PoZJYW_SLXXB poSlxx  = super.get(PoZJYW_SLXXB.class,voZjshxx[i].
            getNbslid());
        if (poSlxx == null) {
          throw new ServiceException(WSErrCode.ERR_SERVICE_BUSSINESSLOGIC,
                                     "该证件审核信息对应的受理信息不存在，无法完成证件审核业务。", null);
        }
        //判断受理状态并加锁
        super.refresh(poSlxx, LockOptions.UPGRADE);
        if (ZjConstant.ZJ_BLBZ_2ID_TQZ.equals(poSlxx.getSlzt()) ||
            ZjConstant.ZJ_BLBZ_2ID_XZZZXSC.equals(poSlxx.getSlzt()) ||
            ZjConstant.ZJ_BLBZ_2ID_XSTSC.equals(poSlxx.getSlzt())) { //add by hh 20060330 限制向省厅上传
          throw new ServiceException(WSErrCode.ERR_SERVICE_BUSSINESSLOGIC,
                                     "该证件受理信息在提取中，不允许再审核，无法完成证件审核业务。", null);
        }
        //在区县审核时，进行的时效性判断
        if (PublicConstant.GNBH_ZJ_QXZJSHYW.equals(gnbh)) {
          if (! (ZjConstant.ZJ_BLBZ_2ID_SJWZ.equals(poSlxx.getSlzt()) ||
                 ZjConstant.ZJ_BLBZ_2ID_QXSHTG.equals(poSlxx.getSlzt()) ||
                 ZjConstant.ZJ_BLBZ_2ID_YQF.equals(poSlxx.getSlzt()) ||
                 ZjConstant.ZJ_BLBZ_2ID_QXSHBTG.equals(poSlxx.getSlzt()))) {
            throw new ServiceException(WSErrCode.ERR_SERVICE_BUSSINESSLOGIC,
                                       "时效性错误，受理号为" + poSlxx.getSlh() +
                                       "的记录在操作过程中被其他用户操作过，区县证件审核业务无法完成。", null);
          }
          if ( (ZjConstant.ZJ_BLBZ_2ID_QXSHTG.equals(poSlxx.getSlzt()) ||
                ZjConstant.ZJ_BLBZ_2ID_YQF.equals(poSlxx.getSlzt())) &&
              ZjConstant.ZJ_SHQK_HG.equals(voZjshxx[i].getShqk())) {
            throw new ServiceException(WSErrCode.ERR_SERVICE_BUSSINESSLOGIC,
                                       "受理信息已经审核通过或已签发，不能再次审核成通过。", null);
          }
        }
        //得到人员信息
//        PoHJXX_CZRKJBXXB poRyxx  = super.get(.class,
//            poSlxx.getRynbid());
//        if (poRyxx == null) {
//          throw new ServiceException(WSErrCode.ERR_SERVICE_BUSSINESSLOGIC,
//                                     "证件受理信息对应的人员信息不存在，无法完成证件审核业务。", null);
//        }
        //可能常口中不存在信息，要从历史表中查找 lzh modified here 20070209
        PoHJXX_CZRKJBXXB poRyxx = null;
        PoOLD_HJXX_CZRKJBXXB poOLD_HJXX_CZRKJBXXB = null;
        if (poSlxx != null && poSlxx.getRynbid() != null) {
          poRyxx = super.
              get(PoHJXX_CZRKJBXXB.class,poSlxx.getRynbid());

          if (poRyxx == null) {
            poOLD_HJXX_CZRKJBXXB = super.
                get(PoOLD_HJXX_CZRKJBXXB.class,poSlxx.getRynbid());

            if (poOLD_HJXX_CZRKJBXXB == null) {
              throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER,
                                         "该证件信息对应的常住人口基本信息不存在。", null);
            }

            try {
              poRyxx = new PoHJXX_CZRKJBXXB();
              BeanUtils.copyProperties(poRyxx, poOLD_HJXX_CZRKJBXXB);
            }
            catch (Exception ex) {
              throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER,
                                         "从poOLD_HJXX_CZRKJBXXB中复制信息出错！", null);
            }
          }
        }
        if (poRyxx == null) {
          throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER,
                                     "该证件对应的常住人口基本信息不存在。", null);
        }

        //数据范围权限限制
        if (!VerifyDataRangeByRynbid(gnbh, poSlxx.getRynbid())) {
          throw new ServiceException(WSErrCode.ERR_SERVICE_DATASCOPE,
                                     "地市证件审核业务数据范围受到限制，无法完成证件审核业务。", null);
        }
        //得到证件业务ID
        Long zjywid = (Long) zjls_sfzywczbDAO.getId();

        //置审核签发记录为历史记录
        strHQL = "from PoZJSH_SHQFXXB where cxbz='" + PublicConstant.CXBZ_FCX +
            "' and jlbz='" + PublicConstant.JLBZ_ZX + "' and nbslid=" +
            poSlxx.getNbslid() + " and shqflx='" + shqflx + "' ";
        List shqfxxList =super.findAllByHQL(strHQL);
        if (shqfxxList != null && shqfxxList.size() > 0) {
          for (int k = 0; k < shqfxxList.size(); k++) {
            PoZJSH_SHQFXXB po = (PoZJSH_SHQFXXB) shqfxxList.get(k);
            po.setJlbz(PublicConstant.JLBZ_LS);
           super.update(po);
          }
        }

        //生成审核签发新记录
        PoZJSH_SHQFXXB poShqfxx = new PoZJSH_SHQFXXB();

        try {
          //lzh modified here 20070208添加字段
          BeanUtils.copyProperties(poShqfxx, poRyxx); //从常住人口PO中取得并装载到PO中
          BeanUtils.copyProperties(poShqfxx, poSlxx); //从受理信息PO中取得并装载到PO中
        }
        catch (Exception ex) {
          throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER,
                                     "从常表和受理信息表中装载信息中异常。", null);
        }

        poShqfxx.setShqfid( (Long) zjsh_shqfxxbDAO.getId()); //得到审核签发ID
        poShqfxx.setNbslid(poSlxx.getNbslid());
        poShqfxx.setRynbid(poSlxx.getRynbid());
        poShqfxx.setShqflx(shqflx);
        poShqfxx.setShqk(voZjshxx[i].getShqk());
        poShqfxx.setShrq(now.substring(0, 8));
        poShqfxx.setShrid(this.getUserInfo().getYhid());
        poShqfxx.setShdw(this.getUserInfo().getDwdm());
        //在区县审核时，根据系统控制参数判断审核方式，如果是审核签发便生成签发信息，否则只生成审核信息
        if (PublicConstant.GNBH_ZJ_QXZJSHYW.equals(gnbh) &&
            PublicConstant.
            XTKZCS_XTQXZJSHFS_SHBQF.equals(getXtkzcsAsStr(PublicConstant.
            XTKZCS_XTQXZJSHFS))) {
          poShqfxx.setQfrq(StringUtils.getServiceDate());
          poShqfxx.setQfrid(getUserInfo().getYhid());
          //查找该人门楼牌信息,根据门楼牌mlpnbid得到，证件对应的签发机关
          VoXT_XTCSB vo = getQxqfjgAsVoByRynbid(poSlxx.getRynbid()); //从系统参数中取出签发机关信息
          if (vo != null && vo.getKzbzb() != null &&
              vo.getKzbzb().trim().length() > 0) {
            poShqfxx.setQfdw(vo.getKzbzb()); //设置签发机关(系统参数表扩展标志B)
            poShqfxx.setQfdwjgdm(vo.getKzbzc()); //签发单位机构代码
          }
          else {
            throw new ServiceException(WSErrCode.ERR_SERVICE_DATANOTFULL,
                                       "系统参数表中，参数代码为（1049-->区县对应签发机关）对应的数据值没有设置，无法完成证件审核业务。", null);
          }
        }
        poShqfxx.setCxbz(PublicConstant.CXBZ_FCX);
        poShqfxx.setJlbz(PublicConstant.JLBZ_ZX);
        poShqfxx.setZjywid(zjywid); //证件业务ID

        //根据审核签发类型转换更新受理信息表中的受理状态
        String zjslzt = null;
        //区县审核
        if (ZjConstant.ZJ_SHQFLX_QXSH.equals(shqflx)) {
          zjslzt = (ZjConstant.ZJ_SHQK_HG.equals(voZjshxx[i].getShqk()) ?
                    ZjConstant.ZJ_BLBZ_2ID_QXSHTG :
                    ZjConstant.ZJ_BLBZ_2ID_QXSHBTG);
        }
        //地市验收
        if (ZjConstant.ZJ_SHQFLX_DSSH.equals(shqflx)) {
          zjslzt = (ZjConstant.ZJ_SHQK_HG.equals(voZjshxx[i].getShqk()) ?
                    ZjConstant.ZJ_BLBZ_2ID_DSSHTG :
                    ZjConstant.ZJ_BLBZ_2ID_DSSHBTG);
        }
        //省厅验收
        if (ZjConstant.ZJ_SHQFLX_STSH.equals(shqflx)) {
          zjslzt = (ZjConstant.ZJ_SHQK_HG.equals(voZjshxx[i].getShqk()) ?
                    ZjConstant.ZJ_BLBZ_2ID_STSHTG :
                    ZjConstant.ZJ_BLBZ_2ID_STSHBTG);
        }
        poShqfxx.setSlzt(zjslzt);

        super.create(poShqfxx); //保存签发信息

        //add by hh 20051101 增加审核时间
        if (gnbh.equals(PublicConstant.GNBH_ZJ_DSZJSHYW)) {
          poSlxx.setShrq(StringUtils.getServiceDate());

          //如果不合格，查找质量控制回馈信息；要生成质量控制回馈信息
          //判断审核情况
        }
        if (ZjConstant.ZJ_SHQK_BHG.equals(voZjshxx[i].getShqk())) {
          //保存质量控制回馈信息
          poSlxx.setSlzt(zjslzt);
          poSlxx.setZzxxcwlb(voZjshxx[i].getZzxxcwlb());
          poSlxx.setCwms(voZjshxx[i].getCwms());
          poSlxx.setJydw(this.getXtDwxx_sm());
          poSlxx.setJyrxm(getUserInfo().getYhxm());
          poSlxx.setJyrq(StringUtils.getServiceDate());
          poSlxx.setZlhkzt(poSlxx.getSlzt());
          poSlxx.setHksj(now);
         super.update(poSlxx);
        }
        //处理证件质量控制回馈信息中的错误未处理的记录
        else {
          poSlxx.setZzxxcwlb(null);
          poSlxx.setCwms(null);
          poSlxx.setJydw(null);
          poSlxx.setJyrxm(null);
          poSlxx.setJyrq(null);
          poSlxx.setCldw(null);
          poSlxx.setClrq(null);
          poSlxx.setClqk(null);
          poSlxx.setZlhkzt(null);
          poSlxx.setHksj(null);
          poSlxx.setSlzt(zjslzt);
         super.update(poSlxx);
        }

        /////////////////////////////////////
        //生成身份证操作信息
        saveSfzywlsXtrz(zjywid, gnbh, poSlxx.getSlh(), poSlxx.getSlzt());

        //在地市审核时，删除照片临时表中的对应记录
        if (PublicConstant.GNBH_ZJ_DSZJSHYW.equals(gnbh)) {
          strHQL = "from PoHJXX_ZPLSB where slh='" + poSlxx.getSlh() +
              "' or gmsfhm='" + poRyxx.getGmsfhm() + "' ";
          List zplsxxList =super.findAllByHQL(strHQL);
          if (zplsxxList != null && zplsxxList.size() > 0) {
            for (int k = 0; k < zplsxxList.size(); k++) {
              super.delete( (PoHJXX_ZPLSB) zplsxxList.get(k));
            }
          }
        }

        //在区县审核时，拍照系统相关处理
        if (PublicConstant.GNBH_ZJ_QXZJSHYW.equals(gnbh)) {
          //得到照片临时表中的照片信息
          strHQL = "from PoHJXX_ZPLSB where slh='" + poSlxx.getSlh() +
              "' order by bcsj desc";
          List zplsxxList =super.findAllByHQL(strHQL);
          if (zplsxxList != null && zplsxxList.size() > 0) {
            PoHJXX_ZPLSB poZplsxx = (PoHJXX_ZPLSB) zplsxxList.get(0);
            //生成市民卡照片信息
            if ("1".equals(this.getXtkzcsAsStr(PublicConstant.
                                               XTKZCS_SHSCSMKZPBXX)) &&
                ZjConstant.ZJ_SHQK_HG.equals(voZjshxx[i].getShqk())) {
              VoHJXX_ZPLSB voZplsxx = new VoHJXX_ZPLSB(poZplsxx);
              //保存市民卡照片信息
              VoHJXX_SMKZPB voSmkzpxx = new VoHJXX_SMKZPB();
              voSmkzpxx.setZplsid( (Long) hjxx_smkzpbDAO.getId());
              voSmkzpxx.setSlh(voZplsxx.getSlh());
              voSmkzpxx.setGmsfhm(voZplsxx.getGmsfhm());
              voSmkzpxx.setZp(voZplsxx.getZp());
              voSmkzpxx.setBcsj(now);
              voSmkzpxx.setIpdz(BaseContext.getUser().getIp());
              voSmkzpxx.setYhdlm(this.getUserInfo().getYhdlm());
              voSmkzpxx.setYhxm(this.getUserInfo().getYhxm());
              voSmkzpxx.setYhid(this.getUserInfo().getYhid());
              voSmkzpxx.setYhdw(this.getUserInfo().getDwdm());
              super.create(voSmkzpxx.toPoHJXX_SMKZPB());
            }
            //调用变更更正功能，实现照片变更到人员照片表去中（先受理后拍照方式）
            if (poZplsxx.getZpid() == null) {
              //得到最新的RYNBID
              Long newRynbid = null;
              strHQL = "from PoHJXX_CZRKJBXXB where ryid=" + poRyxx.getRyid() +
                  " and jlbz='" + PublicConstant.JLBZ_ZX + "' and cxbz='" +
                  PublicConstant.CXBZ_FCX + "' ";
              List ryxxList =super.findAllByHQL(strHQL);
              if (ryxxList != null && ryxxList.size() > 0) {
                PoHJXX_CZRKJBXXB po = (PoHJXX_CZRKJBXXB) ryxxList.get(0);
                newRynbid = po.getRynbid();
              }
              VoHJXX_ZPLSB voZplsxx = new VoHJXX_ZPLSB(poZplsxx);
              //生成变更更成信息
              VoBggzxx voBggzxx = new VoBggzxx();
              voBggzxx.setRynbid(newRynbid);
              voBggzxx.setBggzlb(HjConstant.BGGZLB_QT_GZ);
              voBggzxx.setBggzrq(now.substring(0, 8));
              voBggzxx.setBggzxm("zp");
              voBggzxx.setZp(voZplsxx.getZp());
              voBggzxx.setSfbczpdzplsb(false); //Add 2005/05/10 10:05:00 By MHB
              List voBggzxxList = new ArrayList();
              voBggzxxList.add(voBggzxx);
              VoBggzxxEx voBggzxxEx[] = new VoBggzxxEx[1];
              voBggzxxEx[0] = new VoBggzxxEx();
              voBggzxxEx[0].setRynbid(newRynbid);
              voBggzxxEx[0].setFlag(1);
              voBggzxxEx[0].setBggzxxList(voBggzxxList);
              VoBggzfhxxEx voBggzfhxxEx = null;
              //调用变更更正功能，实现照片变更到人员照片表去中
              HjCommon hjCommon = new HjCommon();
              //hjCommon.setUserInfo(BaseContext.getBaseUser());
              Long hjywid = (Long) hjls_hjywlsbDAO.getId();
              hjCommon.saveHJYWLSXX(hjywid, PublicConstant.GNBH_HJ_BGGZYW,
                                    PublicConstant.HJYWLS_YWLX_GR, 1, null, now); //闵红斌增加(2005/03/24 10:00:00)
              voBggzfhxxEx = hjCommon.saveBGGZXX(hjywid, null, voBggzxxEx,
                                                 PublicConstant.GNBH_ZJ_2DZSLYW,
                                                 now);
              VoBgryfhxx voBgryfhxxs[] = (voBggzfhxxEx != null ?
                                          voBggzfhxxEx.getVoBgryfhxx() : null);
              VoBgryfhxx voBgryfhxx = (voBgryfhxxs.length == 1 ? voBgryfhxxs[0] : null);
              //得到变更后的人员信息
              PoHJXX_CZRKJBXXB poRyxxNew = super.
                  get(PoHJXX_CZRKJBXXB.class,
                  voBgryfhxx != null ? voBgryfhxx.getRynbid() : null);
              if (poRyxxNew == null) {
                throw new ServiceException(WSErrCode.ERR_SERVICE_DATANOTFULL,
                                           "找不到变更后的人员信息，区县审核业务无法完成。", null);
              }
              //修改受理信息中的zpid与人员基本信息表中的zpid同步(因为受理信息中的受理状
              //态是区县审核结果,故在变更更正照片时没能同步)
              poSlxx.setZpid(poRyxxNew.getZpid());
             super.update(poSlxx);
            }
            //回填拍照日志信息(闵红斌增加(2004/12/29 13:40:00))
            strHQL = "from PoHJXX_PZRZB where zplsid=" + poZplsxx.getZplsid();
            List pzrzxxList =super.findAllByHQL(strHQL);
            if (pzrzxxList != null && pzrzxxList.size() > 0) {
              for (int k = 0; k < pzrzxxList.size(); k++) {
                PoHJXX_PZRZB poPzrzxx = (PoHJXX_PZRZB) pzrzxxList.get(k);
                poPzrzxx.setSlh(poZplsxx.getSlh());
                poPzrzxx.setGmsfhm(poZplsxx.getGmsfhm());
                poPzrzxx.setNbslid(poSlxx.getNbslid());
                poPzrzxx.setRksj(now);
               super.update(poPzrzxx);
              }
            } //if (pzrzxxList != null && pzrzxxList.size() > 0) {
          } //if (zplsxxList != null && zplsxxList.size() > 0) {
          else if (ZjConstant.ZJ_SHQK_HG.equals(voZjshxx[i].getShqk())) {
            throw new ServiceException(WSErrCode.ERR_SERVICE_BUSSINESSLOGIC,
                                       "没有找到受理信息对应的照片信息，区县审核业务无法完成。", null);
          }
        }

        //生成返回信息
        voZjshfhxx[i] = new VoZjshfhxx();
        voZjshfhxx[i].setNbslid(poSlxx.getNbslid());
        voZjshfhxx[i].setShqfid(poShqfxx.getShqfid());
      }

      //生成业务返回信息
      voZjshywfhxx = new VoZjshywfhxx();
      voZjshywfhxx.setVoZjshfhxx(voZjshfhxx);

      ///////////////////////////////////////
      //提交事务
    }
    catch (ServiceException ex) {
      throw ex;
    }
    catch (DAOException ex) {
      throw ex;
    }

    return voZjshywfhxx;
  }

  /**
   * 二代证地市证件审核业务处理
   * @param voZjshxx - 证件审核信息
   * @return
   * @throws ServiceException
   * @throws DAOException
   */
  public VoZjshywfhxx processDsZjshyw(VoZjshxx voZjshxx[]) throws
      ServiceException, DAOException {
    return this.processZjshyw(voZjshxx, PublicConstant.GNBH_ZJ_DSZJSHYW);
  }

  /**
   * 二代证区县证件审核业务处理
   * @param voZjshxx
   * @return
   * @throws ServiceException
   * @throws DAOException
   */
  public VoZjshywfhxx processQxZjshyw(VoZjshxx voZjshxx[]) throws
      ServiceException, DAOException {
    return this.processZjshyw(voZjshxx, PublicConstant.GNBH_ZJ_QXZJSHYW);
  }

  /**
   * 二代证省厅证件审核业务
   * @param voZjshxx
   * @return
   * @throws ServiceException
   * @throws DAOException
   */
  public VoZjshywfhxx processStZjshyw(VoZjshxx voZjshxx[]) throws
      ServiceException, DAOException {
    return this.processZjshyw(voZjshxx, PublicConstant.GNBH_ZJ_STZJSHYW);
  }

  /**
   *
   * @param arryShqfid
   * @return
   * @throws ServiceException
   * @throws DAOException
   */
  public VoZjshfhxx[] processQxZjqfyw(VoZjslxx[] voZjslxx) throws
      ServiceException,
      DAOException {

    VoZjshfhxx voZjshfhxx[] = null;

    //数据校验
    if (voZjslxx == null || (voZjslxx != null && voZjslxx.length <= 0)) {
      return null;
    }

    try {
      //创建要调用的DAO
      PojoInfo  zjsh_shqfxxbDAO = DAOFactory.createZJSH_SHQFXXBDAO();
      PojoInfo  zjyw_slxxbDAO = DAOFactory.createZJYW_SLXXBDAO();
      PojoInfo  zjls_sfzywczbDAO = DAOFactory.createZJLS_SFZYWCZBDAO();

      ///////////////////////////////////
      //开始事务

      ///////////////////////////////////
      //业务限制判断
      VerifyBusinessLimit(PublicConstant.GNBH_ZJ_QXZJQFYW, voZjslxx);

      ///////////////////////////////////
      //保存区县证件签发信息
      voZjshfhxx = new VoZjshfhxx[voZjslxx.length];
      for (int i = 0; i < voZjslxx.length; i++) {
        //得到受理信息
        PoZJYW_SLXXB poSlxx  = super.get(PoZJYW_SLXXB.class,voZjslxx[i].
            getNbslid());
        if (poSlxx == null) {
          throw new ServiceException(WSErrCode.ERR_SERVICE_BUSSINESSLOGIC,
                                     "该证件受理信息在数据库中不存在，证件签发业务无法完成。", null);
        }
        //判断受理状态
        super.refresh(poSlxx, LockOptions.UPGRADE);
        if (! (ZjConstant.ZJ_BLBZ_2ID_SJWZ.equals(poSlxx.getSlzt()) ||
               ZjConstant.ZJ_BLBZ_2ID_QXSHTG.equals(poSlxx.getSlzt()) ||
               ZjConstant.ZJ_BLBZ_2ID_QXSHBTG.equals(poSlxx.getSlzt()) ||
               ZjConstant.ZJ_BLBZ_2ID_YQF.equals(poSlxx.getSlzt()))) {
          throw new ServiceException(WSErrCode.ERR_SERVICE_BUSSINESSLOGIC,
                                     "时效性错误，受理号为" + poSlxx.getSlh() +
                                     "的记录在操作过程中被其他用户操作过，区县证件签发业务无法完成。", null);
        }
        if (ZjConstant.ZJ_BLBZ_2ID_YQF.equals(poSlxx.getSlzt())) {
          throw new ServiceException(WSErrCode.ERR_SERVICE_BUSSINESSLOGIC,
                                     "受理信息已签发，不能再次签发。", null);
        }

        //数据范围权限限制
        if (!VerifyDataRangeByRynbid(PublicConstant.GNBH_ZJ_QXZJQFYW,
                                     poSlxx.getRynbid())) {
          throw new ServiceException(WSErrCode.ERR_SERVICE_DATASCOPE,
                                     "区县证件签发业务数据范围受到限制，不能办理！", null);
        }

        //修改受理信息中的办理标志
        poSlxx.setSlzt(ZjConstant.ZJ_BLBZ_2ID_YQF); //已签发
       super.update(poSlxx); //修改受理信息

        //保存身份证业务操作信息
        Long zjywid = (Long) zjls_sfzywczbDAO.getId();
        saveSfzywlsXtrz(zjywid, PublicConstant.GNBH_ZJ_QXZJQFYW,
                        poSlxx.getSlh(), poSlxx.getSlzt());

        //修改证件审核信息
        StringBuffer strBuf = new StringBuffer(100);
        strBuf.append(
            "select ZJSH_SHQFXXB from PoZJSH_SHQFXXB as ZJSH_SHQFXXB ")
            .append(" where ZJSH_SHQFXXB.nbslid=").append(String.valueOf(
            poSlxx.getNbslid()))
            .append(" and ZJSH_SHQFXXB.shqflx ='").append(ZjConstant.
            ZJ_SHQFLX_QXSH)
            .append("' and jlbz='" + PublicConstant.JLBZ_ZX + "' ");
        List shqfxxList =super.findAllByHQL(strBuf.toString());
        if (shqfxxList != null && !shqfxxList.isEmpty()) {
          PoZJSH_SHQFXXB poShqfxx = (PoZJSH_SHQFXXB) shqfxxList.get(0);
          //判断证件签发前对应的审核信息是否存在
          if (poShqfxx == null) {
            throw new ServiceException(WSErrCode.ERR_SERVICE_BUSSINESSLOGIC,
                                       "没有查找该证件受理信息对应的区县审核信息。", null);
          }
          poShqfxx.setQfrq(StringUtils.getServiceDate());
          poShqfxx.setQfrid(this.getUserInfo().getYhid());
          //查找该人门楼牌信息,根据门楼牌mlpnbid得到，证件对应的签发机关
          VoXT_XTCSB vo = getQxqfjgAsVoByRynbid(poSlxx.getRynbid()); //从系统参数中取出签发机关信息
          if (vo != null) {
            poShqfxx.setQfdw(vo.getKzbzb()); //设置签发机关(系统参数表扩展标志B)
            poShqfxx.setQfdwjgdm(vo.getKzbzc()); //签发单位机构代码
          }
          //判断签发机关
          if (poShqfxx.getQfdw() == null ||
              (poShqfxx.getQfdw() != null &&
               poShqfxx.getQfdw().trim().equals(""))) {
            throw new ServiceException(WSErrCode.ERR_SERVICE_DATANOTFULL,
                                       "系统参数表中，参数代码为（1049==>区县对应签发机关）对应的数据值没有设置。", null);
          }
         super.update(poShqfxx); //更新证件审核签发信息。

          //生成返回信息
          voZjshfhxx[i] = new VoZjshfhxx();
          voZjshfhxx[i].setNbslid(poSlxx.getNbslid());
          voZjshfhxx[i].setShqfid(poShqfxx.getShqfid());
        }
      }

      //////////////////////////////
      //提交事务
    }
    catch (ServiceException ex) {
      throw ex;
    }
    catch (DAOException ex) {
      throw ex;
    }

    return voZjshfhxx;
  }

  /**
   * 证件受理作废业务
   * @param VoZjslzfxx - 证件受理作废信息
   * @return
   */
  public VoZjslzfywfhxx processZjslzfyw(VoZjslzfxx voZjslzfxx[]) throws
      ServiceException, DAOException {
    VoZjslzfywfhxx voZjslzfywfhxx = null;
    VoZjslzffhxx voZjslzffhxx[] = null;
    String now = StringUtils.getServiceTime();

    /////////////////////////////////////////////
    //数据校验
    if (voZjslzfxx == null || (voZjslzfxx != null && voZjslzfxx.length <= 0)) {
      return null;
    }

    ///////////////////////////////////////////
    //开始事务

    try {
      PojoInfo  zjyw_slxxbDAO = DAOFactory.createZJYW_SLXXBDAO();
      PojoInfo  zjls_sfzywczbDAO = DAOFactory.createZJLS_SFZYWCZBDAO();

      //////////////////////////////////////////////
      //保存证件受理作废信息
      voZjslzffhxx = new VoZjslzffhxx[voZjslzfxx.length];
      for (int i = 0; i < voZjslzfxx.length; i++) {
        //得到受理信息
        PoZJYW_SLXXB poSlxx  = super.get(PoZJYW_SLXXB.class,voZjslzfxx[i].
            getNbslid());
        if (poSlxx == null) {
          throw new ServiceException(WSErrCode.ERR_SERVICE_DATANOTFULL,
                                     "找不到证件受理信息，证件受理作废业务无法完成。", null);
        }

        //业务限制
        VoZJYW_SLXXB voSlxx[] = new VoZJYW_SLXXB[1];
        voSlxx[0] = new VoZJYW_SLXXB(poSlxx);
        VerifyBusinessLimit(PublicConstant.GNBH_ZJ_ZJSLZFYW, voSlxx);

        //数据范围
        if (!BaseContext.getUser().isAdmin()&&!VerifyDataRangeByRynbid(PublicConstant.GNBH_ZJ_ZJSLZFYW,
                                     poSlxx.getRynbid())) {
          throw new ServiceException(WSErrCode.ERR_SERVICE_DATASCOPE,
                                     "证件受理作废业务数据范围受到限制，不能办理！", null);
        }

        //修改受理信息状态
        poSlxx.setSlzt(ZjConstant.ZJ_BLBZ_2ID_ZF);
        if (poSlxx.getZzxxcwlb() != null &&
            poSlxx.getZzxxcwlb().trim().length() > 0) {
          poSlxx.setCldw(this.getUserInfo().getDwdm());
          poSlxx.setClrq(now.substring(0, 8));
          poSlxx.setClqk("已处理");
        }
       super.update(poSlxx);

        //增加证件受理流水信息
        saveSfzywlsXtrz( (Long) zjls_sfzywczbDAO.getId(),
                        PublicConstant.GNBH_ZJ_ZJSLZFYW,
                        poSlxx.getSlh(), ZjConstant.ZJ_BLBZ_2ID_ZF);

        //增加证件受理流水信息
//        PoZJLS_SFZYWCZB poSFZYWCZB = new PoZJLS_SFZYWCZB();
//        poSFZYWCZB.setZjywid((Long)zjls_sfzywczbDAO.getId());
//        poSFZYWCZB.setSlh(poSlxx.getSlh());
//        poSFZYWCZB.setYwbz(PublicConstant.GNBH_ZJ_ZJSLZFYW);
//        poSFZYWCZB.setSlzt(ZjConstant.ZJ_BLBZ_2ID_ZF);
//        poSFZYWCZB.setCzyid(this.getUserInfo().getYhid());
//        poSFZYWCZB.setCzyxm(this.getUserInfo().getYhxm());
//        poSFZYWCZB.setCzsj(StringUtils.getServiceTime());
//        poSFZYWCZB.setCzip(this.getUserInfo().getIp());
//        super.create(poSFZYWCZB);

        //生成返回信息
        voZjslzffhxx[i] = new VoZjslzffhxx();
        voZjslzffhxx[i].setNbslid(poSlxx.getNbslid());
      }

      ////////////////////////////////////
      //生成业务返回信息
      voZjslzfywfhxx = new VoZjslzfywfhxx();
      voZjslzfywfhxx.setVoZjslzffhxx(voZjslzffhxx);

      /////////////////////////////////////
      //提交事务
    }
    catch (DAOException ex) {
      //回滚事务
      throw ex;
    }
    catch (ServiceException ex) {
      //回滚事务
      throw ex;
    }

    return voZjslzfywfhxx;
  }

  /**
   * 证件打包作废业务
   * @param VoZjslzfxx - 证件受理作废信息
   * @return
   */
  public VoZjdbzfywfhxx processZjdbzfyw(VoZjdbzfxx voZjdbzfxx[]) throws
      ServiceException, DAOException {
    VoZjdbzfywfhxx voZjdbzfywfhxx = null;
    VoZjdbzffhxx voZjdbzffhxx[] = null;
    String now = StringUtils.getServiceTime();

    /////////////////////////////////////////////
    //数据校验
    if (voZjdbzfxx == null || (voZjdbzfxx != null && voZjdbzfxx.length <= 0)) {
      return null;
    }

    ///////////////////////////////////////////
    //开始事务

    try {
      PojoInfo  zjyw_slxxbDAO = DAOFactory.createZJYW_SLXXBDAO();
      PojoInfo  zjls_sfzywczbDAO = DAOFactory.createZJLS_SFZYWCZBDAO();

      //////////////////////////////////////////////
      //保存证件受理作废信息
      voZjdbzffhxx = new VoZjdbzffhxx[voZjdbzfxx.length];
      for (int i = 0; i < voZjdbzfxx.length; i++) {
        //得到受理信息
        PoZJYW_SLXXB poSlxx  = super.get(PoZJYW_SLXXB.class,voZjdbzfxx[i].
            getNbslid());
        if (poSlxx == null) {
          throw new ServiceException(WSErrCode.ERR_SERVICE_DATANOTFULL,
                                     "找不到证件受理信息，证件打包作废业务无法完成。", null);
        }
        //判断
        //add by hh 20060330 增加向省厅上传能够作废
        if (! (ZjConstant.ZJ_BLBZ_2ID_XZZZXSC.equals(poSlxx.getSlzt()) ||
               ZjConstant.ZJ_BLBZ_2ID_XSTSC.equals(poSlxx.getSlzt()))) {
          throw new ServiceException(WSErrCode.ERR_SERVICE_DATANOTFULL,
                                     "证件受理状态非'向制证中心上传'状态，证件打包作废业务无法完成。", null);
        }

        //业务限制
        VoZJYW_SLXXB voSlxx[] = new VoZJYW_SLXXB[1];
        voSlxx[0] = new VoZJYW_SLXXB(poSlxx);
        VerifyBusinessLimit(PublicConstant.GNBH_ZJ_ZJDBZFYW, voSlxx);

        //数据范围
        if (!VerifyDataRangeByRynbid(PublicConstant.GNBH_ZJ_ZJDBZFYW,
                                     poSlxx.getRynbid())) {
          throw new ServiceException(WSErrCode.ERR_SERVICE_DATASCOPE,
                                     "证件打包作废业务数据范围受到限制，不能办理！", null);
        }

        //修改受理信息状态
        poSlxx.setSlzt(ZjConstant.ZJ_BLBZ_2ID_DBSZLBHG);
        poSlxx.setZzxxcwlb(voZjdbzfxx[i].getZzxxcwlb());
        poSlxx.setCwms(voZjdbzfxx[i].getCwms());
        poSlxx.setJydw(this.getXtDwxx_sm());
        poSlxx.setJyrxm(getUserInfo().getYhxm());
        poSlxx.setJyrq(StringUtils.getServiceDate());
        poSlxx.setZlhkzt(poSlxx.getSlzt());
        poSlxx.setHksj(now);
       super.update(poSlxx);

        //增加证件受理流水信息
        saveSfzywlsXtrz( (Long) zjls_sfzywczbDAO.getId(),
                        PublicConstant.GNBH_ZJ_ZJDBZFYW,
                        poSlxx.getSlh(), ZjConstant.ZJ_BLBZ_2ID_DBSZLBHG);

//        PoZJLS_SFZYWCZB poSFZYWCZB = new PoZJLS_SFZYWCZB();
//        poSFZYWCZB.setZjywid((Long)zjls_sfzywczbDAO.getId());
//        poSFZYWCZB.setSlh(poSlxx.getSlh());
//        poSFZYWCZB.setYwbz(PublicConstant.GNBH_ZJ_ZJDBZFYW);
//        poSFZYWCZB.setSlzt(ZjConstant.ZJ_BLBZ_2ID_DBSZLBHG);
//        poSFZYWCZB.setCzyid(this.getUserInfo().getYhid());
//        poSFZYWCZB.setCzyxm(this.getUserInfo().getYhxm());
//        poSFZYWCZB.setCzsj(StringUtils.getServiceTime());
//        poSFZYWCZB.setCzip(this.getUserInfo().getIp());
//        super.create(poSFZYWCZB);

        //生成返回信息
        voZjdbzffhxx[i] = new VoZjdbzffhxx();
        voZjdbzffhxx[i].setNbslid(poSlxx.getNbslid());
      }

      ////////////////////////////////////
      //生成业务返回信息
      voZjdbzfywfhxx = new VoZjdbzfywfhxx();
      voZjdbzfywfhxx.setVoZjdbzffhxx(voZjdbzffhxx);

      /////////////////////////////////////
      //提交事务
    }
    catch (DAOException ex) {
      //回滚事务
      throw ex;
    }
    catch (ServiceException ex) {
      //回滚事务
      throw ex;
    }

    return voZjdbzfywfhxx;
  }

  /**
   *
   * 异地二代证件受理业务
   * @param voZjslxx[] - 证件受理信息数组
   * @return Long
   * @throws ServiceException
   * @throws DAOException
   */
  public Long processYdzjslyw(VoYdzjsbxx[] voYdzjslxx) throws
      ServiceException, DAOException {

    String now = StringUtils.getServiceTime();
    Long sbxxid = null;
    Long sdzpid = null;

    //数据完整性处理
    if (voYdzjslxx == null || (voYdzjslxx != null && voYdzjslxx.length <= 0)) {
      return null;
    }

    try {
      //创建调用的对象DAO
      PojoInfo  ydzj_sbxxbDAO = DAOFactory.createYDZJ_SBXXBDAO();
      PojoInfo  ydzj_sdzpDAO = DAOFactory.createYDZJ_SDZPDAO();
      PojoInfo  xt_dwxxbDAO = DAOFactory.createXT_DWXXBDAO();

      //开始事务

      //保存受理信息
      for (int i = 0; i < voYdzjslxx.length; i++) {
        Long sSbh = null;

        //胡斌 20070406 判断受理人是否有正常证件业务受理中
        StringBuffer strHQL = new StringBuffer();
        strHQL.append("from PoYDZJ_SBXXB where gmsfhm='")
            .append(voYdzjslxx[i].getGmsfhm()).append("'")
            .append(" and slzt < 93")
            .append(" and slzt not in (2,10,12,17,23,25,30,32,62,72,82,91)");
//            .append(" and czsj > '20070604010101' ");
        List slxxList =super.findAllByHQL(strHQL.toString());
        if (slxxList != null && slxxList.size() > 0) {
          throw new ServiceException(WSErrCode.ERR_SERVICE_BUSSINESSLOGIC,
                                     "该人已经存在正常的证件受理业务，证件受理业务无法完成。", null);
        }

        //判断是否有质量控制回馈信息，对上笔证件受理信息进行质量处理
        strHQL = new StringBuffer();
        slxxList = null;
        strHQL.append("from PoYDZJ_SBXXB where gmsfhm='")
            .append(voYdzjslxx[i].getGmsfhm()).append("'")
            .append(" and slzt in (10,12,17,23,25,30,32,62,72,82,91)");
        slxxList =super.findAllByHQL(strHQL.toString());
        if (slxxList != null && slxxList.size() > 0) {
          for (int k = 0; k < slxxList.size(); k++) {
            PoYDZJ_SBXXB poSbxx = (PoYDZJ_SBXXB) slxxList.get(k);
            poSbxx.setSlzt(ZjConstant.ZJ_BLBZ_2ID_YCB); //已重办
            poSbxx.setCldw(this.getXtDwxx_sm());
//            poSbxx.setClsj(now.substring(0, 8));
            poSbxx.setClqk("已重办");

            //lzh add this 20070518
            poSbxx.setZlhkzt("2");
            poSbxx.setClsj(now);
            poSbxx.setClr(this.getUserInfo().getYhxm());

            sSbh = poSbxx.getSbxxid();
           super.update(poSbxx);
          }
        }

        sbxxid = (Long) ydzj_sbxxbDAO.getId();
        sdzpid = (Long) ydzj_sdzpDAO.getId();
        String dwdm = this.getUserInfo().getDwdm();
        String dwmc = null;
        List xtdw =super.findAllByHQL("from PoXT_DWXXB where dm='" +
                                                 dwdm + "'");
        if (xtdw.size() > 0) {
          dwmc = ( (PoXT_DWXXB) xtdw.get(0)).getMc();
        }

        //增加异地证件申办信息
        PoYDZJ_SBXXB poYdzj = new PoYDZJ_SBXXB();
        BeanUtils.copyProperties(poYdzj, voYdzjslxx[i]);
        poYdzj.setSbxxid(sbxxid);
        poYdzj.setSbddm(dwdm);
        poYdzj.setSbdmc(dwmc);
        poYdzj.setCzyid(this.getUserInfo().getYhid());
        poYdzj.setCzyxm(this.getUserInfo().getYhxm());
        poYdzj.setCzyip(BaseContext.getUser().getIp());
        poYdzj.setCzsj(now);
        poYdzj.setSlzt(ZjConstant.ZJ_BLBZ_2ID_CS);
        poYdzj.setZpid(sdzpid);
        if (sSbh == null) {
          poYdzj.setSbh(sbxxid);
          poYdzj.setSblx("0"); //证件重办标志，0为正常记录，1为重办记录
        }
        else {
          poYdzj.setSbh(sSbh);
          poYdzj.setSblx("1"); //证件重办标志，0为正常记录，1为重办记录
        }
        super.create(poYdzj);

        //增加异地证件视读照片
        VoYdzjsbxx voLsydxx = new VoYdzjsbxx();
        voLsydxx.setGmsfhm(voYdzjslxx[i].getGmsfhm());
        voLsydxx.setXm(voYdzjslxx[i].getXm());
        voLsydxx.setZp(voYdzjslxx[i].getZp());
        voLsydxx.setLrsj(now);
        voLsydxx.setZpid(sdzpid);
        super.create(voLsydxx.toPoYDZJ_SDZP());

      }

      //提交事务
    }
    catch (ServiceException ex) {
      //回滚事务
      throw ex;
    }
    catch (DAOException ex) {
      //回滚事务
      throw ex;
    }
    catch (Exception ex) {
      //回滚事务
      throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER, ex);
    }

    return sbxxid;
  }

  /**
   * 得到异地证件受理信息。
   * @param strHQL  - 查询条件HQL
   * @param vopage  - 分页信息VO
   * @return        - 查询结果VO
   * @throws <{ServiceException}>
   * @throws <{DAOException}>
   */
  public VoQueryResult queryYdzjsbxx(String strHQL, VoPage vopage) throws
      ServiceException,
      DAOException {
    //调用超类的查询方法。
    return executeQuery(strHQL, vopage, PoYDZJ_SBXXB.class,
                        PublicConstant.GNBH_ZJ_YDZJSLXXCX);
  }

  /**
   * 异地打包量控制查询。
   * @param strHQL  - 查询条件HQL
   * @param vopage  - 分页信息VO
   * @return        - 查询结果VO
   */
  public VoQueryResult queryDblkz(String strHQL, VoPage voPage) throws
      ServiceException,
      DAOException {
    StringBuffer strAllHQL = new StringBuffer();
    StringBuffer strCountHQL = new StringBuffer();
    StringBuffer strFromHQL = new StringBuffer();
    List poList = null;
    List voList = null;
    VoQueryResult voQueryResult = new VoQueryResult();

    //生成FROM HQL语句
    strFromHQL.append("from PoYDZJ_DBLKZ as YDZJ_DBLKZ ")
        .append("where 1=1 ");
    //数据范围???
    if (strHQL != null && strHQL.trim().length() > 0) {
      strFromHQL.append("and ")
          .append(strHQL);
    }

    //生成COUNT HQL语句
    if (voPage.getRecordcount() == -1) {
      strCountHQL.append("select count(*) ").append(strFromHQL.toString());
    }
    else {
      voQueryResult.setRecordcount(voPage.getRecordcount());
    }

    //生成SELECT HQL语句
    strAllHQL.append("select YDZJ_DBLKZ ").append(strFromHQL.toString());

    //debug info
    //_log.info(strAllHQL.toString());

    //执行DAO查询
    try {
      PojoInfo  ydzj_dblkzDAO = DAOFactory.createYDZJ_DBLKZDAO();


      if (voPage.getRecordcount() == -1) {
        voQueryResult.setRecordcount(super.getCount(
            strCountHQL.
            toString()));
      }
      poList =super.getPageRecords(strAllHQL.
          toString(),new Object[]{},
          voPage.getPageindex(),
          voPage.getPagesize()).getList();

    }
    catch (DAOException ex) {
      throw ex;
    }

    voQueryResult.setPagelist(poList);
    voQueryResult.setVotype(PoYDZJ_DBLKZ.class);
    return voQueryResult;
  }

  /**
   * 异地证件人员照片信息获取(PoYDZJ_SDZP)
   * @param strHQL
   * @param voPage
   * @return
   * @throws ServiceException
   * @throws DAOException
   */
  public VoQueryResult queryYdsdzpxx(String strHQL, VoPage voPage) throws
      ServiceException,
      DAOException {

    StringBuffer strAllHQL = new StringBuffer();
    StringBuffer strCountHQL = new StringBuffer();
    StringBuffer strFromHQL = new StringBuffer();
    List poList = null;
    List voList = null;
    VoQueryResult voQueryResult = new VoQueryResult();

    //生成FROM HQL语句
    strFromHQL.append("from PoYDZJ_SDZP as YDZJ_SDZP ")
        .append("where 1=1 ");
    //数据范围???
    if (strHQL != null && strHQL.trim().length() > 0) {
      strFromHQL.append("and ")
          .append(strHQL);
    }

    //生成COUNT HQL语句
    if (voPage.getRecordcount() == -1) {
      strCountHQL.append("select count(*) ").append(strFromHQL.toString());
    }
    else {
      voQueryResult.setRecordcount(voPage.getRecordcount());
    }

    //生成SELECT HQL语句
    strAllHQL.append("select YDZJ_SDZP ").append(strFromHQL.toString());

    //debug info
    //_log.info(strAllHQL.toString());

    //执行DAO查询
    try {
      PojoInfo  ydzj_sdzpDAO = DAOFactory.createYDZJ_SDZPDAO();


      if (voPage.getRecordcount() == -1) {
        voQueryResult.setRecordcount(super.getCount(
            strCountHQL.
            toString()));
      }
      poList =super.getPageRecords(strAllHQL.
                                                  toString(),new Object[]{},
                                                  voPage.getPageindex(),
                                                  voPage.getPagesize()).getList();

    }
    catch (DAOException ex) {
      throw ex;
    }

    //转换成Vo
    if (poList != null && poList.size() > 0) {
      voList = new ArrayList();
      for (int i = 0; i < poList.size(); i++) {
        PoYDZJ_SDZP poYDZJ_SDZP = (PoYDZJ_SDZP)
            poList.get(i);

        VoYdzjsbxx voYdzpxx = new VoYdzjsbxx(poYDZJ_SDZP);
        voList.add(voYdzpxx);
      }
    }

    voQueryResult.setPagelist(voList);
    voQueryResult.setVotype(VoYdzjsbxx.class);
    return voQueryResult;
  }

  /**
   * 异地证件受理作废业务
   * @param VoZjslzfxx - 证件受理作废信息
   * @return
   */
  public VoYdslzfywfhxx processYdslzfyw(VoYdslzfxx voYdslzfxx[]) throws
      ServiceException, DAOException {
    VoYdslzfywfhxx voYdslzfywfhxx = null;
    VoYdslzffhxx voYdslzffhxx[] = null;
    String now = StringUtils.getServiceTime();

    /////////////////////////////////////////////
    //数据校验
    if (voYdslzfxx == null || (voYdslzfxx != null && voYdslzfxx.length <= 0)) {
      return null;
    }

    ///////////////////////////////////////////
    //开始事务

    try {
      PojoInfo  ydzj_sbxxbDAO = DAOFactory.createYDZJ_SBXXBDAO();

      //////////////////////////////////////////////
      //保存证件受理作废信息
      voYdslzffhxx = new VoYdslzffhxx[voYdslzfxx.length];
      for (int i = 0; i < voYdslzfxx.length; i++) {
        //得到受理信息
        PoYDZJ_SBXXB poSlxx  = super.get(PoYDZJ_SBXXB.class,voYdslzfxx[i].
            getSbxxid());
        if (poSlxx == null) {
          throw new ServiceException(WSErrCode.ERR_SERVICE_DATANOTFULL,
                                     "找不到异地证件受理信息，证件受理作废业务无法完成。", null);
        }
        else {
          if (! (this.getUserInfo().getYhdlm().equals("HZADMIN")) &&
              ! (this.getUserInfo().getYhid().equals(poSlxx.getCzyid()))) {
            throw new ServiceException(WSErrCode.ERR_SERVICE_DATANOTFULL,
                                       "非本人受理证件，作废业务无法完成。", null);

          }
          ;
        }

//lzh modified here 屏蔽掉服务器的判断，改为客户端判断
//        if (PublicConstant.TBBZ_YTQ.equals(poSlxx.getTbbz())) {
//          throw new ServiceException(WSErrCode.ERR_SERVICE_DATANOTFULL,
//                                     "异地证件受理信息已经上报制证中心，证件受理作废业务无法完成。", null);
//        }

        //修改受理信息状态
        poSlxx.setSlzt(ZjConstant.ZJ_BLBZ_2ID_ZFGD);
        //作废时，把同步标志改为'已提取'
       // poSlxx.setTbbz("1");
       super.update(poSlxx);

        //生成返回信息
        voYdslzffhxx[i] = new VoYdslzffhxx();
        voYdslzffhxx[i].setSbxxid(poSlxx.getSbxxid());
      }

      ////////////////////////////////////
      //生成业务返回信息
      voYdslzfywfhxx = new VoYdslzfywfhxx();
      voYdslzfywfhxx.setVoYdslzffhxx(voYdslzffhxx);

      /////////////////////////////////////
      //提交事务
    }
    catch (DAOException ex) {
      //回滚事务
      throw ex;
    }
    catch (ServiceException ex) {
      //回滚事务
      throw ex;
    }
    catch (Exception ex) {
      //回滚事务
      throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER, ex);
    }

    return voYdslzfywfhxx;
  }

  /**
   * 异地证件打包量控制删除
   * @param 打包量控制删除信息
   * @return
   */
  public VoYdslDblkzfhxx[] ProcessDeleteDblkz(VoYdslDblkzfhxx voYdslDblkzfhxx[]) throws
      ServiceException, DAOException {
    StringBuffer strAllHQL = new StringBuffer();
    VoYdslDblkzfhxx voYdslDblkzfh[] = null;
    String now = StringUtils.getServiceTime();

    /////////////////////////////////////////////
    //数据校验
    if (voYdslDblkzfhxx == null ||
        (voYdslDblkzfhxx != null && voYdslDblkzfhxx.length <= 0)) {
      return null;
    }

    ///////////////////////////////////////////
    //开始事务

    try {
      PojoInfo  ydzj_dblkzDAO = DAOFactory.createYDZJ_DBLKZDAO();

      //////////////////////////////////////////////
      //保存证件受理作废信息
      voYdslDblkzfh = new VoYdslDblkzfhxx[voYdslDblkzfhxx.length];
      for (int i = 0; i < voYdslDblkzfhxx.length; i++) {
        //得到受理信息
        strAllHQL.append(" from PoYDZJ_DBLKZ where SBDDM = '").
            append(voYdslDblkzfhxx[i].getSbddm()).append("'");
        List poDblkzs =super.findAllByHQL(strAllHQL.toString());
        if (poDblkzs == null) {
          throw new ServiceException(WSErrCode.ERR_SERVICE_DATANOTFULL,
                                     "找不到异地证件打包量控制信息，异地证件打包量控制删除业务无法完成。", null);
        }
        if (poDblkzs != null && poDblkzs.size() > 0) {
          PoYDZJ_DBLKZ po = (PoYDZJ_DBLKZ) poDblkzs.get(0);
          super.delete(po);
        }

        //生成返回信息
        voYdslDblkzfh[i] = new VoYdslDblkzfhxx();
        voYdslDblkzfh[i].setSbddm(voYdslDblkzfhxx[i].getSbddm());
      }

      /////////////////////////////////////
      //提交事务
    }
    catch (DAOException ex) {
      //回滚事务
      throw ex;
    }
    catch (ServiceException ex) {
      //回滚事务
      throw ex;
    }
    catch (Exception ex) {
      //回滚事务
      throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER, ex);
    }

    return voYdslDblkzfh;
  }

  /**
   * 异地证件领取发放提交业务
   * @param voYdzjlqhqxx VoYdzjlqhqxx[]
   * @throws ServiceException
   * @throws DAOException
   * @return VoYdzjlqywfhxx
   */
  public VoYdzjlqywfhxx processYdzjlqffyw(VoYdzjlqhqxx[] voYdzjlqhqxx) throws
      ServiceException, DAOException {

    String now = StringUtils.getServiceTime();
    VoYdzjlqywfhxx voYdzjlqywfhxx = null;

    if (voYdzjlqhqxx == null ||
        (voYdzjlqhqxx != null && voYdzjlqhqxx.length <= 0)) {
      return null;
    }

    try {
      VerifyBusinessLimit(PublicConstant.GNBH_ZJ_YDZJLQFFYW, voYdzjlqhqxx);


      VoYdzjlqhqxx[] voydzjlqxx = new VoYdzjlqhqxx[voYdzjlqhqxx.length];

      //循环处理，每个证件领取发放信息
      for (int i = 0; i < voYdzjlqhqxx.length; i++) {
        Long lSbxxid = voYdzjlqhqxx[i].getSbxxid();
        VoYdzjlqhqxx avoYdzjlqhqxx = voYdzjlqhqxx[i];

        PojoInfo  ydzj_sbxxbDAO = DAOFactory.createYDZJ_SBXXBDAO();
        PoYDZJ_SBXXB poYDZJ_SBXX  = super.get(PoYDZJ_SBXXB.class,lSbxxid);

        if (poYDZJ_SBXX.getSlzt().equals(ZjConstant.ZJ_BLBZ_2ID_YLZ)) {
          throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER,
                                     "此证已经领取!", null);
        }

        poYDZJ_SBXX.setLzrxm(voYdzjlqhqxx[i].getLzrxm());
        poYDZJ_SBXX.setLzrgmsfhm(voYdzjlqhqxx[i].getLzrgmsfhm());
        poYDZJ_SBXX.setLzrdh(voYdzjlqhqxx[i].getLzrdh());
        poYDZJ_SBXX.setLzslr(this.getUserInfo().getYhid());
        poYDZJ_SBXX.setLzsj(now);
        poYDZJ_SBXX.setSlzt(ZjConstant.ZJ_BLBZ_2ID_YLZ);
       super.update(poYDZJ_SBXX);

        avoYdzjlqhqxx.setYwfhsbxxid(lSbxxid);
      }

      //提交事务

      voYdzjlqywfhxx = new VoYdzjlqywfhxx();
      voYdzjlqywfhxx.setYdzjlqhqxx(voydzjlqxx);
    }
    catch (ServiceException ex) {
      //回滚事务
      throw ex;
    }
    catch (DAOException ex) {
      //回滚事务
      throw ex;
    }
    catch (Exception ex) {
      //回滚事务
      throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER, ex);
    }

    return voYdzjlqywfhxx;
  }

  /**
   * 异地证件打包量控制增加
   * @param VoZjslzfxx - 打包量控制增加信息
   * @return
   */
  public VoYdslDblkzfhxx[] ProcessAddDblkz(PoYDZJ_DBLKZ[] poYDZJ_DBLKZ) throws
      ServiceException, DAOException {
    StringBuffer strAllHQL = new StringBuffer();
    VoYdslDblkzfhxx voYdslDblkzfh[] = null;
    String now = StringUtils.getServiceTime();

    /////////////////////////////////////////////
    //数据校验
    if (poYDZJ_DBLKZ == null ||
        (poYDZJ_DBLKZ != null && poYDZJ_DBLKZ.length <= 0)) {
      throw new ServiceException(WSErrCode.ERR_SERVICE_DATANOTFULL,
                                 "找不到异地证件打包量控制信息，异地证件打包量控制增加业务无法完成。", null);
    }

    ///////////////////////////////////////////
    //开始事务

    try {
      PojoInfo  ydzj_dblkzDAO = DAOFactory.createYDZJ_DBLKZDAO();

      //////////////////////////////////////////////
      //保存证件受理作废信息
      voYdslDblkzfh = new VoYdslDblkzfhxx[poYDZJ_DBLKZ.length];
      for (int i = 0; i < poYDZJ_DBLKZ.length; i++) {

        //增加异地证件申办信息
        PoYDZJ_DBLKZ poYdzj = new PoYDZJ_DBLKZ();
        BeanUtils.copyProperties(poYdzj, poYDZJ_DBLKZ[i]);
        poYdzj.setCshsj(now);
        super.create(poYdzj);

        //生成返回信息
        voYdslDblkzfh[i] = new VoYdslDblkzfhxx();
        voYdslDblkzfh[i].setSbddm(poYDZJ_DBLKZ[i].getSbddm());
      }

      /////////////////////////////////////
      //提交事务
    }
    catch (DAOException ex) {
      //回滚事务
      throw ex;
    }
    catch (ServiceException ex) {
      //回滚事务
      throw ex;
    }
    catch (Exception ex) {
      //回滚事务
      throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER, ex);
    }

    return voYdslDblkzfh;
  }

  /**
   * 异地证件打包量控制修改
   * @param VoZjslzfxx - 打包量控制修改信息
   * @return
   */
  public VoYdslDblkzfhxx[] ProcessModifyDblkz(PoYDZJ_DBLKZ[] poYDZJ_DBLKZ) throws
      ServiceException, DAOException {
    StringBuffer strAllHQL = new StringBuffer();
    VoYdslDblkzfhxx voYdslDblkzfh[] = null;
    String now = StringUtils.getServiceTime();

    /////////////////////////////////////////////
    //数据校验
    if (poYDZJ_DBLKZ == null ||
        (poYDZJ_DBLKZ != null && poYDZJ_DBLKZ.length <= 0)) {
      throw new ServiceException(WSErrCode.ERR_SERVICE_DATANOTFULL,
                                 "找不到异地证件打包量控制信息，异地证件打包量控制修改业务无法完成。", null);
    }

    ///////////////////////////////////////////
    //开始事务

    try {
      PojoInfo  ydzj_dblkzDAO = DAOFactory.createYDZJ_DBLKZDAO();

      //////////////////////////////////////////////
      //保存证件受理作废信息
      voYdslDblkzfh = new VoYdslDblkzfhxx[poYDZJ_DBLKZ.length];
      for (int i = 0; i < poYDZJ_DBLKZ.length; i++) {

        strAllHQL.append(" from PoYDZJ_DBLKZ where SBDDM = '").
            append(poYDZJ_DBLKZ[i].getSbddm()).append("'");
        List poDblkzs =super.findAllByHQL(strAllHQL.toString());
        if (poDblkzs == null) {
          throw new ServiceException(WSErrCode.ERR_SERVICE_DATANOTFULL,
                                     "找不到异地证件打包量控制信息，业务无法完成。", null);
        }
        if (poDblkzs != null && poDblkzs.size() > 0) {
          PoYDZJ_DBLKZ po = (PoYDZJ_DBLKZ) poDblkzs.get(0);
          po.setJbdbl(poYDZJ_DBLKZ[i].getJbdbl());
         super.update(po);
        }

        //生成返回信息
        voYdslDblkzfh[i] = new VoYdslDblkzfhxx();
        voYdslDblkzfh[i].setSbddm(poYDZJ_DBLKZ[i].getSbddm());
      }

      /////////////////////////////////////
      //提交事务
    }
    catch (DAOException ex) {
      //回滚事务
      throw ex;
    }
    catch (ServiceException ex) {
      //回滚事务
      throw ex;
    }
    catch (Exception ex) {
      //回滚事务
      throw new ServiceException(WSErrCode.ERR_SERVICE_OTHER, ex);
    }

    return voYdslDblkzfh;
  }

  /**
   * 绍兴绿色通道身份证查询。
   * @param strGmsfhm
   * @param strHQL
   * @return
   * @throws DAOException
   */
  public int querySxlstdsfzcx(String strGmsfhm, String strHQL) throws
      ServiceException,DAOException {
    int i = 0;
    StringBuffer strAllHQL = new StringBuffer();
    strAllHQL.append(" from PoWW_BZLSTDRYXX where 1=1 ");

    try {
      if (!"".equals(strGmsfhm.trim())) {
        strAllHQL.append(" and gmsfhm='" + strGmsfhm + "' ");
      }
      PojoInfo  ww_bzlstdryDAO = DAOFactory.createWW_BZLSTDRYXXDAO();
      List pobzlstdry =super.findAllByHQL(strAllHQL.
          toString());
      if (pobzlstdry.size() > 0) {
        i = 1;
      }
    }
    catch (Exception ex) {
      i = 0;
    }
    return i;
  }

@Override
public long updateHzywPj(Map param) {
    try{
        String ids = (String)param.get("hzywid");
        String pj = (String)param.get("pj");
        if(ids==null || ids.trim().equals(""))
          throw new  Exception("参数错误！");

        String[] str = ids.split(",");
        long count = 0;
        for(String hzywid:str){
        	if(CommonUtil.isEmpty(hzywid) || "null".equals(hzywid))
        		continue;
        	
        	String hql = "from " + PoHZ_ZJ_SB.class.getName() + " a where a.id = ? ";
	        List list =super.findAllByHQL(hql, new Object[]{Long.parseLong(hzywid)});
	        if(list.size()>0){
	          PoHZ_ZJ_SB sb = (PoHZ_ZJ_SB)list.get(0);
	
	          if(sb.getPch()!=null && !sb.getPch().equals("")){
	            //一个批次，统一处理
	            System.out.println("批量完成处理！");
	            list = super.findEntities("from PoHZ_ZJ_SB a where a.pch='" + sb.getPch() + "'");
	            int pccount = list.size();
	            for(int index=0;index<pccount;index++){
	                 PoHZ_ZJ_SB sbx = (PoHZ_ZJ_SB)list.get(index);
	                 sbx.setPj(pj);
	                super.update(sbx);
	             }
	          }else{
	             sb.setPj(pj);
	             super.update(sb);
	          }
	          
	          count += list.size();
	        }
        }
        
        return count;
        /////////////////////////////////////////////////////////////////
        //提交事务
        /////////////////////////////////////////////////////////////////
      }
      catch (Exception ex) {
        //回滚事务
        throw new java.lang.RuntimeException(ex);
      }
  }

@Override
public long updateHzywBj(ExtMap<String, Object> param) {

	  try{
		  String ids = (String)param.get("hzywid");
		  String clbs = (String)param.get("clbs");
		  if(clbs==null || clbs.trim().equals(""))
			  clbs = "1";
		  
		  if(ids==null || ids.trim().equals(""))
			  throw new  Exception("参数错误！");
		  
		  /////////////////////////////////////////////////////////////////
		  //开始事务
		  /////////////////////////////////////////////////////////////////
		  
		  //////////////////////////////////////////////////////////////////
		  //4、调用DAO查询
		  //////////////////////////////////////////////////////////////////
		  
		  //创建调用的DAO
		  DefaultDAO dao = new DefaultDAO();
		  String[] str = ids.split(",");
		  long count = 0;
		  for(String hzywid:str){
			  if(CommonUtil.isEmpty(hzywid))
				  continue;
			  
			  List list =super.findAllByHQL("from PoHZ_ZJ_SB a where a.clbs=0 and a.id=" + hzywid);
			  if(list.size()>0){
				  PoHZ_ZJ_SB sb = (PoHZ_ZJ_SB)list.get(0);
				  
				  if(sb.getPch()!=null && !sb.getPch().equals("")){
					  //一个批次，统一处理
					  System.out.println("批量办结处理！");
					  list = super.findEntities("from PoHZ_ZJ_SB a where a.pch='" + sb.getPch() + "'");
					  int pccount = list.size();
					  for(int index=0;index<pccount;index++){
						  PoHZ_ZJ_SB sbx = (PoHZ_ZJ_SB)list.get(index);
						  sbx.setClbs("1");
						  sbx.setClsj(CommonUtil.getTimestamp(new java.util.Date()));
						  sbx.setBlrsfz(this.getUser().getGmsfhm());
						  super.update(sbx);
					  }
				  }else{
					  sb.setClbs("1");
					  sb.setClsj(CommonUtil.getTimestamp(new java.util.Date()));
					  sb.setBlrsfz(this.getUser().getGmsfhm());
					  super.update(sb);
				  }
				  
				  count += list.size();
			  }
		  }
		  
		  return count;
		  /////////////////////////////////////////////////////////////////
		  //提交事务
		  /////////////////////////////////////////////////////////////////
	  }
	  catch (Exception ex) {
		  //回滚事务
		  throw new java.lang.RuntimeException(ex);
	  }

}


}
