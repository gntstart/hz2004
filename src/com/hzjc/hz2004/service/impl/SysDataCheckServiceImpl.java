/* Generated by Together */

package com.hzjc.hz2004.service.impl;

import com.hzjc.hz2004.service.SysDataCheckService;
import com.hzjc.wsstruts.exception.*;
import com.hzjc.hz2004.po.*;
import com.hzjc.wsstruts.vo.*;
import com.hzjc.wsstruts.po.*;
import com.hzjc.hz2004.common.*;
import com.hzjc.hz2004.constant.HjConstant;
import java.util.*;
import org.apache.commons.beanutils.BeanUtils;
import com.hzjc.util.StringUtils;
import com.hzjc.hz2004.vo.VoXT_XTCSB;
import com.hzjc.hz2004.appbase.*;
import com.hzjc.hz2004.base.SpringContextHolder;
import com.hzjc.hz2004.dao.*;

import com.hzjc.wsstruts.vo.*;
import org.apache.commons.logging.*;
import org.springframework.stereotype.Service;

import com.hzjc.hz2004.constant.PublicConstant;

/**
 * 系统数据逻辑校验接口的实现
 * <p>Title: Hz2004</p>
 * <p>Description: 常住人口管理系统Hz2004版</p>
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Company: 浙江金铖华元新技术有限公司</p>
 * @author kgb_hz@126.com,kgb@primetech.com.cn
 * @version 1.0
 */
@Service
public class SysDataCheckServiceImpl
    extends Hz2004BaseService
    implements SysDataCheckService {
  //日志处理
  protected static Log _log = LogFactory.getLog(SysDataCheckServiceImpl.class);

  /**
   * 查询常住人口逻辑校验错误信息
   * @param strHQL  - 查询HQL条件
   * @param vopage  - 分页查询条件
   * @return
   * @throws ServiceException
   * @throws DAOException
   */
  public VoQueryResult queryRyljjycwxx(String strHQL, VoPage vopage) throws
      ServiceException,
      DAOException {
    VoQueryResult voQryResult = new VoQueryResult();
    try {
      ///////////////////////////////////////////////////////////////
      //1、判断传入的参数vopage
      ///////////////////////////////////////////////////////////////
      int iPageOffset = vopage.getPageindex();
      int iPageSize = vopage.getPagesize();
      long iRecordCount = vopage.getRecordcount();
      //创建组织HQL的Buffer
      StringBuffer strBufHQLFromWhere = new StringBuffer();
      ////////////////////////////////////////////////////////////////
      //2、组织select语句部分
      ///////////////////////////////////////////////////////////////
      String strHQLSelectCount = " select count(*) ";
      String strHQLSelect = " select po ";
      /////////////////////////////////////////////////////////////////
      ////////////////////////////////////////////////////////////////
      //3、组织from * where *语句部分
      ////////////////////////////////////////////////////////////////
      strBufHQLFromWhere.append(" from PoXT_RYLJJYCWXXB as  po where 1=1 ");

      //组合传入的条件限制语句
      if (strHQL != null && !strHQL.trim().equals("")) {
        strBufHQLFromWhere.append(" and ");
        strBufHQLFromWhere.append(strHQL);
      }
      //////////////////////////////////////////////////////////////////
      //4、调用DAO查询，返回一页记录；如果RecordCount = -1，则要查询所有记录数
      //////////////////////////////////////////////////////////////////
      //开始事务
      //创建调用的DAO
      PojoInfo  dao = DAOFactory.createXT_RYLJJYCWXXBDAO();
      List lstPos = null;
      long lCount = iRecordCount;
      String strHQLAll = strHQLSelect.concat(strBufHQLFromWhere.toString()).
          toString();
      //_log.info("常住人口基本信息查询HQL=" + strHQLAll);
      //查询返回一页记录
      lstPos =super.getPageRecords(strHQLAll, new Object[]{},iPageOffset,
                                              iPageSize).getList();
      //如果传入的记录数为-1，则要查询返回总记录数
      if (iRecordCount == -1) {
        strHQLAll = strHQLSelectCount.concat(strBufHQLFromWhere.toString()).
            toString();
        lCount  = super.getCount(strHQLAll);
      }
      //提交事务
      /////////////////////////////////////////////////////////////////
      //5、返回值初始化
      /////////////////////////////////////////////////////////////////
      voQryResult.setPagelist(lstPos);
      voQryResult.setVotype(PoXT_RYLJJYCWXXB.class);
      voQryResult.setRecordcount(lCount);
    }
    catch (DAOException ex) {
      //回滚事务
      throw ex;
    }
    catch (ServiceException ex) {
      throw ex;
    }
    return voQryResult;
  }

  /**
   * 常住人口基本信息数据查错业务
   * @throws ServiceException
   * @throws DAOException
   */
  public void checkRkjbxxb() throws ServiceException, DAOException {

    try {
      //_log.info("常住人口基本信息数据查错业务－开始");
      long lStart = System.currentTimeMillis();

      ////////////////////////////////////////////////////////////////////////
      //查询人口基本信息中的总数
      PojoInfo  daoCzrk = DAOFactory.createHJXX_CZRKJBXXBDAO();
      PojoInfo  daoRyljjy = DAOFactory.createXT_RYLJJYCWXXBDAO();

      //_log.info("查询正常的，最新的常住人口总数");
      String strAllCzrk = "from PoHJXX_CZRKJBXXB where jlbz='" +
          PublicConstant.JLBZ_ZX + "' and ryzt='" + HjConstant.RYZT_ZC + "' ";
      String strAllCountCzrk =
          "select count(*)  from PoHJXX_CZRKJBXXB where jlbz='" +
          PublicConstant.JLBZ_ZX + "' and ryzt='" + HjConstant.RYZT_ZC + "' ";
      int iRCount = Integer.parseInt(super.getCount(strAllCountCzrk)+"");

      int iPageSize = 300;
      int iPageCount = iRCount / iPageSize;
      int iReserveSize = iRCount % iPageSize;
      if (iReserveSize != 0) {
        iPageCount += 1;
      }
      int iOffset = 0;

      /////////////////////////////////////////////////////////////////////////
      //删除所有人员逻辑校验错误信息表记录
      //_log.info("删除所有人员逻辑校验错误信息表记录");
  
     //daoRyljjy.deleteAllXT_RYLJJYCWXXBs();
     super.executeSqlUpdate("delete " +daoRyljjy.getEntityType().getSimpleName()  , new Object[]{});
      /////////////////////////////////////////////////////////////////////////
      //循环处理每页记录
      CzrkjbxxDataCheckerChain rChain = new CzrkjbxxDataCheckerChain();
      rChain.setJyrid(this.getUserInfo().getYhid());
      for (int i = 0; i < iPageCount; i++) {
        iOffset = i * iPageSize;
        List lstpo = super.getPageRecords(
        		strAllCzrk,
        		new Object[]{},
        		iOffset,
            iPageSize).getList();
        //_log.info("逻辑校验一页常住人口数据（".concat(String.valueOf(iPageSize)).concat(  "/页）"));
        rChain.doChecker( (PoHJXX_CZRKJBXXB[]) lstpo.toArray(new
            PoHJXX_CZRKJBXXB[
            lstpo.size()]));
        lstpo.clear(); //清除掉
      }
      long lTime = System.currentTimeMillis() - lStart;
      //_log.info("业务操作时间：".concat(String.valueOf(lTime / (1000 * 60))).concat( "分钟！"));
      //_log.info("常住人口基本信息数据查错业务-结束");
    }
    catch (DAOException ex) {
      throw ex;
    }
    catch (ServiceException ex) {
      throw ex;
    }

  }

  /**
   * 常住人口基本信息数据校验链
   */
  private class CzrkjbxxDataCheckerChain
      extends ArrayList
      implements IDataCheckerChain {

    private Long jyrid;

    public void setJyrid(Long lJyrid) {
      this.jyrid = lJyrid;
    }

    public Long getJyrid() {
      return this.jyrid;
    }

    /**
     *
     */
    public CzrkjbxxDataCheckerChain() {
      addDataChecker(new GmsfhmDataChecker());
      addDataChecker(new CsrqDataChecker());
      addDataChecker(new JtgxDataChecker());
    }

    /**
     *
     * @param checker
     */
    private void addDataChecker(IDataChecker checker) {
      add(checker);
    }

    /**
     *
     * @param arryPos
     * @throws ServiceException
     * @throws DAOException
     */
    public void doChecker(PO[] arryPos) throws ServiceException, DAOException {
      if (arryPos != null && arryPos.length > 0) {
        ///////////////////////////////////////////////////////////////////////
        //开始事务
        PojoInfo  daoRylj = DAOFactory.createXT_RYLJJYCWXXBDAO();
        PojoInfo  daoMlpxx = DAOFactory.createHJXX_MLPXXXXBDAO();
        String strPcs =
            "select po.pcs from PoHJXX_MLPXXXXB as po where po.mlpnbid=";
        
        //////////////////////////////////////////////////////////////////////
        //处理一页数据
        for (int i = 0; i < arryPos.length; i++) { //循环所有PO
          PoHJXX_CZRKJBXXB po = (PoHJXX_CZRKJBXXB) arryPos[i];
          for (int j = 0; j < size(); j++) { //循环链中所有处理数据检验
            IDataChecker checker = (IDataChecker) get(j);
            List lstvo = checker.doChecker(po);

            if (lstvo != null && !lstvo.isEmpty()) { //循环处理所有检验错误的VO
              for (int m = 0; m < lstvo.size(); m++) {
                VoRyljjycwxx vo = (VoRyljjycwxx) lstvo.get(m);

                if (vo != null && vo.getMlpnbid() != null) {
                  List lstmlp = SpringContextHolder.getCommonService().queryAll(strPcs.concat(vo.
                      getMlpnbid().toString()));
                  if (lstmlp != null && !lstmlp.isEmpty()) {
                    vo.setPcs(String.valueOf(lstmlp.get(0)));
                  }
                }

                //////////////////////////////////////////////////////////////////////
                //插入一条记录
                PoXT_RYLJJYCWXXB poRylj = vo.toPoRyljjycwxx();
                poRylj.setJyid( (Long) daoRylj.getId());
                poRylj.setJyrid(this.getJyrid());
                poRylj.setJysj(StringUtils.getServiceTime());
                SpringContextHolder.getCommonService().insertObject(poRylj);
              }
            }
          }
        }
      }
    }
  }

  /**
   * 数据校验链接口
   */
  private interface IDataCheckerChain
      extends List {

    /**
     *
     * @param arryPos
     * @throws ServiceException
     */
    void doChecker(PO[] arryPos) throws ServiceException, DAOException;
  }

  /**
   * 常住人员逻辑错误信息数据传输对象
   */
  private class VoRyljjycwxx
      implements VO {
    private Long ryid;
    private Long rynbid;
    private String xm;
    private String gmsfhm;
    private String pcs;
    private String sm;
    private Long mlpnbid;

    /**
     *
     */
    public VoRyljjycwxx() {
    }

    /**
     *
     * @param po
     */
    public VoRyljjycwxx(PoHJXX_CZRKJBXXB po) {
      fromPoRyljjycwxx(po);
    }

    /**
     *
     * @param po
     */
    public void fromPoRyljjycwxx(PoHJXX_CZRKJBXXB po) {
      if (po != null) {
        this.setRyid(po.getRyid());
        this.setRynbid(po.getRynbid());
        this.setXm(po.getXm());
        this.setGmsfhm(po.getGmsfhm());
        this.setMlpnbid(po.getMlpnbid());
      }

    }

    /**
     *
     * @return
     */
    public PoXT_RYLJJYCWXXB toPoRyljjycwxx() {
      PoXT_RYLJJYCWXXB po = new PoXT_RYLJJYCWXXB();
      po.setRyid(this.getRyid());
      po.setRynbid(this.getRynbid());
      po.setXm(this.getXm());
      po.setGmsfhm(this.getGmsfhm());
      po.setPcs(this.getPcs());
      po.setSm(this.getSm());
      return po;
    }

    public void setMlpnbid(Long mlpnbid) {
      this.mlpnbid = mlpnbid;
    }

    public Long getMlpnbid() {
      return this.mlpnbid;
    }

    public void setRyid(Long ryid) {
      this.ryid = ryid;
    }

    public Long getRyid() {
      return ryid;
    }

    public void setRynbid(Long rynbid) {
      this.rynbid = rynbid;
    }

    public Long getRynbid() {
      return rynbid;
    }

    public void setXm(String xm) {
      this.xm = xm;
    }

    public String getXm() {
      return xm;
    }

    public void setGmsfhm(String gmsfhm) {
      this.gmsfhm = gmsfhm;
    }

    public String getGmsfhm() {
      return gmsfhm;
    }

    public void setPcs(String pcs) {
      this.pcs = pcs;
    }

    public String getPcs() {
      return pcs;
    }

    public void setSm(String sm) {
      this.sm = sm;
    }

    public String getSm() {
      return sm;
    }

  }

  /**
   * 家庭关系校验
   * 说明：与性别－与婚姻状况
   */
  private class JtgxDataChecker
      extends CzrkjbxxDataChecker
      implements IDataChecker {

    private static final String ERR_JTGX_XB = "<家庭关系与性别>";
    private static final String ERR_JTGX_HYZK = "<家庭关系与婚姻状况>";
    private static final String ERR_JTGX_XB_HYZK = "<家庭关系与性别、婚姻状况>";

    private static final String YHZGX_XZ_HYWZZJNA = "1"; //婚姻未知自己血源关系男
    private static final String YHZGX_XZ_HYWZZJNV = "2"; //婚姻未知自己血源关系女
    private static final String YHZGX_XZ_HYWZQTQSNANV = "3"; //婚姻未知其它亲属男女
    private static final String YHZGX_XZ_YHNV = "4"; //已婚女
    private static final String YHZGX_XZ_YHNA = "5"; //已婚男
    private static final String YHZGX_XZ_YHNANV = "6"; //已婚男女

    /**
     *
     * @param poOne
     * @return
     * @throws ServiceException
     */
    public List doChecker(PO poOne) throws
        ServiceException {
      super.doChecker(poOne);

      List lstVo = new ArrayList();
      PoHJXX_CZRKJBXXB poczrk = (PoHJXX_CZRKJBXXB) poOne;
      String strXb = poczrk.getXb();
      String strYhzgx = poczrk.getYhzgx();
      String strHyzk = poczrk.getHyzk();

      //========================================================================
      //得到与户主关系代码中的关系性质（扩张标志B）
      //从中可以得到婚姻状况和性别
      if (strYhzgx != null && !strYhzgx.equals("")) {
        VoXT_XTCSB voXtcs = SysParam.getXt_xtcsbAsVo(SysParam.DM_JTGX, strYhzgx);
        String strYhzgx_xz = voXtcs == null ? null : voXtcs.getKzbzb(); //与户主关系的性质

        if (strYhzgx_xz != null &&
            !YHZGX_XZ_HYWZQTQSNANV.equals(strYhzgx_xz)) { //!=婚姻未知其它亲属男女

          //婚姻未知自己血源关系男
          if (YHZGX_XZ_HYWZZJNA.equals(strYhzgx_xz)) {
            if (!HjConstant.RYXB_NA.equals(strXb)) {
              VoRyljjycwxx vo = new VoRyljjycwxx(poczrk);
              vo.setSm(ERR_JTGX_XB.concat(" 与户主关系标识为“男”，与性别不相符！ "));
              lstVo.add(vo);
            }
          }

          //婚姻未知自己血源关系女
          else if (YHZGX_XZ_HYWZZJNV.equals(strYhzgx_xz)) {
            if (!HjConstant.RYXB_NV.equals(strXb)) {
              VoRyljjycwxx vo = new VoRyljjycwxx(poczrk);
              vo.setSm(ERR_JTGX_XB.concat(" 与户主关系标识为“女”，与性别不相符！ "));
              lstVo.add(vo);
            }
          }

          //已婚女
          else if (YHZGX_XZ_YHNV.equals(strYhzgx_xz)) {
            String strErrMsg = "";
            if (!HjConstant.RYXB_NV.equals(strXb)) {
              strErrMsg += " 与户主关系标识为“已婚女”,与性别不相符！ ";
            }
            if (HjConstant.HYZK_WH.equals(strHyzk)) {
              strErrMsg += " 与户主关系标识为“已婚女”,但婚姻状态不相符 ！";
            }
            if (!strErrMsg.equals("")) {
              VoRyljjycwxx vo = new VoRyljjycwxx(poczrk);
              vo.setSm(ERR_JTGX_XB_HYZK + strErrMsg);
              lstVo.add(vo);
            }
          }

          //已婚男
          else if (YHZGX_XZ_YHNA.equals(strYhzgx_xz)) {
            String strErrMsg = "";
            if (!HjConstant.RYXB_NA.equals(strXb)) {
              strErrMsg += " 与户主关系标识为“已婚男”,与性别不相符！ ";
            }
            if (HjConstant.HYZK_WH.equals(strHyzk)) {
              strErrMsg += " 与户主关系标识为“已婚男”,但婚姻状态不相符 ！";
            }
            if (!strErrMsg.equals("")) {
              VoRyljjycwxx vo = new VoRyljjycwxx(poczrk);
              vo.setSm(ERR_JTGX_XB_HYZK + strErrMsg);
              lstVo.add(vo);
            }
          }

          //已婚男女
          else if (YHZGX_XZ_YHNANV.equals(strYhzgx_xz)) {
            if (HjConstant.HYZK_WH.equals(strHyzk)) {
              VoRyljjycwxx vo = new VoRyljjycwxx(poczrk);
              vo.setSm(ERR_JTGX_XB_HYZK.concat("与户主关系标识为“已婚”，但与婚姻状况不相符！"));
              lstVo.add(vo);
            }
          }

        } //if (!YHZGX_XZ_HYWZQTQSNANV.equals(strYhzgx_xz)) {
      }
      return lstVo;
    }

  }

  /**
   * 出生日期校验
   * 说明：自身校验－范围不合理－与婚姻状况－与文化程度
   */
  private class CsrqDataChecker
      extends CzrkjbxxDataChecker
      implements IDataChecker {
    private static final String ERR_CSRQ_SELF = "<出生日期自身校验>";
    private static final String ERR_CSRQ_HYZK = "<出生日期与婚姻状况>";
    private static final String ERR_CSRQ_WHCD = "<出生日期与文化程度>";

    /**
     *
     * @param poOne
     * @return
     * @throws ServiceException
     */
    public List doChecker(PO poOne) throws
        ServiceException {
      super.doChecker(poOne);

      List lstVo = new ArrayList();
      PoHJXX_CZRKJBXXB poczrk = (PoHJXX_CZRKJBXXB) poOne;

      ////////////////////////////////////////////////////////////////////
      //出生日期自身校验
      String strCsrq = poczrk.getCsrq();
      if (strCsrq == null || (strCsrq != null && strCsrq.length() != 8)) {
        VoRyljjycwxx vo = new VoRyljjycwxx(poczrk);
        vo.setSm(ERR_CSRQ_SELF.concat("出生日期长度不为8！"));
        lstVo.add(vo);
      }
      else {
        //////////////////////////////////////////////////////////////////
        //日期合法不合理
        if (!StringUtils.isNumeric(strCsrq)) {
          VoRyljjycwxx vo = new VoRyljjycwxx(poczrk);
          vo.setSm(ERR_CSRQ_SELF.concat("出生日期不为数字！"));
          lstVo.add(vo);
        }
        else if (!StringUtils.isDate(strCsrq, "yyyyMMdd")) {
          VoRyljjycwxx vo = new VoRyljjycwxx(poczrk);
          vo.setSm(ERR_CSRQ_SELF.concat("出生日期不合法！"));
          lstVo.add(vo);
        }

        String strCurDate = StringUtils.formateDate();
        String strCsrqMonthDay = strCsrq.substring(4, 8);
        int iCurYear = Integer.parseInt(strCurDate.substring(0, 4));

        ////////////////////////////////////////////////////////////////
        //与婚姻状况(小于18岁，而婚姻状况！＝未婚或未说明的婚姻状况)
        String strHyzk = poczrk.getHyzk();
        int iAge18 = iCurYear - 18;
        String strCsrqHyzk = String.valueOf(iAge18).concat(strCsrqMonthDay);
        if (Integer.parseInt(strCsrqHyzk) < Integer.parseInt(strCsrq) &&
            ! (HjConstant.HYZK_WH.equals(strHyzk) ||
               HjConstant.HYZK_WSMDHYZK.equals(strHyzk))) {
          VoRyljjycwxx vo = new VoRyljjycwxx(poczrk);
          vo.setSm(ERR_CSRQ_HYZK.concat("年龄小于18岁，与婚姻状况不相符！"));
          lstVo.add(vo);
        }

        ///////////////////////////////////////////////////////////////
        //与文化程度（小于6岁，而学历！＝从未上过学）
        String strWhcd = poczrk.getWhcd();
        int iAge6 = iCurYear - 6;
        String strCsrqWhcd = String.valueOf(iAge6).concat(strCsrqMonthDay);
        if (Integer.parseInt(strCsrqWhcd) < Integer.parseInt(strCsrq) &&
            !HjConstant.WHCD_CWSGX.equals(strWhcd)) {
          VoRyljjycwxx vo = new VoRyljjycwxx(poczrk);
          vo.setSm(ERR_CSRQ_WHCD.concat("年龄小于6岁，与文化程度不相符！"));
          lstVo.add(vo);
        }
      }

      return lstVo;
    }

  }

  /**
   * 公民身份号码校验
   * 说明：自身校验（长度－校验位）－重号－重人－与出生日期校验－与性别校验
   */
  private class GmsfhmDataChecker
      extends CzrkjbxxDataChecker
      implements IDataChecker {
    private static final String ERR_GMSFHM_XB = "<公民身份号码与性别>";
    private static final String ERR_GMSFHM_CSRQ = "<公民身份号码与出生日期>";
    private static final String ERR_GMSFHM_SELF = "<公民身份号码自身校验>";

    /**
     *
     * @param poOne - 常住人口基本信息PO
     * @return
     * @throws ServiceException
     */
    public List doChecker(PO poOne) throws
        ServiceException {
      super.doChecker(poOne);

      List lstVo = new ArrayList();
      PoHJXX_CZRKJBXXB poczrk = (PoHJXX_CZRKJBXXB) poOne;

      ///////////////////////////////////////////////////////////////
      //公民身份号码自己校验//42212919780715057X
      String strGmsfhm = poczrk.getGmsfhm();
      if (strGmsfhm == null || (strGmsfhm != null && strGmsfhm.length() != 18)) {
        VoRyljjycwxx vo = new VoRyljjycwxx(poczrk);
        vo.setSm(ERR_GMSFHM_SELF.concat("公民身份号码不为18位！"));
        lstVo.add(vo);
      }
      else {
        ///////////////////////////////////////////////////////////////
        //与性别校验
        String strXb = poczrk.getXb();
        int iSfz_Xb = Integer.parseInt(strGmsfhm.substring(16, 17)) % 2;
        switch (iSfz_Xb) {
          case 0: //女
            if (!HjConstant.RYXB_NV.equals(strXb)) {
              VoRyljjycwxx vo = new VoRyljjycwxx(poczrk);
              vo.setSm(ERR_GMSFHM_XB.concat("公民身份号码标识为“女”，与性别代码不相符！"));
              lstVo.add(vo);
            }
            break;
          case 1: //男
            if (!HjConstant.RYXB_NA.equals(strXb)) {
              VoRyljjycwxx vo = new VoRyljjycwxx(poczrk);
              vo.setSm(ERR_GMSFHM_XB.concat("公民身份号码标识为“男”，与性别代码不相符！"));
              lstVo.add(vo);
            }
            break;
        }

        //////////////////////////////////////////////////////////////////
        //与出生日期校验
        String strCsrq = poczrk.getCsrq();
        String strSfz_Csrq = strGmsfhm.substring(6, 14);
        if (!strSfz_Csrq.equals(strCsrq)) {
          VoRyljjycwxx vo = new VoRyljjycwxx(poczrk);
          vo.setSm(ERR_GMSFHM_CSRQ.concat("公民身份号码标识的“出生日期”，与出生日期不相符！"));
          lstVo.add(vo);
        }

        //////////////////////////////////////////////////////////////////
        //重号

        ///////////////////////////////////////////////////////////////////
        //重人

        ////////////////////////////////////////////////////////////////////
        //校验位计算比较
        if (!PID.IDCheck(strGmsfhm)) {
          VoRyljjycwxx vo = new VoRyljjycwxx(poczrk);
          vo.setSm(ERR_GMSFHM_SELF.concat("公民身份号码“校验位”,计算不正确！"));
          lstVo.add(vo);
        }

      }

      return lstVo;
    }
  }

  /**
   * 常口基本信息检查
   */
  private abstract class CzrkjbxxDataChecker
      extends AbstractDataChecker
      implements IDataChecker {
    public List doChecker(PO poOne) throws
        ServiceException {
      //////////////////////////////////////////////////////////////
      //判断传入参数
      if (poOne == null ||
          (poOne != null && ! (poOne instanceof PoHJXX_CZRKJBXXB))) {
        return null;
      }
      return null;
    }

  }

  /**
   * 数据检查接口抽象实现类
   */
  private abstract class AbstractDataChecker
      implements IDataChecker {
    public abstract List doChecker(PO poOne) throws
        ServiceException;
  }

  /**
   * 数据校验接口
   */
  private interface IDataChecker {
    List doChecker(PO poOne) throws ServiceException;
  }

}
