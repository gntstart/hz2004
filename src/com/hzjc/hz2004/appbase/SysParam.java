/* Generated by Together */

package com.hzjc.hz2004.appbase;

import com.hzjc.wsstruts.exception.ControlException;
import org.apache.commons.logging.*;
import java.util.*;
import com.hzjc.hz2004.service.*;
import com.hzjc.wsstruts.exception.*;
import com.hzjc.hz2004.vo.*;

/**
 * 得到系统数据字典--系统控制参数--系统参数
 * <p>Title: Hz2004</p>
 * <p>Description: 常住人口二代证Hz2004版</p>
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Company: HZJC</p>
 * @author Kansan Ku(kgb_hz@126.com)
 * @version 1.0
 */
public class SysParam {
  //日志处理
  protected static Log _log = LogFactory.getLog(SysParam.class);
  //控制参数代码类别
  public static String DM_QCCLCZLX = "1000"; //迁出处理操作类型
  public static String DM_DYBZ = "1001"; //打印标志
  public static String DM_KZBZ = "1002"; //控制标志
  public static String DM_SPBZ = "1003"; //审批标志
  public static String DM_LSBZ = "1004"; //落实标志
  public static String DM_HB = "1005"; //户别
  public static String DM_RYLB = "1006"; //人员类别
  public static String DM_HLX = "1007"; //户类型
  public static String DM_BGGZLB = "1008"; //变更更正类别
  public static String DM_BGGZXM = "1009"; //变更更正项目
  public static String DM_RYZT = "1010"; //人员状态
  public static String DM_MLPZT = "1011"; //门楼牌状态
  public static String DM_HHZT = "1012"; //户号状态
  public static String DM_RHFLZT = "1013"; //人户分离状态
  public static String DM_QCCLBZ = "1014"; //迁出处理标志
  public static String DM_MLPJLLB = "1015"; //门楼牌建立类别
  public static String DM_MLPCXLB = "1016"; //门楼牌撤消类别
  public static String DM_HJLLB = "1017"; //户建立类别
  public static String DM_HCXLB = "1018"; //户撤消类别
  public static String DM_QCZXLB = "1019"; //迁出注销类别
  public static String DM_QRLB = "1020"; //迁入登记类别
  public static String DM_SWZXLB = "1021"; //死亡注销类别
  public static String DM_CSDJLB = "1022"; //出生登记类别
  public static String DM_HBBGLB = "1023"; //户别变更类别
  public static String DM_HJBLLB = "1024"; //户籍补录类别
  public static String DM_HJSCLB = "1025"; //户籍删除类别
  public static String DM_ZZBDLB = "1026"; //住址变动类别
  public static String DM_HCYBDLX = "1027"; //户成员变动类型
  public static String DM_MLPDJFS = "1028"; //门楼牌冻结方式
  public static String DM_MLPDJLX = "1029"; //门楼牌冻结类型
  public static String DM_XZYWLX = "1030"; //限制业务类型
  public static String DM_HJYWXZZT = "1031"; //户籍业务限制状态
  public static String DM_MXXZFS = "1032"; //明细限制方式
  public static String DM_MXXZLX = "1033"; //明细限制类型
  public static String DM_BGDYZDMC = "1034"; //变更打印字段名称
  public static String DM_BGSPZDMC = "1035"; //变更审批字段名称
  public static String DM_SPLX = "1036"; //审批类型
  public static String DM_SQQRYY = "1037"; //申请迁入原因
  public static String DM_YJRCLX = "1038"; //引进人才类型
  public static String DM_ZYZL = "1039"; //专业种类
  public static String DM_ZYJSZC = "1040"; //专业技术职称
  public static String DM_SPJG = "1041"; //审批结果
  public static String DM_CZJG = "1042"; //操作结果
  public static String DM_JLBZ = "1043"; //记录标志
  public static String DM_XX = "1044"; //血型
  public static String DM_ZJXY = "1045"; //宗教信仰
  public static String DM_BYZK = "1046"; //兵役状况
  public static String DM_XXJB = "1047"; //信息级别
  public static String DM_FWCS = "1048"; //服务处所
  public static String DM_QXDYQFJG = "1049"; //区县对应签发机关
  public static String DM_RYSDZT = "1050"; //人员锁定状态
  public static String DM_YWNR = "1053"; //业务内容
  public static String DM_ZXHKYY = "1054"; //注销户口原因
  public static String DM_HFHKYY = "1055"; //恢复户口原因
  public static String DM_BDYY = "1056"; //变动原因
  public static String DM_HYLB = "1057"; //行业类别
  public static String DM_CZLB = "1058"; //操作类别
  public static String DM_YDZYXQX = "5000"; //一代证有效期限
  public static String DM_YDZBZLB = "5001"; //一代证办证类别
  public static String DM_YDZBZYY = "5002"; //一代证办证原因
  public static String DM_YDZBLBZ = "5004"; //一代证办理标志
  public static String DM_DKDYBZ = "5005"; //底卡打印标志
  public static String DM_EDZSLYY = "5006"; //二代证申领原因
  public static String DM_EDZSJYY = "5007"; //二代证收交原因
  public static String DM_EDZZZLX = "5008"; //二代证制证类型
  public static String DM_EDZLZFS = "5009"; //二代证领证方式
  public static String DM_EDZSFLX = "5010"; //二代证收费类型
  public static String DM_EDZSLZT = "5011"; //二代证受理状态
  public static String DM_ZJLB = "5012"; //证件类别
  public static String DM_ZJZT = "5013"; //证件状态
  public static String DM_CHCLFS = "5014"; //重号处理方式
  public static String DM_CHJLZT = "5015"; //重号记录状态
  public static String DM_ZJZL = "5016"; //证件质量
  public static String DM_ZZXXCWLB = "5017"; //制证信息错误类别
  public static String DM_SFHMFPZT = "5018"; //身份号码分配状态
  public static String DM_LQFFLB = "5019"; //领取发放类别
  public static String DM_SHQFLX = "5020"; //审核签发类型
  public static String DM_DZPZFF = "5021"; //地址拼装方法
  public static String DM_SHQK = "5022"; //审核情况
  public static String DM_MZ = "8001"; //民族
  public static String DM_WHCD = "8002"; //文化程度
  public static String DM_XB = "8003"; //性别
  public static String DM_ZZMM = "8004"; //政治面貌
  public static String DM_ZY = "8005"; //职业
  public static String DM_JTGX = "8006"; //家庭关系
  public static String DM_HYZK = "8007"; //婚姻状况
  public static String DM_GJ = "8008"; //国籍
  public static String DM_ZYLB = "8009"; //职业类别
  public static String DM_YWBZ = "9000"; //业务标志
  public static String DM_CXBZ = "9001"; //冲销标志
  public static String DM_QYBZ = "9002"; //启用标志
  public static String DM_SCBZ = "9003"; //上传标志
  public static String DM_BDLX = "9004"; //变动类型
  public static String DM_BDFW = "9005"; //变动范围
  public static String DM_YHZT = "9007"; //用户状态
  public static String DM_BBZT = "9008"; //报表状态
  public static String DM_YHZW = "9009"; //用户职务
  public static String DM_YHMJ = "9010"; //用户密级
  public static String DM_ZDMJ = "9011"; //字段密级
  public static String DM_DZBZ = "9012"; //动作标志
  public static String DM_CDCC = "9013"; //菜单层次
  public static String DM_CDLX = "9014"; //菜单类型
  public static String DM_CDBZ = "9015"; //菜单标志
  public static String DM_ZDLX = "9016"; //终端类型
  public static String DM_XQLX = "9017"; //辖区类型
  public static String DM_SJFWXZBZ = "9018"; //数据范围限制标志
  public static String DM_YHDTCXBZ = "9019"; //用户等同查询标志
  public static String DM_YWLX = "9020"; //业务类型
  public static String DM_MBDJ = "9021"; //模板等级
  public static String DM_YWBBLB = "9022"; //业务报表类别
  public static String DM_DWJB = "9024"; //单位级别
  public static String DM_XTYWLB = "9025"; //系统业务类别
  public static String DM_ZDLB = "9026"; //字段类别
  public static String DM_SFBZ = "9027"; //是否标志
  public static String DM_KHDBB = "9028"; //客户端版本
  public static String DM_XTGLCS = "9999"; //系统各类参数
  //系统数据字典--系统控制参数--系统参数
  public final static String SYS_XT_SJZDB = "XT_SJZDB";
  public final static String SYS_XT_XTKZCSB = "XT_XTKZCSB";
  public final static String SYS_XT_XTCSB = "XT_XTCSB";
  //其他系统参数代码
  public final static String DM_DWXXB = "DM_DWXXB"; //单位信息表
  public final static String DM_JLXXXB = "DM_JLXXXB"; //街路巷
  public final static String DM_JWHXXB = "DM_JWHXXB"; //居委会
  public final static String DM_JWZRQXXB = "DM_JWZRQXXB"; //警务责任区
  public final static String DM_XZQHB = "DM_XZQHB"; //行政区划
  public final static String DM_XZJDXXB = "DM_XZJDXXB"; //乡镇街道

  private static Map _mapParam = null; //所有参数、代码的静态散列
  public static int gnRptConNum =0;  //报表统计连接数
  private static Map _mapDmlx = null;

  //初始化
  static {
    checkInitMap();
  }

  /**
   *
   */
  protected SysParam() {
  }

  /**
   * 如果_mapParam静态数据为空，则创建之
   */
  private static void checkInitMap() {
    if (_mapParam == null) {
      _mapParam = new HashMap();
    }

    /*
         if (_mapDmlx == null) {
      _mapDmlx = new HashMap();
      createDmlx();
         }
     */

  }

  private static void createDmlx() {
    _mapDmlx.put("DM_QCCLCZLX", "1000");
    _mapDmlx.put("DM_DYBZ", "1001");
    _mapDmlx.put("DM_KZBZ", "1002");
    _mapDmlx.put("DM_SPBZ", "1003");
    _mapDmlx.put("DM_LSBZ", "1004");
    _mapDmlx.put("DM_HB", "1005");
    _mapDmlx.put("DM_RYLB", "1006");
    _mapDmlx.put("DM_HLX", "1007");
    _mapDmlx.put("DM_BGGZLB", "1008");
    _mapDmlx.put("DM_BGGZXM", "1009");
    _mapDmlx.put("DM_RYZT", "1010");
    _mapDmlx.put("DM_MLPZT", "1011");
    _mapDmlx.put("DM_HHZT", "1012");
    _mapDmlx.put("DM_RHFLZT", "1013");
    _mapDmlx.put("DM_QCCLBZ", "1014");
    _mapDmlx.put("DM_MLPJLLB", "1015");
    _mapDmlx.put("DM_MLPCXLB", "1016");
    _mapDmlx.put("DM_HJLLB", "1017");
    _mapDmlx.put("DM_HCXLB", "1018");
    _mapDmlx.put("DM_QCZXLB", "1019");
    _mapDmlx.put("DM_QRLB", "1020");
    _mapDmlx.put("DM_SWZXLB", "1021");
    _mapDmlx.put("DM_CSDJLB", "1022");
    _mapDmlx.put("DM_HBBGLB", "1023");
    _mapDmlx.put("DM_HJBLLB", "1024");
    _mapDmlx.put("DM_HJSCLB", "1025");
    _mapDmlx.put("DM_ZZBDLB", "1026");
    _mapDmlx.put("DM_HCYBDLX", "1027");
    _mapDmlx.put("DM_MLPDJFS", "1028");
    _mapDmlx.put("DM_MLPDJLX", "1029");
    _mapDmlx.put("DM_XZYWLX", "1030");
    _mapDmlx.put("DM_HJYWXZZT", "1031");
    _mapDmlx.put("DM_MXXZFS", "1032");
    _mapDmlx.put("DM_MXXZLX", "1033");
    _mapDmlx.put("DM_BGDYZDMC", "1034");
    _mapDmlx.put("DM_BGSPZDMC", "1035");
    _mapDmlx.put("DM_SPLX", "1036");
    _mapDmlx.put("DM_SQQRYY", "1037");
    _mapDmlx.put("DM_YJRCLX", "1038");
    _mapDmlx.put("DM_ZYZL", "1039");
    _mapDmlx.put("DM_ZYJSZC", "1040");
    _mapDmlx.put("DM_SPJG", "1041");
    _mapDmlx.put("DM_CZJG", "1042");
    _mapDmlx.put("DM_JLBZ", "1043");
    _mapDmlx.put("DM_XX", "1044");
    _mapDmlx.put("DM_ZJXY", "1045");
    _mapDmlx.put("DM_BYZK", "1046");
    _mapDmlx.put("DM_XXJB", "1047");
    _mapDmlx.put("DM_FWCS", "1048");
    _mapDmlx.put("DM_QXDYQFJG", "1049");
    _mapDmlx.put("DM_RYSDZT", "1050");
    _mapDmlx.put("DM_YWNR", "1053");
    _mapDmlx.put("DM_ZXHKYY", "1054");
    _mapDmlx.put("DM_HFHKYY", "1055");
    _mapDmlx.put("DM_BDYY", "1056");
    _mapDmlx.put("DM_HYLB", "1057");
    _mapDmlx.put("DM_CZLB", "1058");
    _mapDmlx.put("DM_JLXHLX", "1059");
    _mapDmlx.put("DM_YDZYXQX", "5000");
    _mapDmlx.put("DM_YDZBZLB", "5001");
    _mapDmlx.put("DM_YDZBZYY", "5002");
    _mapDmlx.put("DM_YDZBLBZ", "5004");
    _mapDmlx.put("DM_DKDYBZ", "5005");
    _mapDmlx.put("DM_EDZSLYY", "5006");
    _mapDmlx.put("DM_EDZSJYY", "5007");
    _mapDmlx.put("DM_EDZZZLX", "5008");
    _mapDmlx.put("DM_EDZLZFS", "5009");
    _mapDmlx.put("DM_EDZSFLX", "5010");
    _mapDmlx.put("DM_EDZSLZT", "5011");
    _mapDmlx.put("DM_ZJLB", "5012");
    _mapDmlx.put("DM_ZJZT", "5013");
    _mapDmlx.put("DM_CHCLFS", "5014");
    _mapDmlx.put("DM_CHJLZT", "5015");
    _mapDmlx.put("DM_ZJZL", "5016");
    _mapDmlx.put("DM_ZZXXCWLB", "5017");
    _mapDmlx.put("DM_SFHMFPZT", "5018");
    _mapDmlx.put("DM_LQFFLB", "5019");
    _mapDmlx.put("DM_SHQFLX", "5020");
    _mapDmlx.put("DM_DZPZFF", "5021");
    _mapDmlx.put("DM_SHQK", "5022");
    _mapDmlx.put("DM_MZ", "8001");
    _mapDmlx.put("DM_WHCD", "8002");
    _mapDmlx.put("DM_XB", "8003");
    _mapDmlx.put("DM_ZZMM", "8004");
    _mapDmlx.put("DM_ZY", "8005");
    _mapDmlx.put("DM_JTGX", "8006");
    _mapDmlx.put("DM_HYZK", "8007");
    _mapDmlx.put("DM_GJ", "8008");
    _mapDmlx.put("DM_ZYLB", "8009");
    _mapDmlx.put("DM_YWBZ", "9000");
    _mapDmlx.put("DM_CXBZ", "9001");
    _mapDmlx.put("DM_QYBZ", "9002");
    _mapDmlx.put("DM_SCBZ", "9003");
    _mapDmlx.put("DM_BDLX", "9004");
    _mapDmlx.put("DM_BDFW", "9005");
    _mapDmlx.put("DM_YHZT", "9007");
    _mapDmlx.put("DM_BBZT", "9008");
    _mapDmlx.put("DM_YHZW", "9009");
    _mapDmlx.put("DM_YHMJ", "9010");
    _mapDmlx.put("DM_ZDMJ", "9011");
    _mapDmlx.put("DM_DZBZ", "9012");
    _mapDmlx.put("DM_CDCC", "9013");
    _mapDmlx.put("DM_CDLX", "9014");
    _mapDmlx.put("DM_CDBZ", "9015");
    _mapDmlx.put("DM_ZDLX", "9016");
    _mapDmlx.put("DM_XQLX", "9017");
    _mapDmlx.put("DM_SJFWXZBZ", "9018");
    _mapDmlx.put("DM_YHDTCXBZ", "9019");
    _mapDmlx.put("DM_YWLX", "9020");
    _mapDmlx.put("DM_MBDJ", "9021");
    _mapDmlx.put("DM_YWBBLB", "9022");
    _mapDmlx.put("DM_ZSBBLB", "9023");
    _mapDmlx.put("DM_DWJB", "9024");
    _mapDmlx.put("DM_XTYWLB", "9025");
    _mapDmlx.put("DM_ZDLB", "9026");
    _mapDmlx.put("DM_SFBZ", "9027");
    _mapDmlx.put("DM_KHDBB", "9028");
    _mapDmlx.put("DM_SQBZ", "9029");
    _mapDmlx.put("DM_GXBZ", "9030");
    _mapDmlx.put("DM_XTGLCS", "9999");

    _mapDmlx.put("DM_DWXXB", "DM_DWXXB");
    _mapDmlx.put("DM_JLXXXB", "DM_JLXXXB");
    _mapDmlx.put("DM_JWHXXB", "DM_JWHXXB");
    _mapDmlx.put("DM_JWZRQXXB", "DM_JWZRQXXB");
    _mapDmlx.put("DM_XZQHB", "DM_XZQHB");
    _mapDmlx.put("DM_XZJDXXB", "DM_XZJDXXB");

    //new 2006
    //2006.11.23
    _mapDmlx.put("DM_YHXXB", "DM_YHXXB");

  }

  public static String getDmlx(String asDmlx) {
    return (String) _mapDmlx.get(asDmlx.toUpperCase());
  }

  /**
   *
   * @throws ControlException
   */
  public static void loadAllParamCode() throws ControlException {
    try {
      loadXt_sjzdb(); //载入数据字典表
      loadXt_xtcsb(); //载入系统参数表
      loadXt_xtkzcsb(); //载入系统控制参数表
      //loadAllXt_dwxxb(); //载入系统单位代码
      //loadAllXt_jlxxxbs(); //载入街路巷信息
      //loadAllXt_jwhxxbs(); //载入居委会信息
      //loadAllXt_jwzrqxxbs(); //载入警务责任区信息
      //loadAllXt_xzjdxxbs(); //载入乡镇街道信息
      //loadAllXt_xzqhbs(); //载入行政区划信息

      //new 2006
      //陆振宇修改 2006.11.16
      loadAllXt_dwxxb(); //载入系统单位代码
      loadAllXt_jlxxxbs(); //载入街路巷信息
      loadAllXt_jwhxxbs(); //载入居委会信息
      loadAllXt_jwzrqxxbs(); //载入警务责任区信息
      loadAllXt_xzjdxxbs(); //载入乡镇街道信息
      loadAllXt_xzqhbs(); //载入行政区划信息
      loadAllXt_yhxxbs(); //载入人员信息

    }
    catch (ControlException ex) {
      throw ex;
    }
  }

  /**
   *
   * @throws ControlException
   */
  protected static void loadAllXt_xzjdxxbs() throws ControlException {
    try {
      Map mapKeyValue = Hz2004ServiceLocator.getInstance().
          getSysParamCodeService().
          loadAllXt_xzjdxxbs();
      _mapParam.put(DM_XZJDXXB, mapKeyValue);
    }
    catch (Exception ex) {
      throw new ControlException(WSErrCode.ERR_CTRL_LOAD_XZJDXXB, ex);
    }
  }

  /**
   *
   * @throws ControlException
   */
  protected static void loadAllXt_xzqhbs() throws ControlException {
    try {
      Map mapKeyValue = Hz2004ServiceLocator.getInstance().
          getSysParamCodeService().
          loadAllXt_xzqhbs();
      _mapParam.put(DM_XZQHB, mapKeyValue);
    }
    catch (Exception ex) {
      throw new ControlException(WSErrCode.ERR_CTRL_LOAD_XZQHB, ex);
    }
  }

  /**
   *
   * @throws ControlException
   */
  protected static void loadAllXt_jwzrqxxbs() throws ControlException {
    try {
      Map mapKeyValue = Hz2004ServiceLocator.getInstance().
          getSysParamCodeService().
          loadAllXt_jwzrqxxbs();
      _mapParam.put(DM_JWZRQXXB, mapKeyValue);
    }
    catch (Exception ex) {
      throw new ControlException(WSErrCode.ERR_CTRL_LOAD_JWZRQXXB, ex);
    }
  }

  /**
   *
   * @throws ControlException
   */
  protected static void loadAllXt_jwhxxbs() throws ControlException {
    try {
      Map mapKeyValue = Hz2004ServiceLocator.getInstance().
          getSysParamCodeService().
          loadAllXt_jwhxxbs();
      _mapParam.put(DM_JWHXXB, mapKeyValue);
    }
    catch (Exception ex) {
      throw new ControlException(WSErrCode.ERR_CTRL_LOAD_JWHXXB, ex);
    }
  }

  /**
   *
   * @throws ControlException
   */
  protected static void loadAllXt_jlxxxbs() throws ControlException {
    try {
      Map mapKeyValue = Hz2004ServiceLocator.getInstance().
          getSysParamCodeService().
          loadAllXt_jlxxxbs();
      _mapParam.put(DM_JLXXXB, mapKeyValue);
    }
    catch (Exception ex) {
      throw new ControlException(WSErrCode.ERR_CTRL_LOAD_JLXXXB, ex);
    }
  }

  /**
   *
   * @throws ControlException
   */
  protected static void loadAllXt_dwxxb() throws ControlException {
    try {
      Map mapKeyValue = Hz2004ServiceLocator.getInstance().
          getSysParamCodeService().
          loadAllXt_dwxxbs();
      _mapParam.put(DM_DWXXB, mapKeyValue);
    }
    catch (Exception ex) {
      throw new ControlException(WSErrCode.ERR_CTRL_LOAD_DWXXB, ex);
    }
  }

  /**
   * 载入所有系统数据字典定义表
   * @throws ControlException
   */
  protected static void loadXt_sjzdb() throws ControlException {
    try {
      Map mapvo = Hz2004ServiceLocator.getInstance().getSysParamCodeService().
          loadAllXt_sjzds();
      //加入新加载的数据字典集合
      _mapParam.put(SYS_XT_SJZDB, mapvo);
      //_log.info("zp=" + ( (VoXT_SJZDB) mapvo.get("zp")).getZdlx());
    }
    catch (Exception ex) {
      throw new ControlException(WSErrCode.ERR_CTRL_LOAD_DATADICTIONARY, ex);
    }
  }

  /**
   * 载入所有系统控制参数表
   * @throws ControlException
   */
  protected static void loadXt_xtkzcsb() throws ControlException {
    try {
      Map mapVo = Hz2004ServiceLocator.getInstance().getSysParamCodeService().
          loadAllXt_xtkzcss();
      _mapParam.put(SYS_XT_XTKZCSB, mapVo);
    }
    catch (Exception ex) {
      throw new ControlException(WSErrCode.ERR_CTRL_LOAD_SYSCTRLPARAM, ex);
    }
  }

  /**
   * 载入所有系统参数表
   * @throws ControlException
   */
  protected static void loadXt_xtcsb() throws ControlException {
    try {
      //checkInitMap(); //如果全局静态的Map为空，则创建之
      Map mapvo = Hz2004ServiceLocator.getInstance().getSysParamCodeService().
          loadAllXt_xtcss();
      //加入新加载的系统参数集合
      _mapParam.put(SYS_XT_XTCSB, mapvo);
    }
    catch (Exception ex) {
      throw new ControlException(WSErrCode.ERR_CTRL_LOAD_SYSPARAM, ex);
    }
  }

  /**
   * 检验所有散列集合
   */
  private static void checkAllMap() {
    if (_mapParam == null) {
      checkInitMap();
      loadAllParamCode();
    }
  }

  /**
   * 根据字段名称得到该字段的定义VO
   * @param strZdmc
   * @return
   */
  public static VoXT_SJZDB getXt_sjzdb(String strZdmc) {
    VoXT_SJZDB vo = null;
    //=============================================================
    //传入的字段名称为空，则返回空VO
    //=============================================================
    if (strZdmc == null || strZdmc.equals("")) {
      return vo;
    }
    //=============================================================
    //判断并初始化系统内存中的数据字典列表
    //得到系统传入数据字段的VO
    //============================================================
    if (_mapParam.containsKey(SYS_XT_SJZDB)) {
      Map mapVoSjzd = (Map) _mapParam.get(SYS_XT_SJZDB);
      if (mapVoSjzd != null && !mapVoSjzd.isEmpty()) {
        vo = (VoXT_SJZDB) mapVoSjzd.get(strZdmc.trim().toLowerCase());
      }
    }
    return vo;
  }

  /**
   * 根据单位代码得到单位名称描述
   * @param strDm - 单位代码
   * @return
   */
  /*
     public static String getXt_dwxxbAsStr(String strDm) {
    String strDmSm = strDm;
    if (strDm == null || strDm.equals("")) {
      return strDmSm;
    }
    //判断内存中是否存在
    if (_mapParam.containsKey(DM_DWXXB)) {
      Map mapKeyValue = (Map) _mapParam.get(DM_DWXXB);
      if (mapKeyValue != null && !mapKeyValue.isEmpty()) {
        strDmSm = mapKeyValue.containsKey(strDmSm) ?
            String.valueOf(mapKeyValue.get(strDmSm)) : strDmSm;
      }
    }
    return strDmSm;
     }
   */

  /**
   * 查询返回系统控制参数散列
   * @return
   * @throws ServiceException
   */
  protected static Map getXt_xtkzcsbAsMap() throws ServiceException {
    Map mapVoXtkzcs = (Map) _mapParam.get(SYS_XT_XTKZCSB);
    return mapVoXtkzcs;
  }

  /**
   * 根据系统控制类别，得到对应的控制类VO
   * @param strKzlb -- 控制类别
   * @return
   */
  public static VoXT_XTKZCSB getXt_xtkzcsb(String strKzlb) throws
      ServiceException {
    VoXT_XTKZCSB vo = null;
    //==========================================================
    //传入的控制类别为空，则返回空VO
    //==========================================================
    if (strKzlb == null || strKzlb.equals("")) {
      return null;
    }

    //==========================================================
    // 判断并初始化系统内存中的系统控制参数，得到系统控制该控制类别VO
    //==========================================================
    Map mapVoXtkzcs = getXt_xtkzcsbAsMap();
    if (mapVoXtkzcs != null && !mapVoXtkzcs.isEmpty()) {
      vo = (VoXT_XTKZCSB) mapVoXtkzcs.get(strKzlb.trim());
    }
    return vo;
  }

  /**
   * 系统内存中的系统控制参数散列增加一键值
   * @param vo
   * @throws ServiceException
   */
  public static void addXt_xtkzcs(VoXT_XTKZCSB vo) throws ServiceException {
    if (vo == null) {
      return;
    }

    //增加系统控制参数VO
    Map mapVoXtkzcs = getXt_xtkzcsbAsMap();
    if (mapVoXtkzcs != null && !mapVoXtkzcs.isEmpty()) {
      mapVoXtkzcs.put(vo.getKzlb(), vo);
    }
  }

  /**
   * 根据参数类别为strCslb，得到对应的散列集合
   * @param strCslb
   * @return
   */
  public static Map getXt_xtcsbAsMap(String strCslb) throws ServiceException {
    Map mapXtcsCslb = null;
    //==========================================================
    //判断传入的参数--参数类别是否为空
    //==========================================================
    if (strCslb == null || strCslb.equals("")) {
      return null;
    }

    //=========================================================
    //其他表，非系统参数表中的代码类别处理
    //=========================================================
    /**
         if (strCslb.equalsIgnoreCase(DM_JWHXXB) ||
        strCslb.equalsIgnoreCase(DM_JLXXXB) ||
        strCslb.equalsIgnoreCase(DM_XZJDXXB) ||
        strCslb.equalsIgnoreCase(DM_XZQHB) ||
        strCslb.equalsIgnoreCase(DM_JWZRQXXB) ||
        strCslb.equalsIgnoreCase(DM_DWXXB)) {
         return _mapParam.containsKey(strCslb) ? (Map) _mapParam.get(strCslb) : null;
         }
     **/

    //=========================================================
    //得到系统参数类别散列
    //=========================================================
    if (_mapParam.containsKey(SYS_XT_XTCSB)) {
      Map mapXtcsb = (Map) _mapParam.get(SYS_XT_XTCSB);
      //得到某系统参数Map中的参数类别为strCslb的散列
      if (mapXtcsb != null && !mapXtcsb.isEmpty()) {
        mapXtcsCslb = (Map) mapXtcsb.get(strCslb);
      }
    }

    return mapXtcsCslb;
  }

  /**
   * 根据系统参数类别和代码，得到对应的VoXT_XTCSB
   * @param strCslb
   * @param strDm
   * @return
   */
  public static VoXT_XTCSB getXt_xtcsbAsVo(String strCslb, String strDm) {
    //得到系统参数散列
    Map mapXtcsCslb = getXt_xtcsbAsMap(strCslb);
    //返回系统参数VO
    VoXT_XTCSB vo = null;
    if (strDm != null && strCslb != null && !strDm.equals("") &&
        strCslb.equals("") && mapXtcsCslb != null && !mapXtcsCslb.isEmpty()) {
      vo = mapXtcsCslb.containsKey(strDm) ? (VoXT_XTCSB) mapXtcsCslb.get(strDm) : null;
    }
    return vo;
  }

  /**
   * 向系统参数中增加一参数条目VO
   * @param vo
   * @throws ServiceException
   */
  public static void addXt_xtcs(VoXT_XTCSB vo) throws ServiceException {
    if (vo == null) {
      return;
    }
    //增加系统参数VO
    Map mapXtcsCslb = getXt_xtcsbAsMap(vo.getCslb());
    if (mapXtcsCslb != null && !mapXtcsCslb.isEmpty()) {
      mapXtcsCslb.put(vo.getCslb(), vo);
    }
  }

  //new 2006
  //陆振宇 2006.11.23
  public final static String DM_YHXXB = "DM_YHXXB"; //用户信息表

  /**
   * 陆振宇 2006.11.23
   * @throws ControlException
   */
  protected static void loadAllXt_yhxxbs() throws ControlException {
      try{
          Map mapKeyValue = Hz2004ServiceLocator.getInstance().
                            getSysParamCodeService().
                            loadAllXt_yhxxbs();
          _mapParam.put(DM_YHXXB, mapKeyValue);
      } catch(Exception ex){
          throw new ControlException(WSErrCode.ERR_CTRL_LOAD_YHXXB, ex);
      }
  }

}
